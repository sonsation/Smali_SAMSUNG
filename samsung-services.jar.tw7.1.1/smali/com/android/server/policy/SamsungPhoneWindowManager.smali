.class public Lcom/android/server/policy/SamsungPhoneWindowManager;
.super Ljava/lang/Object;
.source "SamsungPhoneWindowManager.java"

# interfaces
.implements Lcom/android/server/policy/SamsungWindowManagerPolicy;


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lcom/android/server/policy/SamsungPhoneWindowManager$10;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$11;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$12;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$13;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$14;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$15;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$16;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$17;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$18;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$19;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$1;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$20;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$21;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$2;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$3;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$4;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$5;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$6;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$7;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$8;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$9;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$ForceImmersiveModeObserver;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$SamsungPolicyHandler;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$ScreenshotRunnable;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$ServiceConnectionForCaptureEffect;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$SettingsObserver;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$TakeScreenShotRunnable;,
        Lcom/android/server/policy/SamsungPhoneWindowManager$WakeupPreventionObserver;
    }
.end annotation


# static fields
.field static final ACTION_PANIC_CALL:Ljava/lang/String; = "com.samsung.android.action.PANIC_CALL"

.field static final CAR_MODE_BAR_BOTTOM:I = 0x2

.field static final CAR_MODE_BAR_LEFT:I = 0x0

.field static final CAR_MODE_BAR_RIGHT:I = 0x1

.field static final COG_BIXBYVERSION:Ljava/lang/String; = "BIXBY_KEY_FW_VERSION"

.field static final COG_KEYEVENT:Ljava/lang/String; = "KEYEVENT"

.field private static final CRITICAL_LOW_BATTERY_THRESHOLD:I = 0x5

.field static final DEBUG:Z = false

.field static final EXTRAS_PANIC_CALL:Ljava/lang/String; = "panic_call"

.field private static final FEATURE_COVER_NFC_AUTHENTICATION:Ljava/lang/String; = "com.sec.feature.cover.nfc_authentication"

.field private static final FINGERPRINT_KEY_IGNORE_DURATION:I = 0x3e8

.field private static final INTENT_ACTION_DOUBLE_CLICK:Ljava/lang/String; = "com.samsung.android.action.DOUBLE_CLICK"

.field private static final INTENT_ACTION_START_DOCK_OR_HOME:Ljava/lang/String; = "com.samsung.android.action.START_DOCK_OR_HOME"

.field private static final INTENT_PERMISSION_DOUBLE_CLICK:Ljava/lang/String; = "com.samsung.android.permisson.DOUBLE_CLICK"

.field private static final INTENT_PERMISSION_START_DOCK_OR_HOME:Ljava/lang/String; = "com.samsung.android.permisson.START_DOCK_OR_HOME"

.field private static final NAVIGATION_BAR_BUTTON_RATIO:D = 0.22220000624656677

.field private static final NAVIGATION_BAR_SPACE_RATIO:D = 0.10999999940395355

.field static final PERMISSION_PANIC_CALL:Ljava/lang/String; = "com.samsung.android.permission.PANIC_CALL"

.field static final SAFE_DEBUG:Z

.field static final SAMSUNGPAY_LAUNCH_ACTION:Ljava/lang/String; = "com.samsung.android.spay.quickpay"

.field private static final SCREENCAPTURE_BOTH:I = 0x3

.field private static final SCREENCAPTURE_FULLSCREEN:I = 0x1

.field private static final SCREENCAPTURE_KEY:I = 0x1

.field private static final SCREENCAPTURE_KNOX_DESKTOP:I = 0x4

.field private static final SCREENCAPTURE_MAIN:I = 0x1

.field private static final SCREENCAPTURE_ORIGINAL:I = 0x1

.field private static final SCREENCAPTURE_PALM:I = 0x2

.field private static final SCREENCAPTURE_PARTIAL:I = 0x2

.field private static final SCREENCAPTURE_QUICK_PANEL:I = 0x3

.field private static final SCREENCAPTURE_SHOW_SCREENSHOT_HELP:Ljava/lang/String; = "show_screenshot_help_guide"

.field private static final SCREENCAPTURE_SUB:I = 0x2

.field private static final SCREENCAPTURE_SWEEP_LEFT:I = 0x2

.field private static final SCREENCAPTURE_SWEEP_RIGHT:I = 0x3

.field private static final SCREENCAPTURE_WINDOW:I = 0x64

.field static final SPAGE_PACKAGE_NAME:Ljava/lang/String; = "com.samsung.android.app.spage"

.field static final SPAGE_SERVICE_NAME:Ljava/lang/String; = "com.samsung.android.app.spage.service.SpageService"

.field private static final START_LAUNCHER:I = 0x0

.field private static final START_ZERO_PAGE:I = 0x1

.field private static final TAG:Ljava/lang/String; = "SamsungPhoneWindowManager"

.field public static final TORCH_FILE:Ljava/lang/String; = "/sys/class/camera/flash/rear_flash"

.field private static final USERKEY_LONGPRESS:I = 0x1f4

.field private static final USERKEY_TIMEOUT:I = 0xaa

.field static final localLOGV:Z

.field private static mCameraId:Ljava/lang/String;

.field private static mCameraManager:Landroid/hardware/camera2/CameraManager;

.field private static mCurrentUser:I

.field private static mIsJapanModel:Z

.field private static mIsTablet:Z

.field private static mModelName:Ljava/lang/String;

.field private static mRotationBooster:Lcom/samsung/android/os/SemDvfsManager;

.field static final mTmpCarModeFrame:Landroid/graphics/Rect;

.field private static mWakeUpBooster:Lcom/samsung/android/os/SemDvfsManager;


# instance fields
.field private ACTION_RESOLUTION_CHANGED:Ljava/lang/String;

.field private final GET_ZEROPAGE_SETTING:Ljava/lang/String;

.field private final LAUNCHER_CLASS_NAME:Ljava/lang/String;

.field private final LAUNCHER_PACKAGE_NAME:Ljava/lang/String;

.field final MAX_SCREENSHOT_CONNECTION:I

.field final QUICKACCESS_AOD_DOUBLETAB:I

.field final QUICKACCESS_AOD_LONGPROESS:I

.field final QUICKACCESS_AOD_PRESS:I

.field final QUICKACCESS_CAMERA:I

.field final QUICKACCESS_CHANGE_AOD_MODE:I

.field final QUICKACCESS_FORCE_PRESS:I

.field final QUICKACCESS_FORCE_PRESS_SLEEP:I

.field final QUICKACCESS_FORCE_RELEASE:I

.field final QUICKACCESS_FORCE_RELEASE_SLEEP:I

.field final QUICKACCESS_FORCE_RELEASE_SLEEP2:I

.field final QUICKACCESS_SAMSUNGPAY:I

.field final QUICKACCESS_STATUS:I

.field final QUICKACCESS_SUBSCREEN_WAKEUP:I

.field private final START_FROM_ZEROPAGE:Ljava/lang/String;

.field private final ZEROPAGE_AUTHORITY:Ljava/lang/String;

.field private final ZEROPAGE_CLASS_NAME:Ljava/lang/String;

.field private final ZEROPAGE_DEFAULT_HOME:Ljava/lang/String;

.field private final ZEROPAGE_PACKAGE_NAME:Ljava/lang/String;

.field private final ZEROPAGE_URI:Landroid/net/Uri;

.field private bIsTorchOn:Z

.field private mActiveKeyCurTime:J

.field private final mActiveKeyPress:Ljava/lang/Runnable;

.field private mActiveKeyTriggered:Z

.field mAppOpsManager:Landroid/app/AppOpsManager;

.field private mAppliedOpenTheme:Z

.field mAppsShowWhenLocked:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Landroid/view/IApplicationToken;",
            ">;"
        }
    .end annotation
.end field

.field mAppsToBeHiddenBySViewCover:Ljava/util/HashSet;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/HashSet",
            "<",
            "Landroid/view/IApplicationToken;",
            ">;"
        }
    .end annotation
.end field

.field mAudioManager:Landroid/media/AudioManager;

.field mAvailableDoublTapLaunchCommand:Z

.field mAvailableOneTouchReport:Z

.field mAvailableVoiceCommand:Z

.field private mBackKeyConsumed:Z

.field private mBackKeyRect:Landroid/graphics/Rect;

.field private final mBatteryChangeReceiver:Landroid/content/BroadcastReceiver;

.field volatile mBeganFromNonInteractiveEndCall:Z

.field private mBixbyComponent:Landroid/content/ComponentName;

.field private mBixbyMsg:Ljava/lang/String;

.field mBixbyToast:Landroid/widget/Toast;

.field mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

.field mBlockKeyForDrivingMode:Z

.field private mBlockedHwKeys:Ljava/util/Map;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/Map",
            "<",
            "Ljava/lang/Integer;",
            "Ljava/util/Set",
            "<",
            "Ljava/lang/String;",
            ">;>;"
        }
    .end annotation
.end field

.field mBlockedHwKeysReceiver:Landroid/content/BroadcastReceiver;

.field mBootCompleteReceiver:Landroid/content/BroadcastReceiver;

.field mBootCompleted:Z

.field mCaptureReceiver:Landroid/content/BroadcastReceiver;

.field private mCapturedDisplay:I

.field private mCapturedOrigin:I

.field private mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

.field private mCarModeBarHorizontalPosition:I

.field private mCarModeBarPosition:I

.field private mCarModeSize:I

.field private mChangeRatioBarPosition:I

.field private mChangeRatioBarSize:I

.field private mChangedTouchableArea:Z

.field private final mCleanWatchLaunchingFlagRunnable:Ljava/lang/Runnable;

.field mCombinationKeyManager:Lcom/android/server/policy/CombinationKeyManager;

.field mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

.field mContext:Landroid/content/Context;

.field private mContextLoggingThread:Ljava/lang/Thread;

.field mConventionalModeMargin:I

.field mConventionalModeMarginForGameApp:I

.field mConventionalRatioWindow:Landroid/view/WindowManagerPolicy$WindowState;

.field mCoverCloseRotation:I

.field mCoverManager:Lcom/samsung/android/cover/ICoverManager;

.field mCoverNoteEnabled:Z

.field mCoverState:Lcom/samsung/android/cover/CoverState;

.field mCurrentAspect:F

.field final mDcmAppPkg:Ljava/lang/String;

.field mDefaultMaxAspect:F

.field private mDeskTopUiMode:I

.field mDesktopModeManager:Lcom/samsung/android/desktopmode/SemDesktopModeManager;

.field mDirectAccessBehavior:I

.field private mDisplayEnabled:Z

.field mDoubleTapEnabled:Z

.field mDoubleTapLaunchBehavior:I

.field mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

.field mDoubleTapLaunchUser:I

.field private mEDM:Lcom/samsung/android/knox/EnterpriseDeviceManager;

.field private mEasyOneHandEnabled:I

.field private mEasyOneHandRunning:I

.field private mEasyOneHandTriggerType:I

.field private mEdgeInternal:Lcom/samsung/android/edge/EdgeManagerInternal;

.field volatile mEndCallKeyPressCounter:I

.field private final mEndCallLongPress:Ljava/lang/Runnable;

.field mFakeFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

.field mFifthTapLaunchCommandIntent:Landroid/content/Intent;

.field mFingerPrintIntent:Landroid/content/Intent;

.field mFingerPrintPending:Z

.field private final mFingerPrintTimeoutRunnable:Ljava/lang/Runnable;

.field mFlashAnnotateServiceComponent:Landroid/content/ComponentName;

.field mFlipFolderOpenedIntent:Landroid/content/Intent;

.field private mFolderCloseSound:Ljava/lang/String;

.field private mFolderOpenSound:Ljava/lang/String;

.field private mFolderSoundEnable:Z

.field mForceEnabledSystemUiFlags:I

.field private mForceImmersiveModeObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$ForceImmersiveModeObserver;

.field mForceStatusBarFromSViewCover:Z

.field mForceUserActivityTimeoutWin:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Landroid/view/WindowManagerPolicy$WindowState;",
            ">;"
        }
    .end annotation
.end field

.field private mGameManagerService:Lcom/samsung/android/game/IGameManagerService;

.field mGameToolOverlayWindow:Landroid/view/WindowManagerPolicy$WindowState;

.field mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

.field mHandler:Landroid/os/Handler;

.field mHasDaynotePackage:Z

.field private mHasFakeMenuKeyBack:Z

.field private mHasFakeMenuKeyRecent:Z

.field mHasFlashAnnotateComponent:Z

.field mHideLockScreenByCover:Z

.field mHideSViewCover:I

.field mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

.field private mHomeBooster:Lcom/samsung/android/os/SemDvfsManager;

.field private mInputMethod:Landroid/view/WindowManagerPolicy$WindowState;

.field private mInputMethodDlg:Landroid/view/WindowManagerPolicy$WindowState;

.field mIsBixbyConsumed:Z

.field mIsCheckDrivingMode:Z

.field private mIsDesktopMode:Z

.field mIsDockHomeEnabled:Z

.field mIsDoublePressedUserKey:Z

.field mIsEasyModeEnabled:Z

.field mIsEnabledAccessControl:Z

.field private mIsGearVrDocked:Z

.field private mIsLowBattery:Z

.field mIsPackageEnabledForUserKey:Z

.field private mIsQDSetting:Z

.field private mIsRinging:Z

.field private mIsRingingOrOffhook:Z

.field mIsSafetyAssuranceEnabled:Z

.field mIsSupportFlipCover:Z

.field mIsSupportSViewCover:Z

.field mIsTorchSetForUserKey:Z

.field mIsUseAccessControl:Z

.field private mIsWakekey:Z

.field private mIsWakeupPrevention:Z

.field private mKeyEventInjectionThread:Ljava/lang/Thread;

.field mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

.field private mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

.field mLastClearCoverState:Z

.field mLastCoverAppCovered:Z

.field private mLastNavigationBarIconColor:I

.field mLastRequiredFreezeRotation:Ljava/lang/String;

.field mLauncherClassName:Ljava/lang/String;

.field mLauncherPackageName:Ljava/lang/String;

.field final mLock:Ljava/lang/Object;

.field mLockPatternUtils:Lcom/android/internal/widget/LockPatternUtils;

.field private mLockTaskModeState:I

.field mLowPowerMode:Z

.field private mMenuConsumed:Z

.field private mMobileKeyboardAlertToast:Landroid/widget/Toast;

.field public mMobileKeyboardEnabled:Z

.field private mMobileKeyboardHeight:I

.field private mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

.field private mMultiWindowManagerInternal:Lcom/android/server/wm/IMultiWindowManagerInternalBridge;

.field mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

.field private mNaviBarHideSetting:Z

.field private mNaviBarLockedOnGameMode:Z

.field private mNavigationBarCustomHeight:I

.field private mNavigationBarHeight:I

.field private mNavigationBarKeyOrder:I

.field private mNeedTriggerQD:Z

.field mNetworkSelectionLongPress:Z

.field mOriginalDockBottom:I

.field mOriginalDockLeft:I

.field mOriginalDockRight:I

.field mOriginalDockTop:I

.field mOriginalStableBottom:I

.field mOriginalStableFullscreenBottom:I

.field mOriginalStableFullscreenLeft:I

.field mOriginalStableFullscreenRight:I

.field mOriginalStableFullscreenTop:I

.field mOriginalStableLeft:I

.field mOriginalStableRight:I

.field mOriginalStableTop:I

.field mOriginalSystemBottom:I

.field mOriginalSystemLeft:I

.field mOriginalSystemRight:I

.field mOriginalSystemTop:I

.field mOriginalUnrestrictedScreenHeight:I

.field mOriginalUnrestrictedScreenLeft:I

.field mOriginalUnrestrictedScreenTop:I

.field mOriginalUnrestrictedScreenWidth:I

.field mOutdoorModeSetting:Z

.field private mOverrapedFreeformWithNaviBar:Z

.field mPWM:Lcom/android/server/policy/PhoneWindowManager;

.field mPackageAddOrRemoveReceiver:Landroid/content/BroadcastReceiver;

.field mPackageChangeReceiver:Landroid/content/BroadcastReceiver;

.field mPenDetachSoundId:I

.field mPenInsertSoundId:I

.field mPenInsertedIntent:Landroid/content/Intent;

.field mPenInsertedIntentUserSwitch:Landroid/content/Intent;

.field mPenNotifyVibrationChecked:Z

.field mPenSoundStreamId:I

.field mPenSounds:Landroid/media/SoundPool;

.field mPenState:I

.field mPerformEditAfterScreenCapture:Z

.field private mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

.field private mPhoneService:Lcom/android/internal/telephony/ITelephony;

.field private mPhoneStateListener:Landroid/telephony/PhoneStateListener;

.field private mPolicyUpdateReceiver:Landroid/content/BroadcastReceiver;

.field mPowerDoubleBehavior:Z

.field mPowerManager:Landroid/os/PowerManager;

.field mPowerManagerInternal:Landroid/os/PowerManagerInternal;

.field private mPowerSave:Z

.field mPowerSaveChangeReceiver:Landroid/content/BroadcastReceiver;

.field mPremiumWatchReceiver:Landroid/content/BroadcastReceiver;

.field private mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

.field private mProKioskReEnableVolumeUpKey:Z

.field private mRecentConsumed:Z

.field mReconfigureDebugReceiver:Landroid/content/BroadcastReceiver;

.field private final mRotationForQuickAccess:Ljava/lang/Runnable;

.field mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

.field private mSFinderLaunchPolicy:Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;

.field mSViewCoverDockBottom:I

.field mSViewCoverDockLeft:I

.field mSViewCoverDockRight:I

.field mSViewCoverDockTop:I

.field mSViewCoverStableBottom:I

.field mSViewCoverStableFullscreenBottom:I

.field mSViewCoverStableFullscreenLeft:I

.field mSViewCoverStableFullscreenRight:I

.field mSViewCoverStableFullscreenTop:I

.field mSViewCoverStableLeft:I

.field mSViewCoverStableRight:I

.field mSViewCoverStableTop:I

.field mSViewCoverSystemBottom:I

.field mSViewCoverSystemLeft:I

.field mSViewCoverSystemRight:I

.field mSViewCoverSystemTop:I

.field mSViewCoverUnrestrictedScreenHeight:I

.field mSViewCoverUnrestrictedScreenLeft:I

.field mSViewCoverUnrestrictedScreenTop:I

.field mSViewCoverUnrestrictedScreenWidth:I

.field private mSafeModeReason:Ljava/lang/String;

.field mSamsungWindowManager:Lcom/android/server/wm/IWindowManagerServiceBridge;

.field final mScreenshotLock:Ljava/lang/Object;

.field mSecondLcdLastRotation:I

.field mSecondLcdUserRotationMode:I

.field final mServiceAquireLock:Ljava/lang/Object;

.field mServiceConnectionMap:Ljava/util/Map;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/Map",
            "<",
            "Landroid/content/ServiceConnection;",
            "Lcom/android/server/policy/SamsungPhoneWindowManager$ScreenshotRunnable;",
            ">;"
        }
    .end annotation
.end field

.field mSettingsObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$SettingsObserver;

.field private mShowImmersiveIcon:Z

.field mShowingSViewCover:Z

.field mSideSyncSourcePresentationActived:Z

.field private mSleepReason:I

.field mStartFromZeroPage:Z

.field private mSupportedCPUFreqTable:[I

.field private mSweepDirection:I

.field mSweepReceiver:Landroid/content/BroadcastReceiver;

.field mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

.field mTaskBarHeightInDesktopMode:I

.field mTelephonyManager:Landroid/telephony/TelephonyManager;

.field private final mTorchCallback:Landroid/hardware/camera2/CameraManager$TorchCallback;

.field mTorchlightEnabled:Z

.field mTorchlightOn:Z

.field mTorchlightWakeLock:Landroid/os/PowerManager$WakeLock;

.field private final mTurnOffTorchlight:Ljava/lang/Runnable;

.field mUnsettingSystemUiFlags:I

.field private mUserKeyLongPressed:Z

.field mUserSwitchReceiver:Landroid/content/BroadcastReceiver;

.field mVibrator:Landroid/os/Vibrator;

.field mVoiceCommandIntent:Landroid/content/Intent;

.field mVoiceWakeUpWakeLock:Landroid/os/PowerManager$WakeLock;

.field private final mVolumeDownLongPress:Ljava/lang/Runnable;

.field private final mVolumeUpLongPress:Ljava/lang/Runnable;

.field mWakeSPenSetting:Z

.field private mWakeupPreventionObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$WakeupPreventionObserver;

.field private mWakeupPreventionPackages:Ljava/util/HashSet;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/HashSet",
            "<",
            "Ljava/lang/String;",
            ">;"
        }
    .end annotation
.end field

.field public mWatchLaunching:Z

.field mWindowManager:Landroid/view/IWindowManager;

.field mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

.field mZeroPageClassName:Ljava/lang/String;

.field mZeroPageDefaultHome:Z

.field mZeroPageHomeIntent:Landroid/content/Intent;

.field mZeroPageModel:Z

.field mZeroPagePackageName:Ljava/lang/String;


# direct methods
.method static synthetic -get0(Lcom/android/server/policy/SamsungPhoneWindowManager;)Landroid/net/Uri;
    .locals 1

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ZEROPAGE_URI:Landroid/net/Uri;

    return-object v0
.end method

.method static synthetic -get1(Lcom/android/server/policy/SamsungPhoneWindowManager;)J
    .locals 2

    iget-wide v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyCurTime:J

    return-wide v0
.end method

.method static synthetic -get10(Lcom/android/server/policy/SamsungPhoneWindowManager;)Landroid/widget/Toast;
    .locals 1

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardAlertToast:Landroid/widget/Toast;

    return-object v0
.end method

.method static synthetic -get11(Lcom/android/server/policy/SamsungPhoneWindowManager;)I
    .locals 1

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    return v0
.end method

.method static synthetic -get12()Lcom/samsung/android/os/SemDvfsManager;
    .locals 1

    sget-object v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationBooster:Lcom/samsung/android/os/SemDvfsManager;

    return-object v0
.end method

.method static synthetic -get13(Lcom/android/server/policy/SamsungPhoneWindowManager;)I
    .locals 1

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSweepDirection:I

    return v0
.end method

.method static synthetic -get14()Lcom/samsung/android/os/SemDvfsManager;
    .locals 1

    sget-object v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeUpBooster:Lcom/samsung/android/os/SemDvfsManager;

    return-object v0
.end method

.method static synthetic -get2(Lcom/android/server/policy/SamsungPhoneWindowManager;)Ljava/lang/String;
    .locals 1

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    return-object v0
.end method

.method static synthetic -get3()Ljava/lang/String;
    .locals 1

    sget-object v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    return-object v0
.end method

.method static synthetic -get4(Lcom/android/server/policy/SamsungPhoneWindowManager;)I
    .locals 1

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCapturedDisplay:I

    return v0
.end method

.method static synthetic -get5(Lcom/android/server/policy/SamsungPhoneWindowManager;)I
    .locals 1

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCapturedOrigin:I

    return v0
.end method

.method static synthetic -get6(Lcom/android/server/policy/SamsungPhoneWindowManager;)I
    .locals 1

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    return v0
.end method

.method static synthetic -get7(Lcom/android/server/policy/SamsungPhoneWindowManager;)I
    .locals 1

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandTriggerType:I

    return v0
.end method

.method static synthetic -get8(Lcom/android/server/policy/SamsungPhoneWindowManager;)Z
    .locals 1

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsRingingOrOffhook:Z

    return v0
.end method

.method static synthetic -get9(Lcom/android/server/policy/SamsungPhoneWindowManager;)I
    .locals 1

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastNavigationBarIconColor:I

    return v0
.end method

.method static synthetic -set0(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)Z
    .locals 0

    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->bIsTorchOn:Z

    return p1
.end method

.method static synthetic -set1(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)Z
    .locals 0

    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyTriggered:Z

    return p1
.end method

.method static synthetic -set10(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)Z
    .locals 0

    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsRingingOrOffhook:Z

    return p1
.end method

.method static synthetic -set11(Lcom/android/server/policy/SamsungPhoneWindowManager;Landroid/widget/Toast;)Landroid/widget/Toast;
    .locals 0

    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardAlertToast:Landroid/widget/Toast;

    return-object p1
.end method

.method static synthetic -set12(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)Z
    .locals 0

    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarHideSetting:Z

    return p1
.end method

.method static synthetic -set13(Lcom/android/server/policy/SamsungPhoneWindowManager;I)I
    .locals 0

    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSweepDirection:I

    return p1
.end method

.method static synthetic -set2(Lcom/android/server/policy/SamsungPhoneWindowManager;Ljava/util/Map;)Ljava/util/Map;
    .locals 0

    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeys:Ljava/util/Map;

    return-object p1
.end method

.method static synthetic -set3(Lcom/android/server/policy/SamsungPhoneWindowManager;I)I
    .locals 0

    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCapturedDisplay:I

    return p1
.end method

.method static synthetic -set4(Lcom/android/server/policy/SamsungPhoneWindowManager;I)I
    .locals 0

    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCapturedOrigin:I

    return p1
.end method

.method static synthetic -set5(Lcom/android/server/policy/SamsungPhoneWindowManager;I)I
    .locals 0

    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    return p1
.end method

.method static synthetic -set6(Lcom/android/server/policy/SamsungPhoneWindowManager;I)I
    .locals 0

    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandTriggerType:I

    return p1
.end method

.method static synthetic -set7(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)Z
    .locals 0

    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsGearVrDocked:Z

    return p1
.end method

.method static synthetic -set8(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)Z
    .locals 0

    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsLowBattery:Z

    return p1
.end method

.method static synthetic -set9(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)Z
    .locals 0

    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsRinging:Z

    return p1
.end method

.method static synthetic -wrap0(Lcom/android/server/policy/SamsungPhoneWindowManager;)Z
    .locals 1

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleTorchKeyForUserKey()Z

    move-result v0

    return v0
.end method

.method static synthetic -wrap1(Lcom/android/server/policy/SamsungPhoneWindowManager;)Z
    .locals 1

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSpenInboxModel()Z

    move-result v0

    return v0
.end method

.method static synthetic -wrap10(Lcom/android/server/policy/SamsungPhoneWindowManager;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updatePowerSave()V

    return-void
.end method

.method static synthetic -wrap2(Lcom/android/server/policy/SamsungPhoneWindowManager;)Z
    .locals 1

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isUsingSound()Z

    move-result v0

    return v0
.end method

.method static synthetic -wrap3(Lcom/android/server/policy/SamsungPhoneWindowManager;I)V
    .locals 0
    .param p1, "torchTime"    # I

    .prologue
    invoke-direct {p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->TorchModeFlashSet(I)V

    return-void
.end method

.method static synthetic -wrap4(Lcom/android/server/policy/SamsungPhoneWindowManager;JZI)V
    .locals 1
    .param p1, "eventTime"    # J
    .param p3, "interactive"    # Z
    .param p4, "count"    # I

    .prologue
    invoke-direct {p0, p1, p2, p3, p4}, Lcom/android/server/policy/SamsungPhoneWindowManager;->endCallPress(JZI)V

    return-void
.end method

.method static synthetic -wrap5(Lcom/android/server/policy/SamsungPhoneWindowManager;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->finishEndCallKeyPress()V

    return-void
.end method

.method static synthetic -wrap6(Lcom/android/server/policy/SamsungPhoneWindowManager;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getZeroPageSetting()V

    return-void
.end method

.method static synthetic -wrap7(Lcom/android/server/policy/SamsungPhoneWindowManager;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleTorchKey()V

    return-void
.end method

.method static synthetic -wrap8(Lcom/android/server/policy/SamsungPhoneWindowManager;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->initCameraManager()V

    return-void
.end method

.method static synthetic -wrap9(Lcom/android/server/policy/SamsungPhoneWindowManager;Z)V
    .locals 0
    .param p1, "powerSave"    # Z

    .prologue
    invoke-direct {p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->setPowerSave(Z)V

    return-void
.end method

.method static constructor <clinit>()V
    .locals 4

    .prologue
    const/4 v3, 0x0

    const/4 v2, 0x0

    .line 278
    invoke-static {}, Landroid/os/Debug;->semIsProductDev()Z

    move-result v0

    sput-boolean v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    .line 405
    sput-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsTablet:Z

    .line 407
    const-string v0, "ro.build.characteristics"

    const-string v1, "phone"

    invoke-static {v0, v1}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    const-string v1, "tablet"

    invoke-virtual {v0, v1}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v0

    sput-boolean v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsTablet:Z

    .line 409
    const-string v0, "ro.product.name"

    const-string v1, "Unknown"

    invoke-static {v0, v1}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mModelName:Ljava/lang/String;

    .line 410
    invoke-static {}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isJapanModel()Z

    move-result v0

    sput-boolean v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsJapanModel:Z

    .line 518
    sput-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    .line 534
    new-instance v0, Landroid/graphics/Rect;

    invoke-direct {v0}, Landroid/graphics/Rect;-><init>()V

    sput-object v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    .line 4254
    sput v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentUser:I

    .line 4911
    sput-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationBooster:Lcom/samsung/android/os/SemDvfsManager;

    .line 4949
    sput-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeUpBooster:Lcom/samsung/android/os/SemDvfsManager;

    .line 275
    return-void
.end method

.method public constructor <init>()V
    .locals 6

    .prologue
    const/4 v1, 0x2

    const/4 v5, 0x1

    const/4 v4, -0x1

    const/4 v3, 0x0

    const/4 v2, 0x0

    .line 275
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    .line 292
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangeRatioBarPosition:I

    .line 293
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangeRatioBarSize:I

    .line 315
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$SamsungPolicyHandler;

    invoke-direct {v0, p0, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager$SamsungPolicyHandler;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;Lcom/android/server/policy/SamsungPhoneWindowManager$SamsungPolicyHandler;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    .line 316
    new-instance v0, Ljava/lang/Object;

    invoke-direct {v0}, Ljava/lang/Object;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    .line 317
    new-instance v0, Ljava/lang/Object;

    invoke-direct {v0}, Ljava/lang/Object;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mServiceAquireLock:Ljava/lang/Object;

    .line 325
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

    .line 333
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBootCompleted:Z

    .line 334
    iput v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenState:I

    .line 337
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    .line 338
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchUser:I

    .line 339
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableDoublTapLaunchCommand:Z

    .line 340
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableVoiceCommand:Z

    .line 343
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDirectAccessBehavior:I

    .line 346
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerDoubleBehavior:Z

    .line 350
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableOneTouchReport:Z

    .line 364
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSweepDirection:I

    .line 370
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCapturedDisplay:I

    .line 377
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCapturedOrigin:I

    .line 382
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPerformEditAfterScreenCapture:Z

    .line 383
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFlashAnnotateComponent:Z

    .line 387
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSafetyAssuranceEnabled:Z

    .line 391
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsUseAccessControl:Z

    .line 392
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    .line 396
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEasyModeEnabled:Z

    .line 400
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasDaynotePackage:Z

    .line 404
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDockHomeEnabled:Z

    .line 414
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsCheckDrivingMode:Z

    .line 415
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockKeyForDrivingMode:Z

    .line 419
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSideSyncSourcePresentationActived:Z

    .line 423
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenNotifyVibrationChecked:Z

    .line 427
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverNoteEnabled:Z

    .line 431
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNetworkSelectionLongPress:Z

    .line 436
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightOn:Z

    .line 437
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightEnabled:Z

    .line 458
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsRingingOrOffhook:Z

    .line 462
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsRinging:Z

    .line 466
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderSoundEnable:Z

    .line 467
    const-string v0, "UNKNOWN"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderOpenSound:Ljava/lang/String;

    .line 468
    const-string v0, "UNKNOWN"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderCloseSound:Ljava/lang/String;

    .line 472
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyRecent:Z

    .line 473
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyBack:Z

    .line 475
    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_STATUS:I

    .line 476
    iput v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_CAMERA:I

    .line 477
    const/4 v0, 0x4

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_SAMSUNGPAY:I

    .line 478
    const/4 v0, 0x5

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_FORCE_PRESS:I

    .line 479
    const/4 v0, 0x6

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_FORCE_RELEASE:I

    .line 481
    const/4 v0, 0x7

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_SUBSCREEN_WAKEUP:I

    .line 485
    const/16 v0, 0x8

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_CHANGE_AOD_MODE:I

    .line 486
    const/16 v0, 0x9

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_AOD_PRESS:I

    .line 487
    const/16 v0, 0xa

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_AOD_LONGPROESS:I

    .line 488
    const/16 v0, 0xb

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_AOD_DOUBLETAB:I

    .line 489
    const/16 v0, 0xc

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_FORCE_PRESS_SLEEP:I

    .line 490
    const/16 v0, 0xd

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_FORCE_RELEASE_SLEEP:I

    .line 491
    const/16 v0, 0xe

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->QUICKACCESS_FORCE_RELEASE_SLEEP2:I

    .line 500
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOverrapedFreeformWithNaviBar:Z

    .line 507
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakeupPrevention:Z

    .line 508
    new-instance v0, Ljava/util/HashSet;

    invoke-direct {v0}, Ljava/util/HashSet;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeupPreventionPackages:Ljava/util/HashSet;

    .line 511
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLowPowerMode:Z

    .line 520
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->bIsTorchOn:Z

    .line 525
    const-string v0, "com.nttdocomo.android.mascot"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDcmAppPkg:Ljava/lang/String;

    .line 528
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdUserRotationMode:I

    .line 529
    iput v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdLastRotation:I

    .line 539
    iput v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    .line 540
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarHorizontalPosition:I

    .line 549
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNeedTriggerQD:Z

    .line 550
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsQDSetting:Z

    .line 551
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakekey:Z

    .line 555
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWatchLaunching:Z

    .line 580
    const-string v0, "com.samsung.ssrm.RESOLUTION_CHANGED"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ACTION_RESOLUTION_CHANGED:Ljava/lang/String;

    .line 583
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceStatusBarFromSViewCover:Z

    .line 584
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowingSViewCover:Z

    .line 585
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    .line 586
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    .line 588
    new-instance v0, Ljava/util/HashSet;

    invoke-direct {v0}, Ljava/util/HashSet;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsToBeHiddenBySViewCover:Ljava/util/HashSet;

    .line 591
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportFlipCover:Z

    .line 592
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    .line 597
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEdgeInternal:Lcom/samsung/android/edge/EdgeManagerInternal;

    .line 599
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideLockScreenByCover:Z

    .line 630
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastCoverAppCovered:Z

    .line 631
    iput-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastClearCoverState:Z

    .line 638
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    .line 641
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsLowBattery:Z

    .line 643
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastNavigationBarIconColor:I

    .line 644
    iput v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarCustomHeight:I

    .line 646
    iput v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSleepReason:I

    .line 653
    new-instance v0, Ljava/util/ArrayList;

    invoke-direct {v0}, Ljava/util/ArrayList;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsShowWhenLocked:Ljava/util/ArrayList;

    .line 660
    new-instance v0, Ljava/util/ArrayList;

    invoke-direct {v0}, Ljava/util/ArrayList;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceUserActivityTimeoutWin:Ljava/util/ArrayList;

    .line 677
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    .line 678
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyComponent:Landroid/content/ComponentName;

    .line 679
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsBixbyConsumed:Z

    .line 680
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyToast:Landroid/widget/Toast;

    .line 689
    const-string v0, "com.sec.android.app.launcher.zeropage"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ZEROPAGE_AUTHORITY:Ljava/lang/String;

    .line 690
    const-string v0, "content://com.sec.android.app.launcher.zeropage"

    invoke-static {v0}, Landroid/net/Uri;->parse(Ljava/lang/String;)Landroid/net/Uri;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ZEROPAGE_URI:Landroid/net/Uri;

    .line 692
    const-string v0, "start_from_zeropage"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->START_FROM_ZEROPAGE:Ljava/lang/String;

    .line 693
    const-string v0, "zeropage_default_home"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ZEROPAGE_DEFAULT_HOME:Ljava/lang/String;

    .line 694
    const-string v0, "zeropage_package_name"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ZEROPAGE_PACKAGE_NAME:Ljava/lang/String;

    .line 695
    const-string v0, "zeropage_class_name"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ZEROPAGE_CLASS_NAME:Ljava/lang/String;

    .line 696
    const-string v0, "launcher_package_name"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->LAUNCHER_PACKAGE_NAME:Ljava/lang/String;

    .line 697
    const-string v0, "launcher_class_name"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->LAUNCHER_CLASS_NAME:Ljava/lang/String;

    .line 698
    const-string v0, "get_zeropage_setting"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->GET_ZEROPAGE_SETTING:Ljava/lang/String;

    .line 700
    new-instance v0, Landroid/content/Intent;

    invoke-direct {v0}, Landroid/content/Intent;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageHomeIntent:Landroid/content/Intent;

    .line 706
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyTriggered:Z

    .line 707
    const-wide/16 v0, 0x0

    iput-wide v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyCurTime:J

    .line 710
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDisplayEnabled:Z

    .line 711
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDoublePressedUserKey:Z

    .line 712
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsPackageEnabledForUserKey:Z

    .line 713
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsTorchSetForUserKey:Z

    .line 715
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$1;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$1;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyPress:Ljava/lang/Runnable;

    .line 732
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$2;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$2;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBatteryChangeReceiver:Landroid/content/BroadcastReceiver;

    .line 755
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsGearVrDocked:Z

    .line 774
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$3;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$3;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSweepReceiver:Landroid/content/BroadcastReceiver;

    .line 829
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$4;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$4;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCaptureReceiver:Landroid/content/BroadcastReceiver;

    .line 854
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$5;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$5;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBootCompleteReceiver:Landroid/content/BroadcastReceiver;

    .line 870
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$6;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$6;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPackageChangeReceiver:Landroid/content/BroadcastReceiver;

    .line 881
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$7;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$7;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPackageAddOrRemoveReceiver:Landroid/content/BroadcastReceiver;

    .line 890
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$8;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$8;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserSwitchReceiver:Landroid/content/BroadcastReceiver;

    .line 919
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$9;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$9;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerSaveChangeReceiver:Landroid/content/BroadcastReceiver;

    .line 944
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$10;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$10;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeysReceiver:Landroid/content/BroadcastReceiver;

    .line 961
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEDM:Lcom/samsung/android/knox/EnterpriseDeviceManager;

    .line 972
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDesktopModeManager:Lcom/samsung/android/desktopmode/SemDesktopModeManager;

    .line 3499
    iput-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapEnabled:Z

    .line 3860
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMenuConsumed:Z

    .line 3884
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRecentConsumed:Z

    .line 3997
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyConsumed:Z

    .line 4008
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserKeyLongPressed:Z

    .line 4018
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyEventInjectionThread:Ljava/lang/Thread;

    .line 4036
    new-instance v0, Ljava/lang/Object;

    invoke-direct {v0}, Ljava/lang/Object;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mScreenshotLock:Ljava/lang/Object;

    .line 4037
    new-instance v0, Ljava/util/HashMap;

    invoke-direct {v0}, Ljava/util/HashMap;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mServiceConnectionMap:Ljava/util/Map;

    .line 4038
    const/4 v0, 0x3

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->MAX_SCREENSHOT_CONNECTION:I

    .line 4253
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeys:Ljava/util/Map;

    .line 4258
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    .line 4259
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    .line 4260
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskReEnableVolumeUpKey:Z

    .line 4939
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastRequiredFreezeRotation:Ljava/lang/String;

    .line 4970
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHomeBooster:Lcom/samsung/android/os/SemDvfsManager;

    .line 5159
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$11;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$11;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintTimeoutRunnable:Ljava/lang/Runnable;

    .line 5190
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$12;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$12;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeDownLongPress:Ljava/lang/Runnable;

    .line 5198
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$13;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$13;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeUpLongPress:Ljava/lang/Runnable;

    .line 5206
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$14;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$14;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTurnOffTorchlight:Ljava/lang/Runnable;

    .line 5213
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$15;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$15;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationForQuickAccess:Ljava/lang/Runnable;

    .line 5261
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockTaskModeState:I

    .line 5279
    const-string v0, "null"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSafeModeReason:Ljava/lang/String;

    .line 5851
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSFinderLaunchPolicy:Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;

    .line 6286
    iput v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarKeyOrder:I

    .line 6287
    new-instance v0, Landroid/graphics/Rect;

    invoke-direct {v0}, Landroid/graphics/Rect;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    .line 6377
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$16;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$16;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPremiumWatchReceiver:Landroid/content/BroadcastReceiver;

    .line 6404
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$17;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$17;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCleanWatchLaunchingFlagRunnable:Ljava/lang/Runnable;

    .line 6612
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$18;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$18;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    .line 6611
    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchCallback:Landroid/hardware/camera2/CameraManager$TorchCallback;

    .line 6638
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContextLoggingThread:Ljava/lang/Thread;

    .line 6812
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowImmersiveIcon:Z

    .line 6813
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppliedOpenTheme:Z

    .line 8499
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$19;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$19;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPolicyUpdateReceiver:Landroid/content/BroadcastReceiver;

    .line 8511
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$20;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$20;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallLongPress:Ljava/lang/Runnable;

    .line 8560
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$21;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$21;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mReconfigureDebugReceiver:Landroid/content/BroadcastReceiver;

    .line 9016
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangedTouchableArea:Z

    .line 9191
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDesktopMode:Z

    .line 9192
    iput v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDeskTopUiMode:I

    .line 275
    return-void
.end method

.method private TorchModeFlashSet(I)V
    .locals 8
    .param p1, "torchTime"    # I

    .prologue
    const/4 v7, 0x0

    .line 5220
    sget-boolean v4, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v4, :cond_0

    const-string v4, "SamsungPhoneWindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "Torch Time Out ==> "

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v4, v5}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 5221
    :cond_0
    new-instance v1, Ljava/lang/String;

    invoke-direct {v1}, Ljava/lang/String;-><init>()V

    .line 5222
    .local v1, "input":Ljava/lang/String;
    const/4 v2, 0x0

    .line 5224
    .local v2, "out":Ljava/io/FileWriter;
    if-lez p1, :cond_2

    .line 5225
    const/4 v4, 0x1

    iput-boolean v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightOn:Z

    .line 5226
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTurnOffTorchlight:Ljava/lang/Runnable;

    invoke-virtual {v4, v5}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 5227
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTurnOffTorchlight:Ljava/lang/Runnable;

    int-to-long v6, p1

    invoke-virtual {v4, v5, v6, v7}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 5228
    const-string v1, "1"

    .line 5238
    :goto_0
    :try_start_0
    new-instance v3, Ljava/io/FileWriter;

    const-string v4, "/sys/class/camera/flash/rear_flash"

    invoke-direct {v3, v4}, Ljava/io/FileWriter;-><init>(Ljava/lang/String;)V
    :try_end_0
    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_1
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5239
    .end local v2    # "out":Ljava/io/FileWriter;
    .local v3, "out":Ljava/io/FileWriter;
    :try_start_1
    invoke-virtual {v1}, Ljava/lang/String;->length()I

    move-result v4

    const/4 v5, 0x0

    invoke-virtual {v3, v1, v5, v4}, Ljava/io/FileWriter;->write(Ljava/lang/String;II)V
    :try_end_1
    .catch Ljava/io/IOException; {:try_start_1 .. :try_end_1} :catch_4
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    .line 5244
    if-eqz v3, :cond_1

    .line 5246
    :try_start_2
    invoke-virtual {v3}, Ljava/io/FileWriter;->close()V
    :try_end_2
    .catch Ljava/io/IOException; {:try_start_2 .. :try_end_2} :catch_0

    .line 5219
    :cond_1
    :goto_1
    return-void

    .line 5230
    .end local v3    # "out":Ljava/io/FileWriter;
    .restart local v2    # "out":Ljava/io/FileWriter;
    :cond_2
    iput-boolean v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightOn:Z

    .line 5231
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTurnOffTorchlight:Ljava/lang/Runnable;

    invoke-virtual {v4, v5}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 5232
    const-string v1, "0"

    goto :goto_0

    .line 5247
    .end local v2    # "out":Ljava/io/FileWriter;
    .restart local v3    # "out":Ljava/io/FileWriter;
    :catch_0
    move-exception v0

    .local v0, "e":Ljava/io/IOException;
    goto :goto_1

    .line 5240
    .end local v0    # "e":Ljava/io/IOException;
    .end local v3    # "out":Ljava/io/FileWriter;
    .restart local v2    # "out":Ljava/io/FileWriter;
    :catch_1
    move-exception v0

    .line 5241
    .end local v2    # "out":Ljava/io/FileWriter;
    .restart local v0    # "e":Ljava/io/IOException;
    :goto_2
    :try_start_3
    const-string v4, "SamsungPhoneWindowManager"

    const-string v5, "exception occurred. /sys/class/camera/flash/rear_flash"

    invoke-static {v4, v5}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    .line 5244
    if-eqz v2, :cond_3

    .line 5246
    :try_start_4
    invoke-virtual {v2}, Ljava/io/FileWriter;->close()V
    :try_end_4
    .catch Ljava/io/IOException; {:try_start_4 .. :try_end_4} :catch_2

    .line 5242
    :cond_3
    :goto_3
    return-void

    .line 5247
    :catch_2
    move-exception v0

    goto :goto_3

    .line 5243
    .end local v0    # "e":Ljava/io/IOException;
    :catchall_0
    move-exception v4

    .line 5244
    :goto_4
    if-eqz v2, :cond_4

    .line 5246
    :try_start_5
    invoke-virtual {v2}, Ljava/io/FileWriter;->close()V
    :try_end_5
    .catch Ljava/io/IOException; {:try_start_5 .. :try_end_5} :catch_3

    .line 5243
    :cond_4
    :goto_5
    throw v4

    .line 5247
    :catch_3
    move-exception v0

    .restart local v0    # "e":Ljava/io/IOException;
    goto :goto_5

    .line 5243
    .end local v0    # "e":Ljava/io/IOException;
    .restart local v3    # "out":Ljava/io/FileWriter;
    :catchall_1
    move-exception v4

    move-object v2, v3

    .end local v3    # "out":Ljava/io/FileWriter;
    .local v2, "out":Ljava/io/FileWriter;
    goto :goto_4

    .line 5240
    .end local v2    # "out":Ljava/io/FileWriter;
    .restart local v3    # "out":Ljava/io/FileWriter;
    :catch_4
    move-exception v0

    .restart local v0    # "e":Ljava/io/IOException;
    move-object v2, v3

    .end local v3    # "out":Ljava/io/FileWriter;
    .restart local v2    # "out":Ljava/io/FileWriter;
    goto :goto_2
.end method

.method private canBeAppliedAllUnrestrictedScreen(Landroid/view/WindowManager$LayoutParams;I)Z
    .locals 2
    .param p1, "attrs"    # Landroid/view/WindowManager$LayoutParams;
    .param p2, "sysUiFl"    # I

    .prologue
    const/4 v1, 0x0

    .line 7618
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->canHideNavigationBar()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 7619
    and-int/lit16 v0, p2, 0x200

    if-eqz v0, :cond_0

    .line 7620
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    sparse-switch v0, :sswitch_data_0

    .line 7634
    :cond_0
    return v1

    .line 7629
    :sswitch_0
    const/4 v0, 0x1

    return v0

    .line 7620
    nop

    :sswitch_data_0
    .sparse-switch
        0x8b3 -> :sswitch_0
        0x8b4 -> :sswitch_0
        0x8fe -> :sswitch_0
        0x96c -> :sswitch_0
        0x96e -> :sswitch_0
        0x988 -> :sswitch_0
        0x989 -> :sswitch_0
        0x98a -> :sswitch_0
    .end sparse-switch
.end method

.method private canBeAppliedFullStableScreen(Landroid/view/WindowManager$LayoutParams;I)Z
    .locals 2
    .param p1, "attrs"    # Landroid/view/WindowManager$LayoutParams;
    .param p2, "sysUiFl"    # I

    .prologue
    .line 7638
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->canHideNavigationBar()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 7639
    and-int/lit16 v0, p2, 0x100

    or-int/lit16 v0, v0, 0x400

    .line 7640
    const/16 v1, 0x500

    .line 7639
    if-ne v0, v1, :cond_0

    .line 7641
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    packed-switch v0, :pswitch_data_0

    .line 7648
    :cond_0
    const/4 v0, 0x0

    return v0

    .line 7643
    :pswitch_0
    const/4 v0, 0x1

    return v0

    .line 7641
    nop

    :pswitch_data_0
    .packed-switch 0x97e
        :pswitch_0
    .end packed-switch
.end method

.method private canBeAppliedOverscanScreen(Landroid/view/WindowManager$LayoutParams;)Z
    .locals 1
    .param p1, "attrs"    # Landroid/view/WindowManager$LayoutParams;

    .prologue
    .line 7596
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    sparse-switch v0, :sswitch_data_0

    .line 7614
    const/4 v0, 0x0

    return v0

    .line 7610
    :sswitch_0
    const/4 v0, 0x1

    return v0

    .line 7596
    nop

    :sswitch_data_0
    .sparse-switch
        0x8b1 -> :sswitch_0
        0x8b6 -> :sswitch_0
        0x8ca -> :sswitch_0
        0x8ce -> :sswitch_0
        0x8e1 -> :sswitch_0
        0x961 -> :sswitch_0
        0x964 -> :sswitch_0
        0x967 -> :sswitch_0
        0x968 -> :sswitch_0
        0x96a -> :sswitch_0
        0x974 -> :sswitch_0
        0x975 -> :sswitch_0
        0x97f -> :sswitch_0
    .end sparse-switch
.end method

.method private canBeAppliedUnrestrictedScreen(Landroid/view/WindowManager$LayoutParams;)Z
    .locals 1
    .param p1, "attrs"    # Landroid/view/WindowManager$LayoutParams;

    .prologue
    .line 7582
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    sparse-switch v0, :sswitch_data_0

    .line 7592
    const/4 v0, 0x0

    return v0

    .line 7588
    :sswitch_0
    const/4 v0, 0x1

    return v0

    .line 7582
    nop

    :sswitch_data_0
    .sparse-switch
        0x7d9 -> :sswitch_0
        0x831 -> :sswitch_0
        0x8b2 -> :sswitch_0
        0x96b -> :sswitch_0
        0x96f -> :sswitch_0
    .end sparse-switch
.end method

.method private checkBixbyToast()V
    .locals 12

    .prologue
    const/4 v11, 0x0

    .line 9140
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v9}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->getInstance(Landroid/content/Context;)Lcom/samsung/android/emergencymode/SemEmergencyManager;

    move-result-object v0

    .line 9141
    .local v0, "emMgr":Lcom/samsung/android/emergencymode/SemEmergencyManager;
    const/16 v9, 0x600

    invoke-virtual {v0, v9}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->checkModeType(I)Z

    move-result v8

    .line 9142
    .local v8, "isUPSM":Z
    const/16 v9, 0x10

    invoke-virtual {v0, v9}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->checkModeType(I)Z

    move-result v4

    .line 9143
    .local v4, "isEM":Z
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v9

    const-string v10, "kids_home_mode"

    invoke-static {v9, v10, v11}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v9

    const/4 v10, 0x1

    if-ne v9, v10, :cond_0

    const/4 v5, 0x1

    .line 9144
    .local v5, "isKidsMode":Z
    :goto_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeNotSupportBixby()Z

    move-result v1

    .line 9145
    .local v1, "isCarModeNotSupportBixby":Z
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMirrorLinkEnabled()Z

    move-result v7

    .line 9146
    .local v7, "isMirrorLink":Z
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v2

    .line 9147
    .local v2, "isDexMode":Z
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopDockConnected()Z

    move-result v3

    .line 9148
    .local v3, "isDexStation":Z
    invoke-static {}, Landroid/app/ActivityManager;->getCurrentUser()I

    move-result v9

    if-eqz v9, :cond_1

    const/4 v6, 0x1

    .line 9150
    .local v6, "isMUM":Z
    :goto_1
    if-eqz v8, :cond_2

    .line 9151
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x1040953

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    .line 9139
    :goto_2
    return-void

    .line 9143
    .end local v1    # "isCarModeNotSupportBixby":Z
    .end local v2    # "isDexMode":Z
    .end local v3    # "isDexStation":Z
    .end local v5    # "isKidsMode":Z
    .end local v6    # "isMUM":Z
    .end local v7    # "isMirrorLink":Z
    :cond_0
    const/4 v5, 0x0

    .restart local v5    # "isKidsMode":Z
    goto :goto_0

    .line 9148
    .restart local v1    # "isCarModeNotSupportBixby":Z
    .restart local v2    # "isDexMode":Z
    .restart local v3    # "isDexStation":Z
    .restart local v7    # "isMirrorLink":Z
    :cond_1
    const/4 v6, 0x0

    .restart local v6    # "isMUM":Z
    goto :goto_1

    .line 9152
    :cond_2
    if-eqz v4, :cond_3

    .line 9153
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x1040954

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto :goto_2

    .line 9154
    :cond_3
    if-eqz v5, :cond_4

    .line 9155
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x1040955

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto :goto_2

    .line 9156
    :cond_4
    if-eqz v1, :cond_5

    .line 9157
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x1040956

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto :goto_2

    .line 9158
    :cond_5
    if-eqz v7, :cond_6

    .line 9159
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x1040957

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto :goto_2

    .line 9160
    :cond_6
    if-eqz v2, :cond_7

    .line 9161
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x1040958

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto :goto_2

    .line 9162
    :cond_7
    if-eqz v3, :cond_8

    .line 9163
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x1040959

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto/16 :goto_2

    .line 9164
    :cond_8
    if-eqz v6, :cond_9

    .line 9165
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, 0x104095e

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getString(I)Ljava/lang/String;

    move-result-object v9

    new-array v10, v11, [Ljava/lang/Object;

    invoke-static {v9, v10}, Ljava/lang/String;->format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v9

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto/16 :goto_2

    .line 9167
    :cond_9
    const/4 v9, 0x0

    iput-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    goto/16 :goto_2
.end method

.method private checkTriggerQD(Z)Z
    .locals 4
    .param p1, "isDown"    # Z

    .prologue
    const/4 v3, 0x1

    const/4 v2, 0x0

    .line 8386
    if-eqz p1, :cond_0

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsQDSetting:Z

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockPatternUtils:Lcom/android/internal/widget/LockPatternUtils;

    .line 8387
    invoke-static {}, Landroid/os/UserHandle;->myUserId()I

    move-result v1

    .line 8386
    invoke-virtual {v0, v3, v1}, Lcom/android/internal/widget/LockPatternUtils;->getBiometricLockscreen(II)I

    move-result v0

    if-nez v0, :cond_0

    .line 8388
    iput-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNeedTriggerQD:Z

    .line 8393
    :goto_0
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNeedTriggerQD:Z

    return v0

    .line 8390
    :cond_0
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNeedTriggerQD:Z

    goto :goto_0
.end method

.method private endCallPress(JZI)V
    .locals 3
    .param p1, "eventTime"    # J
    .param p3, "interactive"    # Z
    .param p4, "count"    # I

    .prologue
    .line 8486
    const/4 v1, 0x2

    if-ne p4, v1, :cond_1

    .line 8487
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mDoublePressOnPowerBehavior:I

    invoke-virtual {v1, p1, p2, p3, v2}, Lcom/android/server/policy/PhoneWindowManager;->powerMultiPressAction(JZI)V

    .line 8485
    :cond_0
    :goto_0
    return-void

    .line 8488
    :cond_1
    const/4 v1, 0x3

    if-ne p4, v1, :cond_2

    .line 8489
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mTriplePressOnPowerBehavior:I

    invoke-virtual {v1, p1, p2, p3, v2}, Lcom/android/server/policy/PhoneWindowManager;->powerMultiPressAction(JZI)V

    goto :goto_0

    .line 8490
    :cond_2
    if-eqz p3, :cond_0

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBeganFromNonInteractiveEndCall:Z

    if-nez v1, :cond_0

    .line 8491
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    const/4 v2, 0x6

    invoke-virtual {v1, v2}, Lcom/android/server/policy/SystemKeyManager;->isSystemKeyEventRequested(I)Z

    move-result v1

    if-nez v1, :cond_0

    .line 8492
    const-string v1, "security.ode.encrypting"

    invoke-static {v1}, Landroid/os/SystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    .line 8493
    .local v0, "state":Ljava/lang/String;
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isRingingOrOffhook()Z

    move-result v1

    if-nez v1, :cond_0

    const-string v1, "true"

    invoke-virtual {v1, v0}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-nez v1, :cond_0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v1}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 8494
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->launchHomeFromHotKey()V

    goto :goto_0
.end method

.method private finishEndCallKeyPress()V
    .locals 1

    .prologue
    const/4 v0, 0x0

    .line 8481
    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBeganFromNonInteractiveEndCall:Z

    .line 8482
    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallKeyPressCounter:I

    .line 8480
    return-void
.end method

.method private getCameraId()Ljava/lang/String;
    .locals 10
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Landroid/hardware/camera2/CameraAccessException;
        }
    .end annotation

    .prologue
    const/4 v9, 0x0

    .line 6598
    sget-object v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    invoke-virtual {v5}, Landroid/hardware/camera2/CameraManager;->getCameraIdList()[Ljava/lang/String;

    move-result-object v3

    .line 6599
    .local v3, "ids":[Ljava/lang/String;
    const/4 v5, 0x0

    array-length v6, v3

    :goto_0
    if-ge v5, v6, :cond_1

    aget-object v2, v3, v5

    .line 6600
    .local v2, "id":Ljava/lang/String;
    sget-object v7, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    invoke-virtual {v7, v2}, Landroid/hardware/camera2/CameraManager;->getCameraCharacteristics(Ljava/lang/String;)Landroid/hardware/camera2/CameraCharacteristics;

    move-result-object v0

    .line 6601
    .local v0, "c":Landroid/hardware/camera2/CameraCharacteristics;
    sget-object v7, Landroid/hardware/camera2/CameraCharacteristics;->FLASH_INFO_AVAILABLE:Landroid/hardware/camera2/CameraCharacteristics$Key;

    invoke-virtual {v0, v7}, Landroid/hardware/camera2/CameraCharacteristics;->get(Landroid/hardware/camera2/CameraCharacteristics$Key;)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Ljava/lang/Boolean;

    .line 6602
    .local v1, "flashAvailable":Ljava/lang/Boolean;
    sget-object v7, Landroid/hardware/camera2/CameraCharacteristics;->LENS_FACING:Landroid/hardware/camera2/CameraCharacteristics$Key;

    invoke-virtual {v0, v7}, Landroid/hardware/camera2/CameraCharacteristics;->get(Landroid/hardware/camera2/CameraCharacteristics$Key;)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Ljava/lang/Integer;

    .line 6603
    .local v4, "lensFacing":Ljava/lang/Integer;
    if-eqz v1, :cond_0

    invoke-virtual {v1}, Ljava/lang/Boolean;->booleanValue()Z

    move-result v7

    if-eqz v7, :cond_0

    .line 6604
    if-eqz v4, :cond_0

    invoke-virtual {v4}, Ljava/lang/Integer;->intValue()I

    move-result v7

    const/4 v8, 0x1

    if-ne v7, v8, :cond_0

    .line 6605
    return-object v2

    .line 6599
    :cond_0
    add-int/lit8 v5, v5, 0x1

    goto :goto_0

    .line 6608
    .end local v0    # "c":Landroid/hardware/camera2/CameraCharacteristics;
    .end local v1    # "flashAvailable":Ljava/lang/Boolean;
    .end local v2    # "id":Ljava/lang/String;
    .end local v4    # "lensFacing":Ljava/lang/Integer;
    :cond_1
    return-object v9
.end method

.method private getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;
    .locals 2

    .prologue
    .line 963
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEDM:Lcom/samsung/android/knox/EnterpriseDeviceManager;

    if-nez v0, :cond_0

    .line 964
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    .line 965
    const-string v1, "enterprise_policy_new"

    .line 964
    invoke-virtual {v0, v1}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/samsung/android/knox/EnterpriseDeviceManager;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEDM:Lcom/samsung/android/knox/EnterpriseDeviceManager;

    .line 967
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEDM:Lcom/samsung/android/knox/EnterpriseDeviceManager;

    return-object v0
.end method

.method private getLidControlsSleep()Z
    .locals 2

    .prologue
    .line 8271
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMirrorLinkEnabled()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8272
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "isMirrorLinkEnabled : LidControlsSleep is false"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8273
    const/4 v0, 0x0

    return v0

    .line 8276
    :cond_0
    const/4 v0, 0x1

    return v0
.end method

.method private getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;
    .locals 2

    .prologue
    .line 9129
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

    if-nez v0, :cond_0

    .line 9130
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v1, "persona"

    invoke-virtual {v0, v1}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/samsung/android/knox/SemPersonaManager;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

    .line 9131
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

    return-object v0
.end method

.method private getTimeoutTimeOfKeyCombination(I)J
    .locals 2
    .param p1, "flags"    # I

    .prologue
    .line 3491
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCombinationKeyManager:Lcom/android/server/policy/CombinationKeyManager;

    invoke-virtual {v0, p1}, Lcom/android/server/policy/CombinationKeyManager;->getTimeoutTimeOfKeyCombination(I)J

    move-result-wide v0

    return-wide v0
.end method

.method private getZeroPageSetting()V
    .locals 10

    .prologue
    const/4 v9, 0x0

    const/4 v8, 0x0

    .line 1572
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "getZeroPageSetting"

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 1574
    :try_start_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ZEROPAGE_URI:Landroid/net/Uri;

    const-string v5, "get_zeropage_setting"

    const/4 v6, 0x0

    const/4 v7, 0x0

    invoke-virtual {v3, v4, v5, v6, v7}, Landroid/content/ContentResolver;->call(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;

    move-result-object v0

    .line 1575
    .local v0, "bundle":Landroid/os/Bundle;
    if-eqz v0, :cond_1

    .line 1576
    const-string v3, "zeropage_package_name"

    const/4 v4, 0x0

    invoke-virtual {v0, v3, v4}, Landroid/os/Bundle;->getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPagePackageName:Ljava/lang/String;

    .line 1577
    const-string v3, "zeropage_class_name"

    const/4 v4, 0x0

    invoke-virtual {v0, v3, v4}, Landroid/os/Bundle;->getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageClassName:Ljava/lang/String;

    .line 1578
    const-string v3, "launcher_package_name"

    const/4 v4, 0x0

    invoke-virtual {v0, v3, v4}, Landroid/os/Bundle;->getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherPackageName:Ljava/lang/String;

    .line 1579
    const-string v3, "launcher_class_name"

    const/4 v4, 0x0

    invoke-virtual {v0, v3, v4}, Landroid/os/Bundle;->getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherClassName:Ljava/lang/String;

    .line 1580
    const-string v3, "start_from_zeropage"

    invoke-virtual {v0, v3}, Landroid/os/Bundle;->getBoolean(Ljava/lang/String;)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mStartFromZeroPage:Z

    .line 1581
    const-string v3, "zeropage_default_home"

    invoke-virtual {v0, v3}, Landroid/os/Bundle;->getBoolean(Ljava/lang/String;)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageDefaultHome:Z

    .line 1583
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPagePackageName:Ljava/lang/String;

    if-eqz v3, :cond_0

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageClassName:Ljava/lang/String;

    if-eqz v3, :cond_0

    .line 1584
    new-instance v2, Landroid/content/ComponentName;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPagePackageName:Ljava/lang/String;

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageClassName:Ljava/lang/String;

    invoke-direct {v2, v3, v4}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    .line 1585
    .local v2, "newComponentName":Landroid/content/ComponentName;
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageHomeIntent:Landroid/content/Intent;

    invoke-virtual {v3, v2}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 1586
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageHomeIntent:Landroid/content/Intent;

    const v4, 0x14204000

    invoke-virtual {v3, v4}, Landroid/content/Intent;->setFlags(I)Landroid/content/Intent;

    .line 1571
    .end local v0    # "bundle":Landroid/os/Bundle;
    .end local v2    # "newComponentName":Landroid/content/ComponentName;
    :cond_0
    :goto_0
    return-void

    .line 1590
    .restart local v0    # "bundle":Landroid/os/Bundle;
    :cond_1
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherClassName:Ljava/lang/String;

    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherPackageName:Ljava/lang/String;

    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageClassName:Ljava/lang/String;

    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPagePackageName:Ljava/lang/String;

    .line 1591
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageDefaultHome:Z

    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mStartFromZeroPage:Z
    :try_end_0
    .catch Ljava/lang/IllegalArgumentException; {:try_start_0 .. :try_end_0} :catch_0

    goto :goto_0

    .line 1593
    .end local v0    # "bundle":Landroid/os/Bundle;
    :catch_0
    move-exception v1

    .line 1594
    .local v1, "e":Ljava/lang/IllegalArgumentException;
    iput-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherClassName:Ljava/lang/String;

    iput-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherPackageName:Ljava/lang/String;

    iput-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageClassName:Ljava/lang/String;

    iput-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPagePackageName:Ljava/lang/String;

    .line 1595
    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageDefaultHome:Z

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mStartFromZeroPage:Z

    goto :goto_0
.end method

.method private handleTorchKey()V
    .locals 4

    .prologue
    .line 6550
    invoke-static {}, Landroid/os/FactoryTest;->isFactoryMode()Z

    move-result v1

    if-nez v1, :cond_0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v1}, Landroid/os/FactoryTest;->isAutomaticTestMode(Landroid/content/Context;)Z

    move-result v1

    if-nez v1, :cond_0

    invoke-static {}, Landroid/os/FactoryTest;->isRunningFactoryApp()Z

    move-result v1

    if-eqz v1, :cond_1

    .line 6551
    :cond_0
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "No Torch light, becuase Factory mode"

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6552
    return-void

    .line 6554
    :cond_1
    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsLowBattery:Z

    if-eqz v1, :cond_2

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->bIsTorchOn:Z

    if-eqz v1, :cond_6

    .line 6558
    :cond_2
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    if-eqz v1, :cond_3

    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    if-nez v1, :cond_4

    .line 6559
    :cond_3
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->initCameraManager()V

    .line 6563
    :cond_4
    :try_start_0
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Torch light bIsTorchOn = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    iget-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->bIsTorchOn:Z

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string v3, " mCameraId = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    sget-object v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 6564
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    if-eqz v1, :cond_5

    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    if-eqz v1, :cond_5

    .line 6565
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    sget-object v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->bIsTorchOn:Z

    if-eqz v1, :cond_7

    const/4 v1, 0x0

    :goto_0
    invoke-virtual {v2, v3, v1}, Landroid/hardware/camera2/CameraManager;->setTorchMode(Ljava/lang/String;Z)V
    :try_end_0
    .catch Ljava/lang/Throwable; {:try_start_0 .. :try_end_0} :catch_0

    .line 6549
    :cond_5
    :goto_1
    return-void

    .line 6555
    :cond_6
    return-void

    .line 6565
    :cond_7
    const/4 v1, 0x1

    goto :goto_0

    .line 6567
    :catch_0
    move-exception v0

    .line 6568
    .local v0, "e":Ljava/lang/Throwable;
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Couldn\'t initialize: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_1
.end method

.method private handleTorchKeyForUserKey()Z
    .locals 4

    .prologue
    const/4 v3, 0x0

    .line 6514
    const/4 v0, 0x0

    .line 6515
    .local v0, "ret":Z
    const-string v1, "service.camera.running"

    const-string v2, "0"

    invoke-static {v1, v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    const-string v2, "0"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_0

    .line 6516
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v1

    if-eqz v1, :cond_1

    .line 6517
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->checkLaunchSetting()I

    move-result v1

    if-eqz v1, :cond_0

    .line 6518
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleTorchKey()V

    .line 6519
    const/4 v0, 0x1

    .line 6526
    :cond_0
    :goto_0
    iput-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsTorchSetForUserKey:Z

    .line 6527
    return v0

    .line 6522
    :cond_1
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleTorchKey()V

    .line 6523
    const/4 v0, 0x1

    goto :goto_0
.end method

.method private handleUserKey(Z)Z
    .locals 12
    .param p1, "longPress"    # Z

    .prologue
    .line 6432
    const/4 v8, 0x0

    .line 6433
    .local v8, "ret":Z
    const/4 v6, 0x0

    .line 6434
    .local v6, "package_index":I
    const/4 v5, 0x0

    .line 6435
    .local v5, "launch_app":Ljava/lang/String;
    const/4 v7, 0x0

    .line 6436
    .local v7, "package_name":Ljava/lang/String;
    const/4 v1, 0x0

    .line 6438
    .local v1, "activity_name":Ljava/lang/String;
    if-eqz p1, :cond_9

    .line 6439
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportBCM()Z

    move-result v9

    if-eqz v9, :cond_3

    .line 6440
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    invoke-virtual {v9}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->getModeType()I

    move-result v3

    .line 6441
    .local v3, "emMode":I
    sget-boolean v9, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v9, :cond_0

    const-string v9, "SamsungPhoneWindowManager"

    new-instance v10, Ljava/lang/StringBuilder;

    invoke-direct {v10}, Ljava/lang/StringBuilder;-><init>()V

    const-string v11, "now mode = "

    invoke-virtual {v10, v11}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10, v3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v10

    invoke-static {v9, v10}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 6443
    :cond_0
    new-instance v0, Landroid/content/Intent;

    const-string v9, "com.samsung.intent.action.EMERGENCY_START_SERVICE_BY_ORDER"

    invoke-direct {v0, v9}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 6444
    .local v0, "BCM_intent":Landroid/content/Intent;
    const-string v9, "flag"

    const/16 v10, 0x800

    invoke-virtual {v0, v9, v10}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 6445
    const/high16 v9, 0x10000000

    invoke-virtual {v0, v9}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 6447
    const/4 v9, -0x1

    if-ne v3, v9, :cond_2

    .line 6448
    const-string v9, "enabled"

    const/4 v10, 0x1

    invoke-virtual {v0, v9, v10}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 6452
    :cond_1
    :goto_0
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v10, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v9, v0, v10}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 6453
    const/4 v9, 0x1

    return v9

    .line 6449
    :cond_2
    const/4 v9, 0x2

    if-ne v3, v9, :cond_1

    .line 6450
    const-string v9, "enabled"

    const/4 v10, 0x0

    invoke-virtual {v0, v9, v10}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    goto :goto_0

    .line 6455
    .end local v0    # "BCM_intent":Landroid/content/Intent;
    .end local v3    # "emMode":I
    :cond_3
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v9

    const-string v10, "long_press_app"

    invoke-static {v9, v10}, Landroid/provider/Settings$System;->getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v5

    .line 6465
    .local v5, "launch_app":Ljava/lang/String;
    :goto_1
    iget-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDoublePressedUserKey:Z

    if-eqz v9, :cond_4

    .line 6466
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v9

    const-string v10, "double_press_app"

    invoke-static {v9, v10}, Landroid/provider/Settings$System;->getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v5

    .line 6470
    :cond_4
    if-eqz v5, :cond_5

    .line 6471
    const/16 v9, 0x2f

    const/4 v10, 0x0

    :try_start_0
    invoke-virtual {v5, v9, v10}, Ljava/lang/String;->indexOf(II)I

    move-result v6

    .line 6472
    const/4 v9, 0x0

    invoke-virtual {v5, v9, v6}, Ljava/lang/String;->substring(II)Ljava/lang/String;

    move-result-object v7

    .line 6473
    .local v7, "package_name":Ljava/lang/String;
    add-int/lit8 v9, v6, 0x1

    invoke-virtual {v5}, Ljava/lang/String;->length()I

    move-result v10

    invoke-virtual {v5, v9, v10}, Ljava/lang/String;->substring(II)Ljava/lang/String;
    :try_end_0
    .catch Ljava/lang/IndexOutOfBoundsException; {:try_start_0 .. :try_end_0} :catch_0

    move-result-object v1

    .line 6481
    .end local v1    # "activity_name":Ljava/lang/String;
    .end local v7    # "package_name":Ljava/lang/String;
    :cond_5
    :goto_2
    sget-boolean v9, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v9, :cond_6

    const-string v9, "SamsungPhoneWindowManager"

    new-instance v10, Ljava/lang/StringBuilder;

    invoke-direct {v10}, Ljava/lang/StringBuilder;-><init>()V

    const-string v11, "Found pkg="

    invoke-virtual {v10, v11}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    const-string v11, ", cls="

    invoke-virtual {v10, v11}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    const-string v11, " longPress = "

    invoke-virtual {v10, v11}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10, p1}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v10

    invoke-static {v9, v10}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 6483
    :cond_6
    if-eqz v7, :cond_7

    const-string v9, "torch"

    invoke-virtual {v9, v7}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v9

    if-eqz v9, :cond_b

    const-string v9, "torch"

    invoke-virtual {v9, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v9

    if-eqz v9, :cond_b

    .line 6492
    :cond_7
    const/4 v9, 0x0

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsPackageEnabledForUserKey:Z

    .line 6495
    :goto_3
    const-string v9, "torch"

    invoke-virtual {v9, v7}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v9

    if-eqz v9, :cond_f

    const-string v9, "torch"

    invoke-virtual {v9, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v9

    if-eqz v9, :cond_f

    .line 6496
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportActiveDouble()Z

    move-result v9

    if-nez v9, :cond_e

    .line 6497
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleTorchKeyForUserKey()Z

    move-result v8

    .line 6510
    .end local v8    # "ret":Z
    :cond_8
    :goto_4
    return v8

    .line 6458
    .restart local v1    # "activity_name":Ljava/lang/String;
    .local v5, "launch_app":Ljava/lang/String;
    .local v7, "package_name":Ljava/lang/String;
    .restart local v8    # "ret":Z
    :cond_9
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportBCM()Z

    move-result v9

    if-eqz v9, :cond_a

    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    invoke-virtual {v9}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->getModeType()I

    move-result v9

    const/4 v10, 0x2

    if-ne v9, v10, :cond_a

    .line 6459
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v9

    const-string v10, "short_press_app_battery_conserve"

    invoke-static {v9, v10}, Landroid/provider/Settings$System;->getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v5

    .local v5, "launch_app":Ljava/lang/String;
    goto/16 :goto_1

    .line 6461
    .local v5, "launch_app":Ljava/lang/String;
    :cond_a
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v9

    const-string v10, "short_press_app"

    invoke-static {v9, v10}, Landroid/provider/Settings$System;->getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v5

    .local v5, "launch_app":Ljava/lang/String;
    goto/16 :goto_1

    .line 6475
    .end local v7    # "package_name":Ljava/lang/String;
    :catch_0
    move-exception v2

    .line 6476
    .local v2, "e":Ljava/lang/IndexOutOfBoundsException;
    const-string v9, "SamsungPhoneWindowManager"

    const-string v10, "Invalid user key app defined"

    invoke-static {v9, v10}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 6477
    const/4 v7, 0x0

    .line 6478
    .restart local v7    # "package_name":Ljava/lang/String;
    const/4 v1, 0x0

    goto/16 :goto_2

    .line 6484
    .end local v1    # "activity_name":Ljava/lang/String;
    .end local v2    # "e":Ljava/lang/IndexOutOfBoundsException;
    .end local v7    # "package_name":Ljava/lang/String;
    :cond_b
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v9

    invoke-virtual {v9, v7}, Landroid/content/pm/PackageManager;->getApplicationEnabledSetting(Ljava/lang/String;)I

    move-result v4

    .line 6485
    .local v4, "enabled":I
    if-eqz v4, :cond_c

    const/4 v9, 0x1

    if-ne v4, v9, :cond_d

    .line 6486
    :cond_c
    const/4 v9, 0x1

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsPackageEnabledForUserKey:Z

    .line 6490
    :goto_5
    const/4 v9, 0x0

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsTorchSetForUserKey:Z

    goto :goto_3

    .line 6488
    :cond_d
    const/4 v9, 0x0

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsPackageEnabledForUserKey:Z

    goto :goto_5

    .line 6499
    .end local v4    # "enabled":I
    :cond_e
    const/4 v9, 0x1

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsTorchSetForUserKey:Z

    goto :goto_4

    .line 6501
    :cond_f
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportBCM()Z

    move-result v9

    if-nez v9, :cond_8

    .line 6502
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportActiveDouble()Z

    move-result v9

    if-nez v9, :cond_8

    .line 6503
    iget-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyTriggered:Z

    if-nez v9, :cond_8

    .line 6505
    iget-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsPackageEnabledForUserKey:Z

    if-eqz v9, :cond_8

    if-eqz v7, :cond_8

    if-eqz v1, :cond_8

    .line 6506
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v9}, Lcom/android/server/policy/PhoneWindowManager;->dismissKeyguardLw()V

    goto :goto_4
.end method

.method private initCameraManager()V
    .locals 5

    .prologue
    const/4 v4, 0x0

    .line 6575
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    if-nez v2, :cond_0

    .line 6576
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v3, "camera"

    invoke-virtual {v2, v3}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Landroid/hardware/camera2/CameraManager;

    sput-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    .line 6579
    :cond_0
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    if-eqz v2, :cond_2

    .line 6582
    :try_start_0
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getCameraId()Ljava/lang/String;
    :try_end_0
    .catch Ljava/lang/Throwable; {:try_start_0 .. :try_end_0} :catch_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    .line 6586
    .local v0, "cameraId":Ljava/lang/String;
    sput-object v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    .line 6589
    .end local v0    # "cameraId":Ljava/lang/String;
    :goto_0
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    if-eqz v2, :cond_1

    .line 6590
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraManager:Landroid/hardware/camera2/CameraManager;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchCallback:Landroid/hardware/camera2/CameraManager$TorchCallback;

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    invoke-virtual {v2, v3, v4}, Landroid/hardware/camera2/CameraManager;->registerTorchCallback(Landroid/hardware/camera2/CameraManager$TorchCallback;Landroid/os/Handler;)V

    .line 6574
    :cond_1
    :goto_1
    return-void

    .line 6583
    :catch_0
    move-exception v1

    .line 6584
    .local v1, "e":Ljava/lang/Throwable;
    :try_start_1
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Couldn\'t initialize."

    invoke-static {v2, v3, v1}, Landroid/util/Log;->e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 6586
    sput-object v4, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    goto :goto_0

    .line 6585
    .end local v1    # "e":Ljava/lang/Throwable;
    :catchall_0
    move-exception v2

    .line 6586
    sput-object v4, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCameraId:Ljava/lang/String;

    .line 6585
    throw v2

    .line 6593
    :cond_2
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "camera service is not availabled"

    invoke-static {v2, v3}, Landroid/util/Log;->e(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_1
.end method

.method private initHomeBoost()V
    .locals 4

    .prologue
    .line 4974
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v1, "HOME_BOOSTER"

    const/16 v2, 0xc

    invoke-static {v0, v1, v2}, Lcom/samsung/android/os/SemDvfsManager;->createInstance(Landroid/content/Context;Ljava/lang/String;I)Lcom/samsung/android/os/SemDvfsManager;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHomeBooster:Lcom/samsung/android/os/SemDvfsManager;

    .line 4975
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHomeBooster:Lcom/samsung/android/os/SemDvfsManager;

    invoke-virtual {v0}, Lcom/samsung/android/os/SemDvfsManager;->getSupportedFrequency()[I

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSupportedCPUFreqTable:[I

    .line 4976
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSupportedCPUFreqTable:[I

    if-eqz v0, :cond_0

    .line 4977
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHomeBooster:Lcom/samsung/android/os/SemDvfsManager;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHomeBooster:Lcom/samsung/android/os/SemDvfsManager;

    const-wide v2, 0x3fe6666666666666L    # 0.7

    invoke-virtual {v1, v2, v3}, Lcom/samsung/android/os/SemDvfsManager;->getApproximateFrequencyByPercent(D)I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/samsung/android/os/SemDvfsManager;->setDvfsValue(I)V

    .line 4973
    :cond_0
    return-void
.end method

.method private injectionKeyEvent(I)V
    .locals 2
    .param p1, "key"    # I

    .prologue
    .line 4020
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyEventInjectionThread:Ljava/lang/Thread;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyEventInjectionThread:Ljava/lang/Thread;

    invoke-virtual {v0}, Ljava/lang/Thread;->isAlive()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 4021
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyEventInjectionThread:Ljava/lang/Thread;

    invoke-virtual {v0}, Ljava/lang/Thread;->interrupt()V

    .line 4023
    :cond_0
    new-instance v0, Ljava/lang/Thread;

    new-instance v1, Lcom/android/server/policy/SamsungPhoneWindowManager$31;

    invoke-direct {v1, p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager$31;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;I)V

    invoke-direct {v0, v1}, Ljava/lang/Thread;-><init>(Ljava/lang/Runnable;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyEventInjectionThread:Ljava/lang/Thread;

    .line 4032
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyEventInjectionThread:Ljava/lang/Thread;

    invoke-virtual {v0}, Ljava/lang/Thread;->start()V

    .line 4019
    return-void
.end method

.method private isAppInstalled(Ljava/lang/String;)Z
    .locals 4
    .param p1, "packagename"    # Ljava/lang/String;

    .prologue
    const/4 v3, 0x1

    .line 8305
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v1

    .line 8307
    .local v1, "pm":Landroid/content/pm/PackageManager;
    const/4 v2, 0x1

    :try_start_0
    invoke-virtual {v1, p1, v2}, Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    :try_end_0
    .catch Landroid/content/pm/PackageManager$NameNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 8308
    return v3

    .line 8309
    :catch_0
    move-exception v0

    .line 8310
    .local v0, "e":Landroid/content/pm/PackageManager$NameNotFoundException;
    const/4 v2, 0x0

    return v2
.end method

.method private isBackKeyConsumed()Z
    .locals 2

    .prologue
    const/4 v1, 0x0

    .line 3999
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyConsumed:Z

    if-eqz v0, :cond_0

    .line 4000
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyConsumed:Z

    .line 4001
    const/4 v0, 0x1

    return v0

    .line 4003
    :cond_0
    return v1
.end method

.method private isBixbyFullWindowShowing()Z
    .locals 4

    .prologue
    const/4 v3, 0x0

    .line 6782
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v1, :cond_0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 6785
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v0

    .line 6786
    .local v0, "attrs":Landroid/view/WindowManager$LayoutParams;
    iget v1, v0, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v2, 0x40000

    and-int/2addr v1, v2

    if-nez v1, :cond_1

    .line 6787
    const/4 v1, 0x1

    return v1

    .line 6783
    .end local v0    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :cond_0
    return v3

    .line 6789
    .restart local v0    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :cond_1
    return v3
.end method

.method private isBuiltInKeyboardVisible()Z
    .locals 3

    .prologue
    const/4 v0, 0x0

    .line 8267
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mHaveBuiltInKeyboard:Z

    if-eqz v1, :cond_0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mLidKeyboardAccessibility:I

    invoke-virtual {v1, v2}, Lcom/android/server/policy/PhoneWindowManager;->isHidden(I)Z

    move-result v1

    if-eqz v1, :cond_1

    :cond_0
    :goto_0
    return v0

    :cond_1
    const/4 v0, 0x1

    goto :goto_0
.end method

.method private isDefaultLauncher(Ljava/lang/String;)Z
    .locals 9
    .param p1, "packageName"    # Ljava/lang/String;

    .prologue
    const/4 v5, 0x1

    const/4 v6, 0x0

    .line 8722
    new-instance v0, Landroid/content/IntentFilter;

    const-string v4, "android.intent.action.MAIN"

    invoke-direct {v0, v4}, Landroid/content/IntentFilter;-><init>(Ljava/lang/String;)V

    .line 8723
    .local v0, "filter":Landroid/content/IntentFilter;
    const-string v4, "android.intent.category.HOME"

    invoke-virtual {v0, v4}, Landroid/content/IntentFilter;->addCategory(Ljava/lang/String;)V

    .line 8725
    new-instance v1, Ljava/util/ArrayList;

    invoke-direct {v1}, Ljava/util/ArrayList;-><init>()V

    .line 8726
    .local v1, "filters":Ljava/util/List;, "Ljava/util/List<Landroid/content/IntentFilter;>;"
    invoke-interface {v1, v0}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    .line 8728
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    .line 8729
    .local v3, "preferredActivities":Ljava/util/List;, "Ljava/util/List<Landroid/content/ComponentName;>;"
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v4}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v2

    .line 8730
    .local v2, "packageManager":Landroid/content/pm/PackageManager;
    invoke-virtual {v2, v1, v3, p1}, Landroid/content/pm/PackageManager;->getPreferredActivities(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I

    .line 8732
    const-string v7, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v8, "isDefaultLauncher :"

    invoke-virtual {v4, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    if-eqz v3, :cond_1

    invoke-interface {v3}, Ljava/util/List;->size()I

    move-result v4

    if-lez v4, :cond_1

    move v4, v5

    :goto_0
    invoke-virtual {v8, v4}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v7, v4}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 8733
    if-eqz v3, :cond_0

    invoke-interface {v3}, Ljava/util/List;->size()I

    move-result v4

    if-lez v4, :cond_0

    move v6, v5

    :cond_0
    return v6

    :cond_1
    move v4, v6

    .line 8732
    goto :goto_0
.end method

.method private isHardwareKeyAllowed(IZ)Z
    .locals 5
    .param p1, "hwKeyId"    # I
    .param p2, "showMsg"    # Z

    .prologue
    .line 5759
    const/4 v0, 0x1

    .line 5763
    .local v0, "allowed":Z
    :try_start_0
    const-string v3, "kioskmode"

    .line 5762
    invoke-static {v3}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v3

    invoke-static {v3}, Lcom/samsung/android/knox/kiosk/IKioskMode$Stub;->asInterface(Landroid/os/IBinder;)Lcom/samsung/android/knox/kiosk/IKioskMode;

    move-result-object v2

    .line 5764
    .local v2, "kioskService":Lcom/samsung/android/knox/kiosk/IKioskMode;
    if-eqz v2, :cond_0

    .line 5765
    const/4 v3, 0x0

    invoke-interface {v2, v3, p1, p2}, Lcom/samsung/android/knox/kiosk/IKioskMode;->isHardwareKeyAllowed(Lcom/samsung/android/knox/ContextInfo;IZ)Z
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    move-result v0

    .line 5771
    .end local v0    # "allowed":Z
    .end local v2    # "kioskService":Lcom/samsung/android/knox/kiosk/IKioskMode;
    :cond_0
    :goto_0
    return v0

    .line 5767
    .restart local v0    # "allowed":Z
    :catch_0
    move-exception v1

    .line 5768
    .local v1, "e":Landroid/os/RemoteException;
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "Exception while getting kiosk mode service"

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method private static isJapanModel()Z
    .locals 3

    .prologue
    .line 1959
    const-string v1, ""

    .line 1961
    .local v1, "salesCode":Ljava/lang/String;
    :try_start_0
    const-string v2, "ril.sales_code"

    invoke-static {v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    .line 1963
    invoke-static {v1}, Landroid/text/TextUtils;->isEmpty(Ljava/lang/CharSequence;)Z

    move-result v2

    if-eqz v2, :cond_0

    .line 1964
    const-string v2, "ro.csc.sales_code"

    invoke-static {v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    move-result-object v1

    .line 1968
    :cond_0
    :goto_0
    const-string v2, "DCM"

    invoke-virtual {v2, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    if-nez v2, :cond_1

    const-string v2, "KDI"

    invoke-virtual {v2, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    if-nez v2, :cond_1

    const-string v2, "XJP"

    invoke-virtual {v2, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    if-nez v2, :cond_1

    const-string v2, "SBM"

    invoke-virtual {v2, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    :goto_1
    return v2

    :cond_1
    const/4 v2, 0x1

    goto :goto_1

    .line 1966
    :catch_0
    move-exception v0

    .local v0, "e":Ljava/lang/Exception;
    goto :goto_0
.end method

.method private isKnoxCreatingOnTop()Z
    .locals 7

    .prologue
    .line 9087
    const/4 v2, 0x0

    .line 9088
    .local v2, "isKnoxCreatingOnTop":Z
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v3

    invoke-virtual {v3}, Lcom/samsung/android/knox/SemPersonaManager;->getPersonaIds()[I

    move-result-object v1

    .line 9090
    .local v1, "ids":[I
    if-eqz v1, :cond_1

    array-length v3, v1

    if-lez v3, :cond_1

    .line 9091
    const/4 v0, 0x0

    .local v0, "i":I
    :goto_0
    array-length v3, v1

    if-ge v0, v3, :cond_1

    .line 9092
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_0

    .line 9093
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "SemPersonaState: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v5

    aget v6, v1, v0

    invoke-virtual {v5, v6}, Lcom/samsung/android/knox/SemPersonaManager;->getStateManager(I)Lcom/samsung/android/knox/SemPersonaManager$StateManager;

    move-result-object v5

    invoke-virtual {v5}, Lcom/samsung/android/knox/SemPersonaManager$StateManager;->getState()Lcom/samsung/android/knox/SemPersonaState;

    move-result-object v5

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 9095
    :cond_0
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v3

    aget v4, v1, v0

    invoke-virtual {v3, v4}, Lcom/samsung/android/knox/SemPersonaManager;->getStateManager(I)Lcom/samsung/android/knox/SemPersonaManager$StateManager;

    move-result-object v3

    sget-object v4, Lcom/samsung/android/knox/SemPersonaState;->CREATING:Lcom/samsung/android/knox/SemPersonaState;

    invoke-virtual {v3, v4}, Lcom/samsung/android/knox/SemPersonaManager$StateManager;->inState(Lcom/samsung/android/knox/SemPersonaState;)Z

    move-result v3

    if-eqz v3, :cond_3

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isKnoxSetupWizardTopActivity()Z

    move-result v3

    if-eqz v3, :cond_3

    .line 9096
    const/4 v2, 0x1

    .line 9102
    .end local v0    # "i":I
    :cond_1
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_2

    .line 9103
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "isKnoxCreatingOnTop: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 9105
    :cond_2
    return v2

    .line 9091
    .restart local v0    # "i":I
    :cond_3
    add-int/lit8 v0, v0, 0x1

    goto :goto_0
.end method

.method private isKnoxKeyguardShowing()Z
    .locals 2

    .prologue
    .line 9078
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v0

    if-eqz v0, :cond_0

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v0

    invoke-virtual {v0}, Lcom/samsung/android/knox/SemPersonaManager;->getKeyguardShowState()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 9079
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "KnoxKeyguard is showing"

    invoke-static {v0, v1}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 9080
    const/4 v0, 0x1

    return v0

    .line 9082
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method private isKnoxSetupWizardTopActivity()Z
    .locals 6

    .prologue
    .line 9109
    const/4 v2, 0x0

    .line 9110
    .local v2, "isKnoxSetupWizardTopActivity":Z
    new-instance v0, Landroid/content/ComponentName;

    const-string v3, "com.sec.knox.knoxsetupwizardclient"

    .line 9111
    const-string v4, "com.sec.knox.knoxsetupwizardclient.SetupWizardKnoxNameSettingActivity"

    .line 9110
    invoke-direct {v0, v3, v4}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    .line 9112
    .local v0, "KnoxSetupWizard":Landroid/content/ComponentName;
    new-instance v1, Landroid/content/ComponentName;

    const-string v3, "com.samsung.knox.securefolder.setupwizard"

    .line 9113
    const-string v4, "com.samsung.knox.securefolder.setupwizard.SetupWizardKnoxNameSettingActivity"

    .line 9112
    invoke-direct {v1, v3, v4}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    .line 9115
    .local v1, "SecureFolderSetupWizard":Landroid/content/ComponentName;
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v3}, Lcom/android/server/policy/SystemKeyManager;->getCurrentTopActivity()Landroid/content/ComponentName;

    move-result-object v3

    invoke-virtual {v3, v0}, Landroid/content/ComponentName;->equals(Ljava/lang/Object;)Z

    move-result v3

    if-eqz v3, :cond_0

    .line 9116
    const/4 v2, 0x1

    .line 9118
    :cond_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v3}, Lcom/android/server/policy/SystemKeyManager;->getCurrentTopActivity()Landroid/content/ComponentName;

    move-result-object v3

    invoke-virtual {v3, v1}, Landroid/content/ComponentName;->equals(Ljava/lang/Object;)Z

    move-result v3

    if-eqz v3, :cond_1

    .line 9119
    const/4 v2, 0x1

    .line 9121
    :cond_1
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_2

    .line 9122
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "getCurrentTopActivity: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v5}, Lcom/android/server/policy/SystemKeyManager;->getCurrentTopActivity()Landroid/content/ComponentName;

    move-result-object v5

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 9123
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "isKnoxSetupWizardTopActivity: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 9125
    :cond_2
    return v2
.end method

.method private isOpenThemeApplied(Landroid/view/WindowManagerPolicy$WindowState;)Z
    .locals 3
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v2, 0x0

    .line 6742
    if-eqz p1, :cond_0

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    if-nez v1, :cond_1

    :cond_0
    return v2

    .line 6743
    :cond_1
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    iget v0, v1, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    .line 6744
    .local v0, "sFlags":I
    const/high16 v1, 0x80000

    and-int/2addr v1, v0

    if-eqz v1, :cond_2

    .line 6745
    const/4 v1, 0x1

    return v1

    .line 6747
    :cond_2
    return v2
.end method

.method private isPreloadInstallComplete()Z
    .locals 4

    .prologue
    .line 8280
    const-string v1, "persist.sys.storage_preload"

    const-string v2, "2"

    invoke-static {v1, v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    const-string v2, "2"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    .line 8281
    .local v0, "isPreloadInstallComplete":Z
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "isPreloadInstallComplete = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8282
    return v0
.end method

.method private isScreenCaptureEnabled()Z
    .locals 10

    .prologue
    const/4 v9, 0x1

    const/4 v8, 0x0

    .line 4264
    const/4 v3, 0x1

    .line 4270
    .local v3, "isScreenCaptureEnabled":Z
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v6}, Lcom/samsung/android/knox/SemPersonaManager;->isKioskModeEnabled(Landroid/content/Context;)Z

    move-result v6

    if-eqz v6, :cond_0

    .line 4271
    const/4 v3, 0x0

    .line 4272
    const-string v6, "restriction_policy"

    invoke-static {v6}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v6

    invoke-static {v6}, Lcom/samsung/android/knox/restriction/IRestrictionPolicy$Stub;->asInterface(Landroid/os/IBinder;)Lcom/samsung/android/knox/restriction/IRestrictionPolicy;

    move-result-object v4

    .line 4274
    .local v4, "mRestrictionPolicyService":Lcom/samsung/android/knox/restriction/IRestrictionPolicy;
    :try_start_0
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v6

    invoke-virtual {v6}, Lcom/samsung/android/knox/SemPersonaManager;->getKioskId()I

    move-result v6

    const/4 v7, 0x1

    invoke-interface {v4, v6, v7}, Lcom/samsung/android/knox/restriction/IRestrictionPolicy;->isScreenCaptureEnabledEx(IZ)Z
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_1

    move-result v3

    .line 4276
    .end local v3    # "isScreenCaptureEnabled":Z
    :goto_0
    return v3

    .line 4280
    .end local v4    # "mRestrictionPolicyService":Lcom/samsung/android/knox/restriction/IRestrictionPolicy;
    .restart local v3    # "isScreenCaptureEnabled":Z
    :cond_0
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v6

    invoke-virtual {v6}, Lcom/samsung/android/knox/SemPersonaManager;->getPersonaIds()[I

    move-result-object v2

    .line 4281
    .local v2, "ids":[I
    const-string v6, "persona"

    invoke-static {v6}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v5

    check-cast v5, Lcom/android/server/pm/PersonaManagerService;

    .line 4282
    .local v5, "pService":Lcom/android/server/pm/PersonaManagerService;
    if-eqz v5, :cond_3

    if-eqz v2, :cond_3

    array-length v6, v2

    if-lez v6, :cond_3

    .line 4283
    const-string v6, "restriction_policy"

    invoke-static {v6}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v6

    invoke-static {v6}, Lcom/samsung/android/knox/restriction/IRestrictionPolicy$Stub;->asInterface(Landroid/os/IBinder;)Lcom/samsung/android/knox/restriction/IRestrictionPolicy;

    move-result-object v4

    .line 4284
    .restart local v4    # "mRestrictionPolicyService":Lcom/samsung/android/knox/restriction/IRestrictionPolicy;
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_1
    array-length v6, v2

    if-ge v1, v6, :cond_3

    .line 4286
    :try_start_1
    aget v6, v2, v1

    invoke-virtual {v5, v6}, Lcom/android/server/pm/PersonaManagerService;->isKnoxMultiWindowExist(I)Z

    move-result v6

    if-eqz v6, :cond_1

    aget v6, v2, v1

    const/4 v7, 0x1

    invoke-interface {v4, v6, v7}, Lcom/samsung/android/knox/restriction/IRestrictionPolicy;->isScreenCaptureEnabledEx(IZ)Z

    move-result v6

    if-eqz v6, :cond_2

    .line 4284
    :cond_1
    :goto_2
    add-int/lit8 v1, v1, 0x1

    goto :goto_1

    .line 4287
    :cond_2
    const-string v6, "SamsungPhoneWindowManager"

    const-string v7, "KnoxMultiwindowExist. isScreenCaptureEnabled() returns false"

    invoke-static {v6, v7}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_0

    .line 4288
    return v8

    .line 4295
    .end local v1    # "i":I
    .end local v4    # "mRestrictionPolicyService":Lcom/samsung/android/knox/restriction/IRestrictionPolicy;
    :cond_3
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v6

    if-eqz v6, :cond_4

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v6

    invoke-virtual {v6}, Lcom/samsung/android/knox/EnterpriseDeviceManager;->getRestrictionPolicy()Lcom/samsung/android/knox/restriction/RestrictionPolicy;

    move-result-object v6

    invoke-virtual {v6, v9}, Lcom/samsung/android/knox/restriction/RestrictionPolicy;->isScreenCaptureEnabledInternal(Z)Z

    move-result v6

    if-eqz v6, :cond_5

    .line 4301
    :cond_4
    return v3

    .line 4296
    :cond_5
    const-string v6, "SamsungPhoneWindowManager"

    const-string v7, "mEDM.getRestrictionPolicy().isScreenCaptureEnabled() return false"

    invoke-static {v6, v7}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4297
    const/4 v3, 0x0

    .line 4298
    return v8

    .line 4290
    .restart local v1    # "i":I
    .restart local v4    # "mRestrictionPolicyService":Lcom/samsung/android/knox/restriction/IRestrictionPolicy;
    :catch_0
    move-exception v0

    .local v0, "e":Landroid/os/RemoteException;
    goto :goto_2

    .line 4275
    .end local v0    # "e":Landroid/os/RemoteException;
    .end local v1    # "i":I
    .end local v2    # "ids":[I
    .end local v5    # "pService":Lcom/android/server/pm/PersonaManagerService;
    :catch_1
    move-exception v0

    .restart local v0    # "e":Landroid/os/RemoteException;
    goto :goto_0
.end method

.method private isSpenInboxModel()Z
    .locals 5

    .prologue
    .line 4807
    const/4 v2, 0x0

    .line 4808
    .local v2, "ret":Z
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v1

    .line 4809
    .local v1, "pm":Landroid/content/pm/PackageManager;
    if-eqz v1, :cond_0

    .line 4810
    const-string v3, "com.sec.feature.spen_usp"

    invoke-virtual {v1, v3}, Landroid/content/pm/PackageManager;->semGetSystemFeatureLevel(Ljava/lang/String;)I

    move-result v0

    .line 4811
    .local v0, "mSpenUspLevel":I
    rem-int/lit8 v3, v0, 0xa

    const/4 v4, 0x5

    if-ne v3, v4, :cond_0

    .line 4813
    const/4 v2, 0x1

    .line 4814
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "spen inbox model"

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4817
    .end local v0    # "mSpenUspLevel":I
    :cond_0
    return v2
.end method

.method private isStubPTTApp()Z
    .locals 4

    .prologue
    const/4 v1, 0x1

    const/4 v2, 0x0

    .line 8299
    new-instance v0, Landroid/content/Intent;

    const-string v3, "com.kodiak.intent.action.PTT_BUTTON"

    invoke-direct {v0, v3}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 8300
    .local v0, "intent":Landroid/content/Intent;
    const-string v3, "com.bell.ptt"

    invoke-virtual {v0, v3}, Landroid/content/Intent;->setPackage(Ljava/lang/String;)Landroid/content/Intent;

    .line 8301
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v3

    invoke-virtual {v3, v0, v2}, Landroid/content/pm/PackageManager;->queryBroadcastReceivers(Landroid/content/Intent;I)Ljava/util/List;

    move-result-object v3

    invoke-interface {v3}, Ljava/util/List;->size()I

    move-result v3

    if-ge v3, v1, :cond_0

    :goto_0
    return v1

    :cond_0
    move v1, v2

    goto :goto_0
.end method

.method private isSupportAndAttachedSViewCover()Z
    .locals 3

    .prologue
    const/4 v1, 0x3

    const/4 v2, 0x1

    .line 5303
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    if-eqz v0, :cond_2

    .line 5304
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v0, :cond_2

    .line 5305
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->type:I

    if-ne v0, v2, :cond_1

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->model:I

    if-eq v0, v1, :cond_1

    .line 5310
    :cond_0
    return v2

    .line 5306
    :cond_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->type:I

    if-eq v0, v1, :cond_0

    .line 5307
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->type:I

    const/4 v1, 0x6

    if-eq v0, v1, :cond_0

    .line 5308
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->type:I

    const/16 v1, 0xff

    if-eq v0, v1, :cond_0

    .line 5309
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->type:I

    const/16 v1, 0x8

    if-eq v0, v1, :cond_0

    .line 5314
    :cond_2
    const/4 v0, 0x0

    return v0
.end method

.method private isUserKeyLongPressed()Z
    .locals 2

    .prologue
    const/4 v1, 0x0

    .line 4010
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserKeyLongPressed:Z

    if-eqz v0, :cond_0

    .line 4011
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserKeyLongPressed:Z

    .line 4012
    const/4 v0, 0x1

    return v0

    .line 4014
    :cond_0
    return v1
.end method

.method private isUsingSound()Z
    .locals 3

    .prologue
    .line 8233
    const/4 v1, 0x0

    .line 8234
    .local v1, "ret":Z
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getAudioManager()Landroid/media/AudioManager;

    move-result-object v0

    .line 8241
    .local v0, "audioManager":Landroid/media/AudioManager;
    invoke-virtual {v0}, Landroid/media/AudioManager;->isMusicActive()Z

    move-result v2

    if-nez v2, :cond_0

    .line 8242
    invoke-virtual {v0}, Landroid/media/AudioManager;->semIsFmRadioActive()Z

    move-result v2

    .line 8241
    if-nez v2, :cond_0

    .line 8243
    invoke-virtual {v0}, Landroid/media/AudioManager;->semIsVoiceCallActive()Z

    move-result v2

    .line 8241
    if-eqz v2, :cond_1

    .line 8244
    :cond_0
    const/4 v1, 0x1

    .line 8247
    :cond_1
    return v1
.end method

.method private isWatchRunning()Z
    .locals 8

    .prologue
    const/4 v7, 0x1

    const/4 v6, 0x0

    .line 6391
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v4, "activity"

    invoke-virtual {v3, v4}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/app/ActivityManager;

    .line 6392
    .local v0, "am":Landroid/app/ActivityManager;
    invoke-virtual {v0, v7}, Landroid/app/ActivityManager;->getRunningTasks(I)Ljava/util/List;

    move-result-object v3

    invoke-interface {v3, v6}, Ljava/util/List;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Landroid/app/ActivityManager$RunningTaskInfo;

    .line 6393
    .local v1, "taskInfo":Landroid/app/ActivityManager$RunningTaskInfo;
    if-eqz v1, :cond_0

    .line 6394
    iget-object v3, v1, Landroid/app/ActivityManager$RunningTaskInfo;->topActivity:Landroid/content/ComponentName;

    invoke-virtual {v3}, Landroid/content/ComponentName;->getPackageName()Ljava/lang/String;

    move-result-object v2

    .line 6395
    .local v2, "taskName":Ljava/lang/String;
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "isWatchRunning "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 6396
    const-string v3, "com.sec.android.app.premiumwatch"

    iget-object v4, v1, Landroid/app/ActivityManager$RunningTaskInfo;->topActivity:Landroid/content/ComponentName;

    invoke-virtual {v4}, Landroid/content/ComponentName;->getPackageName()Ljava/lang/String;

    move-result-object v4

    invoke-virtual {v3, v4}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v3

    if-eqz v3, :cond_0

    .line 6397
    return v7

    .line 6401
    .end local v2    # "taskName":Ljava/lang/String;
    :cond_0
    return v6
.end method

.method private launchZeroPageIfNeeded(Z)I
    .locals 5
    .param p1, "fromHomeKey"    # Z

    .prologue
    .line 5017
    const/4 v1, 0x0

    .line 5019
    .local v1, "ret":I
    const-string v2, "SamsungPhoneWindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "launchZeroPageIfNeeded IsDefaultLauncher = "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherPackageName:Ljava/lang/String;

    invoke-virtual {p0, v4}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isPreferredActivity(Ljava/lang/String;)Z

    move-result v4

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5020
    const-string v4, " mStartFromZeroPage = "

    .line 5019
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5020
    iget-boolean v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mStartFromZeroPage:Z

    .line 5019
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5020
    const-string v4, " mZeroPageDefaultHome = "

    .line 5019
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5020
    iget-boolean v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageDefaultHome:Z

    .line 5019
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 5021
    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageModel:Z

    if-eqz v2, :cond_0

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherPackageName:Ljava/lang/String;

    if-nez v2, :cond_0

    .line 5022
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getZeroPageSetting()V

    .line 5025
    :cond_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLauncherPackageName:Ljava/lang/String;

    invoke-virtual {p0, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isPreferredActivity(Ljava/lang/String;)Z

    move-result v2

    if-eqz v2, :cond_3

    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mStartFromZeroPage:Z

    if-eqz v2, :cond_3

    .line 5026
    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageDefaultHome:Z

    if-nez v2, :cond_1

    .line 5027
    return v1

    .line 5031
    :cond_1
    :try_start_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageHomeIntent:Landroid/content/Intent;

    if-eqz v2, :cond_3

    .line 5032
    const/4 v1, 0x1

    .line 5033
    if-eqz p1, :cond_2

    .line 5034
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageHomeIntent:Landroid/content/Intent;

    const-string v3, "android.intent.extra.FROM_HOME_KEY"

    invoke-virtual {v2, v3, p1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 5036
    :cond_2
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mZeroPageHomeIntent:Landroid/content/Intent;

    sget-object v4, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2, v3, v4}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 5043
    :cond_3
    :goto_0
    return v1

    .line 5038
    :catch_0
    move-exception v0

    .line 5039
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Can not start zero page because activity not found"

    invoke-static {v2, v3}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method private needWhiteNavigationIcon(Landroid/view/WindowManagerPolicy$WindowState;)Z
    .locals 2
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v1, 0x1

    .line 6751
    if-eqz p1, :cond_0

    .line 6752
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v0

    packed-switch v0, :pswitch_data_0

    .line 6756
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p1, v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->isStatusBarKeyguard()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 6760
    :cond_0
    const/4 v0, 0x0

    return v0

    .line 6754
    :pswitch_0
    return v1

    .line 6756
    :cond_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mHideLockScreen:Z

    if-nez v0, :cond_0

    .line 6757
    return v1

    .line 6752
    :pswitch_data_0
    .packed-switch 0x8b2
        :pswitch_0
    .end packed-switch
.end method

.method private playPenSound(I)V
    .locals 7
    .param p1, "soundId"    # I

    .prologue
    const/4 v5, 0x0

    const/high16 v2, 0x3f800000    # 1.0f

    .line 4833
    const-string v0, "SamsungPhoneWindowManager"

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "playPenSound, soundId : "

    invoke-virtual {v1, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4834
    if-nez p1, :cond_0

    return-void

    .line 4836
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSounds:Landroid/media/SoundPool;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSoundStreamId:I

    invoke-virtual {v0, v1}, Landroid/media/SoundPool;->stop(I)V

    .line 4837
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSounds:Landroid/media/SoundPool;

    const/4 v4, 0x1

    move v1, p1

    move v3, v2

    move v6, v2

    invoke-virtual/range {v0 .. v6}, Landroid/media/SoundPool;->play(IFFIIF)I

    move-result v0

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSoundStreamId:I

    .line 4832
    return-void
.end method

.method private playSound(Ljava/lang/String;)V
    .locals 5
    .param p1, "path"    # Ljava/lang/String;

    .prologue
    .line 4821
    new-instance v1, Landroid/media/MediaPlayer;

    invoke-direct {v1}, Landroid/media/MediaPlayer;-><init>()V

    .line 4823
    .local v1, "mediaPlayer":Landroid/media/MediaPlayer;
    const/4 v2, 0x1

    :try_start_0
    invoke-virtual {v1, v2}, Landroid/media/MediaPlayer;->setAudioStreamType(I)V

    .line 4824
    invoke-virtual {v1, p1}, Landroid/media/MediaPlayer;->setDataSource(Ljava/lang/String;)V

    .line 4825
    invoke-virtual {v1}, Landroid/media/MediaPlayer;->prepare()V

    .line 4826
    invoke-virtual {v1}, Landroid/media/MediaPlayer;->start()V
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    .line 4820
    :goto_0
    return-void

    .line 4827
    :catch_0
    move-exception v0

    .line 4828
    .local v0, "e":Ljava/lang/Exception;
    const-string v2, "SamsungPhoneWindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "Fail to start media exception : "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method private playSoundEffect()V
    .locals 3

    .prologue
    .line 4357
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getAudioManager()Landroid/media/AudioManager;

    move-result-object v0

    .line 4358
    .local v0, "audioManager":Landroid/media/AudioManager;
    if-eqz v0, :cond_2

    .line 4359
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v1

    if-nez v1, :cond_0

    .line 4360
    const-string v1, "trigger_restart_min_framework"

    const-string v2, "vold.decrypt"

    invoke-static {v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 4364
    :cond_0
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "keyguard - disable key sound"

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 4356
    :goto_0
    return-void

    .line 4361
    :cond_1
    invoke-static {}, Landroid/app/ActivityManager;->getCurrentUser()I

    move-result v1

    const/16 v2, 0x66

    invoke-virtual {v0, v2, v1}, Landroid/media/AudioManager;->playSoundEffect(II)V

    goto :goto_0

    .line 4367
    :cond_2
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Couldn\'t get audio manager"

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method private rotationForSecondLcdOrientationLw(II)I
    .locals 10
    .param p1, "orientation"    # I
    .param p2, "secondLastRotation"    # I

    .prologue
    const/16 v9, 0xd

    const/16 v8, 0xa

    const/4 v7, 0x2

    const/4 v6, 0x1

    .line 7123
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    monitor-enter v3

    .line 7124
    :try_start_0
    const-string v4, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "2nd LCD, rotationForSecondLcdOrientationLw(orient="

    invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 7125
    const-string v5, ", last="

    .line 7124
    invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 7126
    const-string v5, "); user="

    .line 7124
    invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 7126
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mUserRotation:I

    .line 7124
    invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 7126
    const-string v5, " "

    .line 7124
    invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 7127
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdUserRotationMode:I

    if-ne v2, v6, :cond_0

    .line 7128
    const-string v2, "USER_ROTATION_LOCKED"

    .line 7124
    :goto_0
    invoke-virtual {v5, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 7129
    const-string v5, " sensorRotation="

    .line 7124
    invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 7129
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mOrientationListener:Lcom/android/server/policy/PhoneWindowManager$MyOrientationListener;

    invoke-virtual {v5}, Lcom/android/server/policy/PhoneWindowManager$MyOrientationListener;->getProposedRotation()I

    move-result v5

    .line 7124
    invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v4, v2}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 7133
    iput p2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdLastRotation:I

    .line 7134
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mOrientationListener:Lcom/android/server/policy/PhoneWindowManager$MyOrientationListener;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager$MyOrientationListener;->getProposedRotation()I

    move-result v1

    .line 7136
    .local v1, "sensorRotation":I
    const/16 v2, 0xe

    if-ne p1, v2, :cond_1

    .line 7138
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdLastRotation:I

    .line 7172
    .local v0, "preferredSecondRotation":I
    :goto_1
    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdLastRotation:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v3

    .line 7173
    return v0

    .line 7128
    .end local v0    # "preferredSecondRotation":I
    .end local v1    # "sensorRotation":I
    :cond_0
    :try_start_1
    const-string v2, ""

    goto :goto_0

    .line 7139
    .restart local v1    # "sensorRotation":I
    :cond_1
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdUserRotationMode:I

    if-nez v2, :cond_5

    .line 7140
    if-eq p1, v7, :cond_2

    .line 7141
    const/4 v2, -0x1

    if-ne p1, v2, :cond_4

    .line 7151
    :cond_2
    if-ne v1, v7, :cond_3

    .line 7152
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mAllowAllRotations:I

    if-ne v2, v6, :cond_6

    .line 7155
    :cond_3
    move v0, v1

    .line 7154
    .restart local v0    # "preferredSecondRotation":I
    goto :goto_1

    .line 7142
    .end local v0    # "preferredSecondRotation":I
    :cond_4
    const/16 v2, 0xb

    if-eq p1, v2, :cond_2

    .line 7143
    const/16 v2, 0xc

    if-eq p1, v2, :cond_2

    .line 7144
    if-eq p1, v9, :cond_2

    .line 7145
    :cond_5
    const/4 v2, 0x4

    if-eq p1, v2, :cond_2

    .line 7146
    if-eq p1, v8, :cond_2

    .line 7147
    const/4 v2, 0x6

    if-eq p1, v2, :cond_2

    .line 7148
    const/4 v2, 0x7

    if-eq p1, v2, :cond_2

    .line 7159
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdUserRotationMode:I

    if-ne v2, v6, :cond_7

    .line 7160
    const/4 v2, 0x5

    if-eq p1, v2, :cond_7

    .line 7165
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v2, Lcom/android/server/policy/PhoneWindowManager;->mUserRotation:I

    .restart local v0    # "preferredSecondRotation":I
    goto :goto_1

    .line 7153
    .end local v0    # "preferredSecondRotation":I
    :cond_6
    if-eq p1, v8, :cond_3

    .line 7154
    if-eq p1, v9, :cond_3

    .line 7157
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdLastRotation:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .restart local v0    # "preferredSecondRotation":I
    goto :goto_1

    .line 7169
    .end local v0    # "preferredSecondRotation":I
    :cond_7
    const/4 v0, -0x1

    .restart local v0    # "preferredSecondRotation":I
    goto :goto_1

    .line 7123
    .end local v0    # "preferredSecondRotation":I
    .end local v1    # "sensorRotation":I
    :catchall_0
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method private setLeftButton(I)V
    .locals 10
    .param p1, "rotation"    # I

    .prologue
    .line 6339
    const/4 v1, 0x0

    .line 6340
    .local v1, "mDisplayWidth":I
    const/4 v0, 0x0

    .line 6341
    .local v0, "mDisplayHeight":I
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v5

    invoke-virtual {v5}, Landroid/content/res/Resources;->getDisplayMetrics()Landroid/util/DisplayMetrics;

    move-result-object v2

    .line 6343
    .local v2, "metrics":Landroid/util/DisplayMetrics;
    iget v5, v2, Landroid/util/DisplayMetrics;->heightPixels:I

    iget v6, v2, Landroid/util/DisplayMetrics;->widthPixels:I

    if-le v5, v6, :cond_0

    .line 6344
    iget v1, v2, Landroid/util/DisplayMetrics;->widthPixels:I

    .line 6345
    iget v0, v2, Landroid/util/DisplayMetrics;->heightPixels:I

    .line 6351
    :goto_0
    int-to-double v6, v1

    const-wide v8, 0x3fcc710cc0000000L    # 0.22220000624656677

    mul-double/2addr v6, v8

    double-to-int v3, v6

    .line 6352
    .local v3, "navBarButtonWidth":I
    int-to-double v6, v1

    const-wide v8, 0x3fbc28f5c0000000L    # 0.10999999940395355

    mul-double/2addr v6, v8

    double-to-int v4, v6

    .line 6353
    .local v4, "navBarSpaceWidth":I
    packed-switch p1, :pswitch_data_0

    .line 6338
    :goto_1
    return-void

    .line 6347
    .end local v3    # "navBarButtonWidth":I
    .end local v4    # "navBarSpaceWidth":I
    :cond_0
    iget v1, v2, Landroid/util/DisplayMetrics;->heightPixels:I

    .line 6348
    iget v0, v2, Landroid/util/DisplayMetrics;->widthPixels:I

    goto :goto_0

    .line 6356
    .restart local v3    # "navBarButtonWidth":I
    .restart local v4    # "navBarSpaceWidth":I
    :pswitch_0
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iput v4, v5, Landroid/graphics/Rect;->left:I

    .line 6357
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    sub-int v6, v0, v6

    iput v6, v5, Landroid/graphics/Rect;->top:I

    .line 6358
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    add-int v6, v4, v3

    iput v6, v5, Landroid/graphics/Rect;->right:I

    .line 6359
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iput v0, v5, Landroid/graphics/Rect;->bottom:I

    goto :goto_1

    .line 6362
    :pswitch_1
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    sub-int v6, v0, v6

    iput v6, v5, Landroid/graphics/Rect;->left:I

    .line 6363
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    add-int v6, v4, v3

    sub-int v6, v1, v6

    iput v6, v5, Landroid/graphics/Rect;->top:I

    .line 6364
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iput v0, v5, Landroid/graphics/Rect;->right:I

    .line 6365
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    sub-int v6, v1, v4

    iput v6, v5, Landroid/graphics/Rect;->bottom:I

    goto :goto_1

    .line 6368
    :pswitch_2
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    const/4 v6, 0x0

    iput v6, v5, Landroid/graphics/Rect;->left:I

    .line 6369
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iput v4, v5, Landroid/graphics/Rect;->top:I

    .line 6370
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    iput v6, v5, Landroid/graphics/Rect;->right:I

    .line 6371
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    add-int v6, v4, v3

    iput v6, v5, Landroid/graphics/Rect;->bottom:I

    goto :goto_1

    .line 6353
    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
        :pswitch_0
        :pswitch_2
    .end packed-switch
.end method

.method private setPowerSave(Z)V
    .locals 1
    .param p1, "powerSave"    # Z

    .prologue
    .line 939
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerSave:Z

    if-ne p1, v0, :cond_0

    return-void

    .line 940
    :cond_0
    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerSave:Z

    .line 938
    return-void
.end method

.method private setRightButton(I)V
    .locals 10
    .param p1, "rotation"    # I

    .prologue
    .line 6300
    const/4 v1, 0x0

    .line 6301
    .local v1, "mDisplayWidth":I
    const/4 v0, 0x0

    .line 6302
    .local v0, "mDisplayHeight":I
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v5

    invoke-virtual {v5}, Landroid/content/res/Resources;->getDisplayMetrics()Landroid/util/DisplayMetrics;

    move-result-object v2

    .line 6304
    .local v2, "metrics":Landroid/util/DisplayMetrics;
    iget v5, v2, Landroid/util/DisplayMetrics;->heightPixels:I

    iget v6, v2, Landroid/util/DisplayMetrics;->widthPixels:I

    if-le v5, v6, :cond_0

    .line 6305
    iget v1, v2, Landroid/util/DisplayMetrics;->widthPixels:I

    .line 6306
    iget v0, v2, Landroid/util/DisplayMetrics;->heightPixels:I

    .line 6312
    :goto_0
    int-to-double v6, v1

    const-wide v8, 0x3fcc710cc0000000L    # 0.22220000624656677

    mul-double/2addr v6, v8

    double-to-int v3, v6

    .line 6313
    .local v3, "navBarButtonWidth":I
    int-to-double v6, v1

    const-wide v8, 0x3fbc28f5c0000000L    # 0.10999999940395355

    mul-double/2addr v6, v8

    double-to-int v4, v6

    .line 6315
    .local v4, "navBarSpaceWidth":I
    packed-switch p1, :pswitch_data_0

    .line 6299
    :goto_1
    return-void

    .line 6308
    .end local v3    # "navBarButtonWidth":I
    .end local v4    # "navBarSpaceWidth":I
    :cond_0
    iget v1, v2, Landroid/util/DisplayMetrics;->heightPixels:I

    .line 6309
    iget v0, v2, Landroid/util/DisplayMetrics;->widthPixels:I

    goto :goto_0

    .line 6318
    .restart local v3    # "navBarButtonWidth":I
    .restart local v4    # "navBarSpaceWidth":I
    :pswitch_0
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    add-int v6, v4, v3

    sub-int v6, v1, v6

    iput v6, v5, Landroid/graphics/Rect;->left:I

    .line 6319
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iput v0, v5, Landroid/graphics/Rect;->top:I

    .line 6320
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    sub-int v6, v1, v4

    iput v6, v5, Landroid/graphics/Rect;->right:I

    .line 6321
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    add-int/2addr v6, v0

    iput v6, v5, Landroid/graphics/Rect;->bottom:I

    goto :goto_1

    .line 6324
    :pswitch_1
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iput v0, v5, Landroid/graphics/Rect;->left:I

    .line 6325
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iput v4, v5, Landroid/graphics/Rect;->top:I

    .line 6326
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    add-int/2addr v6, v0

    iput v6, v5, Landroid/graphics/Rect;->right:I

    .line 6327
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    add-int v6, v4, v3

    iput v6, v5, Landroid/graphics/Rect;->bottom:I

    goto :goto_1

    .line 6330
    :pswitch_2
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    const/4 v6, 0x0

    iput v6, v5, Landroid/graphics/Rect;->left:I

    .line 6331
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    add-int v6, v4, v3

    sub-int v6, v1, v6

    iput v6, v5, Landroid/graphics/Rect;->top:I

    .line 6332
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    iput v6, v5, Landroid/graphics/Rect;->right:I

    .line 6333
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    sub-int v6, v1, v4

    iput v6, v5, Landroid/graphics/Rect;->bottom:I

    goto :goto_1

    .line 6315
    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
        :pswitch_0
        :pswitch_2
    .end packed-switch
.end method

.method private setShowScreenshotHelpGuide()V
    .locals 3

    .prologue
    .line 4084
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    const-string v1, "show_screenshot_help_guide"

    const/4 v2, 0x1

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$Global;->putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z

    .line 4083
    return-void
.end method

.method private shouldPassEventForPTT(Landroid/view/KeyEvent;)Z
    .locals 3
    .param p1, "event"    # Landroid/view/KeyEvent;

    .prologue
    .line 8291
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-boolean v0, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_INPUT:Z

    if-eqz v0, :cond_0

    const-string v0, "SamsungPhoneWindowManager"

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "shouldPassEventForPTT Request "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v2

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8292
    :cond_0
    const-string v0, "com.bell.ptt"

    invoke-direct {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isAppInstalled(Ljava/lang/String;)Z

    move-result v0

    if-eqz v0, :cond_1

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isStubPTTApp()Z

    move-result v0

    if-eqz v0, :cond_2

    .line 8295
    :cond_1
    const/4 v0, 0x0

    return v0

    .line 8293
    :cond_2
    const/4 v0, 0x1

    return v0
.end method

.method private shouldShowImmersiveIcon(Landroid/view/WindowManagerPolicy$WindowState;)Z
    .locals 4
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    .line 6794
    const/4 v0, 0x0

    .line 6796
    .local v0, "ret":Z
    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarHideSetting:Z

    if-eqz v1, :cond_2

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    if-eqz v1, :cond_2

    .line 6797
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->inFreeformWorkspace()Z

    move-result v1

    if-nez v1, :cond_1

    .line 6798
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getSystemUiVisibility()I

    move-result v1

    and-int/lit16 v1, v1, 0x1000

    if-eqz v1, :cond_0

    .line 6799
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getSystemUiVisibility()I

    move-result v1

    and-int/lit8 v1, v1, 0x2

    if-nez v1, :cond_1

    .line 6800
    :cond_0
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    iget v1, v1, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v2, 0x96e

    if-eq v1, v2, :cond_1

    .line 6801
    invoke-static {p1}, Lcom/android/server/policy/PolicyControl;->isNonImmersiveWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v1

    if-eqz v1, :cond_4

    .line 6797
    :cond_1
    const/4 v0, 0x0

    .line 6804
    :cond_2
    :goto_0
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_3

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowImmersiveIcon:Z

    if-eq v1, v0, :cond_3

    .line 6805
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "shouldShowImmersiveIcon() ret="

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string v3, ", vis="

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getSystemUiVisibility()I

    move-result v3

    invoke-static {v3}, Ljava/lang/Integer;->toHexString(I)Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6807
    :cond_3
    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowImmersiveIcon:Z

    .line 6808
    return v0

    .line 6802
    :cond_4
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eq p1, v1, :cond_5

    const/4 v0, 0x1

    goto :goto_0

    :cond_5
    const/4 v0, 0x0

    goto :goto_0
.end method

.method private shouldShowScreenshotHelpGuide()Z
    .locals 4

    .prologue
    const/4 v0, 0x1

    const/4 v1, 0x0

    .line 4081
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v2

    const-string v3, "show_screenshot_help_guide"

    .line 4080
    invoke-static {v2, v3, v1}, Landroid/provider/Settings$Global;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v2

    if-eq v2, v0, :cond_0

    :goto_0
    return v0

    :cond_0
    move v0, v1

    goto :goto_0
.end method

.method private startCustomApp()Z
    .locals 12

    .prologue
    const/4 v11, 0x1

    const/4 v10, 0x0

    .line 8681
    :try_start_0
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    if-nez v7, :cond_0

    .line 8682
    const-string v7, "SamsungPhoneWindowManager"

    const-string v8, "mKnoxCustomSystemManager null"

    invoke-static {v7, v8}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 8683
    return v10

    .line 8686
    :cond_0
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    invoke-virtual {v7}, Lcom/samsung/android/knox/custom/SystemManager;->getRecentLongPressMode()I

    move-result v3

    .line 8687
    .local v3, "mode":I
    if-nez v3, :cond_1

    .line 8688
    return v10

    .line 8692
    :cond_1
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v8, "activity"

    invoke-virtual {v7, v8}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/app/ActivityManager;

    .line 8693
    .local v0, "am":Landroid/app/ActivityManager;
    const/4 v7, 0x1

    invoke-virtual {v0, v7}, Landroid/app/ActivityManager;->getRunningTasks(I)Ljava/util/List;

    move-result-object v7

    const/4 v8, 0x0

    invoke-interface {v7, v8}, Ljava/util/List;->get(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Landroid/app/ActivityManager$RunningTaskInfo;

    .line 8694
    .local v5, "taskInfo":Landroid/app/ActivityManager$RunningTaskInfo;
    iget-object v7, v5, Landroid/app/ActivityManager$RunningTaskInfo;->topActivity:Landroid/content/ComponentName;

    invoke-virtual {v7}, Landroid/content/ComponentName;->getPackageName()Ljava/lang/String;

    move-result-object v6

    .line 8696
    .local v6, "taskName":Ljava/lang/String;
    if-ne v3, v11, :cond_2

    .line 8697
    invoke-direct {p0, v6}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDefaultLauncher(Ljava/lang/String;)Z

    move-result v7

    if-eqz v7, :cond_4

    .line 8701
    :cond_2
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    invoke-virtual {v7}, Lcom/samsung/android/knox/custom/SystemManager;->getRecentLongPressActivity()Ljava/lang/String;

    move-result-object v1

    .line 8703
    .local v1, "appToStart":Ljava/lang/String;
    if-eqz v1, :cond_3

    invoke-virtual {v1}, Ljava/lang/String;->isEmpty()Z

    move-result v7

    if-eqz v7, :cond_5

    .line 8704
    :cond_3
    const-string v7, "SamsungPhoneWindowManager"

    const-string v8, "appToStart null"

    invoke-static {v7, v8}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 8705
    return v10

    .line 8698
    .end local v1    # "appToStart":Ljava/lang/String;
    :cond_4
    const-string v7, "SamsungPhoneWindowManager"

    new-instance v8, Ljava/lang/StringBuilder;

    invoke-direct {v8}, Ljava/lang/StringBuilder;-><init>()V

    const-string v9, "Foreground taskName:"

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v8

    invoke-static {v7, v8}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 8699
    return v10

    .line 8707
    .restart local v1    # "appToStart":Ljava/lang/String;
    :cond_5
    const-string v7, "SamsungPhoneWindowManager"

    new-instance v8, Ljava/lang/StringBuilder;

    invoke-direct {v8}, Ljava/lang/StringBuilder;-><init>()V

    const-string v9, "starting custom app : "

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v8

    invoke-static {v7, v8}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8708
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v7}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v7

    invoke-virtual {v7, v1}, Landroid/content/pm/PackageManager;->getLaunchIntentForPackage(Ljava/lang/String;)Landroid/content/Intent;

    move-result-object v4

    .line 8710
    .local v4, "regularIntent":Landroid/content/Intent;
    if-eqz v4, :cond_6

    .line 8711
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-object v8, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v7, v4, v8}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    .line 8718
    :cond_6
    return v11

    .line 8714
    .end local v0    # "am":Landroid/app/ActivityManager;
    .end local v1    # "appToStart":Ljava/lang/String;
    .end local v3    # "mode":I
    .end local v4    # "regularIntent":Landroid/content/Intent;
    .end local v5    # "taskInfo":Landroid/app/ActivityManager$RunningTaskInfo;
    .end local v6    # "taskName":Ljava/lang/String;
    :catch_0
    move-exception v2

    .line 8715
    .local v2, "e":Ljava/lang/Exception;
    const-string v7, "SamsungPhoneWindowManager"

    new-instance v8, Ljava/lang/StringBuilder;

    invoke-direct {v8}, Ljava/lang/StringBuilder;-><init>()V

    const-string v9, "startCustomApp"

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v8

    invoke-static {v7, v8}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 8716
    return v10
.end method

.method private startSGA(Ljava/lang/String;)V
    .locals 5
    .param p1, "gamePkg"    # Ljava/lang/String;

    .prologue
    .line 6092
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v2

    .line 6093
    .local v2, "packageManager":Landroid/content/pm/PackageManager;
    const/4 v1, 0x0

    .line 6094
    .local v1, "intent":Landroid/content/Intent;
    invoke-virtual {v2, p1}, Landroid/content/pm/PackageManager;->getLaunchIntentForPackage(Ljava/lang/String;)Landroid/content/Intent;

    move-result-object v1

    .line 6096
    .local v1, "intent":Landroid/content/Intent;
    if-eqz v1, :cond_1

    .line 6098
    :try_start_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-object v4, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v3, v1, v4}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 6091
    :cond_0
    :goto_0
    return-void

    .line 6099
    :catch_0
    move-exception v0

    .line 6100
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_0

    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "SGA is not installed"

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    .line 6103
    .end local v0    # "e":Landroid/content/ActivityNotFoundException;
    :cond_1
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_0

    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "no Launch intent of SGA"

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method private updateBackRect(I)V
    .locals 1
    .param p1, "rot"    # I

    .prologue
    .line 6292
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarKeyOrder:I

    if-nez v0, :cond_0

    .line 6293
    invoke-direct {p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->setRightButton(I)V

    .line 6291
    :goto_0
    return-void

    .line 6295
    :cond_0
    invoke-direct {p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->setLeftButton(I)V

    goto :goto_0
.end method

.method private updateNavigationBarIconColorLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManagerPolicy$WindowState;)I
    .locals 5
    .param p1, "opaque"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "opaqueOrDimming"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v4, 0x0

    .line 6999
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v2, :cond_0

    .line 7000
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v3}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v3

    invoke-virtual {v2, v3}, Lcom/android/server/policy/PhoneWindowManager;->isFullscreen(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v2

    .line 6999
    if-eqz v2, :cond_0

    .line 7001
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy$WindowState;->inFreeformWorkspace()Z

    move-result v2

    if-eqz v2, :cond_2

    .line 7011
    :cond_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager;->isStatusBarKeyguard()Z

    move-result v2

    if-eqz v2, :cond_1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mHideLockScreen:Z

    if-eqz v2, :cond_4

    :cond_1
    move-object v1, p2

    .line 7015
    .local v1, "navigationBarIconColorWin":Landroid/view/WindowManagerPolicy$WindowState;
    :goto_0
    if-eqz v1, :cond_5

    .line 7016
    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    iget v2, v2, Landroid/view/WindowManager$LayoutParams;->navigationBarIconColor:I

    return v2

    .line 7002
    .end local v1    # "navigationBarIconColorWin":Landroid/view/WindowManagerPolicy$WindowState;
    :cond_2
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    iget v0, v2, Landroid/view/WindowManager$LayoutParams;->navigationBarIconColor:I

    .line 7003
    .local v0, "focusedFullWindowIconColor":I
    if-eqz v0, :cond_3

    .line 7004
    return v0

    .line 7006
    :cond_3
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    iget v2, v2, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v3, 0x7ef

    if-ne v2, v3, :cond_0

    .line 7007
    return v0

    .line 7012
    .end local v0    # "focusedFullWindowIconColor":I
    :cond_4
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    goto :goto_0

    .line 7019
    .restart local v1    # "navigationBarIconColorWin":Landroid/view/WindowManagerPolicy$WindowState;
    :cond_5
    return v4
.end method

.method private updatePowerSave()V
    .locals 1

    .prologue
    .line 935
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-virtual {v0}, Landroid/os/PowerManager;->isPowerSaveMode()Z

    move-result v0

    invoke-direct {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->setPowerSave(Z)V

    .line 934
    return-void
.end method

.method private updateWakeupPreventionPackages(Ljava/lang/String;)V
    .locals 6
    .param p1, "wakeupPreventionPackages"    # Ljava/lang/String;

    .prologue
    .line 8148
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeupPreventionPackages:Ljava/util/HashSet;

    invoke-virtual {v3}, Ljava/util/HashSet;->clear()V

    .line 8149
    if-eqz p1, :cond_0

    .line 8150
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "updateWakeupPreventionPackages = "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8152
    const-string v3, "|"

    invoke-virtual {p1, v3}, Ljava/lang/String;->split(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object v2

    .line 8153
    .local v2, "wakeupPreventionPackagesList":[Ljava/lang/String;
    if-eqz v2, :cond_0

    array-length v3, v2

    if-lez v3, :cond_0

    .line 8154
    array-length v0, v2

    .line 8155
    .local v0, "N":I
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_0

    .line 8156
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeupPreventionPackages:Ljava/util/HashSet;

    aget-object v4, v2, v1

    invoke-virtual {v3, v4}, Ljava/util/HashSet;->add(Ljava/lang/Object;)Z

    .line 8155
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 8147
    .end local v0    # "N":I
    .end local v1    # "i":I
    .end local v2    # "wakeupPreventionPackagesList":[Ljava/lang/String;
    :cond_0
    return-void
.end method


# virtual methods
.method public adjustConfigurationLw(Landroid/content/res/Configuration;)V
    .locals 4
    .param p1, "config"    # Landroid/content/res/Configuration;

    .prologue
    const/4 v1, 0x1

    const/4 v3, -0x1

    const/4 v2, 0x0

    .line 7235
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v0, :cond_1

    .line 7236
    iput v1, p1, Landroid/content/res/Configuration;->semMobileKeyboardCovered:I

    .line 7242
    :goto_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeForPreparing()Z

    move-result v0

    if-eqz v0, :cond_2

    .line 7243
    iput v1, p1, Landroid/content/res/Configuration;->semDesktopModeEnabled:I

    .line 7247
    :goto_1
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDeskTopUiMode:I

    if-eq v0, v3, :cond_0

    .line 7248
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDeskTopUiMode:I

    iput v0, p1, Landroid/content/res/Configuration;->uiMode:I

    .line 7249
    iget v0, p1, Landroid/content/res/Configuration;->uiMode:I

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v1

    invoke-virtual {v1}, Landroid/content/res/Resources;->getConfiguration()Landroid/content/res/Configuration;

    move-result-object v1

    iget v1, v1, Landroid/content/res/Configuration;->uiMode:I

    if-ne v0, v1, :cond_0

    .line 7250
    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDeskTopUiMode:I

    .line 7255
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    const-string v1, "show_button_background"

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v0

    iput v0, p1, Landroid/content/res/Configuration;->showButtonBackground:I

    .line 7233
    return-void

    .line 7238
    :cond_1
    iput v2, p1, Landroid/content/res/Configuration;->semMobileKeyboardCovered:I

    goto :goto_0

    .line 7245
    :cond_2
    iput v2, p1, Landroid/content/res/Configuration;->semDesktopModeEnabled:I

    goto :goto_1
.end method

.method public adjustSystemUiVisibilityLw(I)I
    .locals 4
    .param p1, "visibility"    # I

    .prologue
    const/4 v3, 0x0

    .line 6985
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    if-eqz v0, :cond_1

    .line 6986
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    or-int/2addr p1, v0

    .line 6995
    :cond_0
    :goto_0
    return p1

    .line 6987
    :cond_1
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUnsettingSystemUiFlags:I

    if-eqz v0, :cond_0

    .line 6988
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUnsettingSystemUiFlags:I

    const/high16 v1, 0x8000000

    and-int/2addr v0, v1

    if-eqz v0, :cond_2

    .line 6989
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mLastSystemUiFlags:I

    const v2, -0x20000001

    and-int/2addr v1, v2

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mLastSystemUiFlags:I

    .line 6991
    :cond_2
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUnsettingSystemUiFlags:I

    not-int v0, v0

    and-int/2addr p1, v0

    .line 6992
    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUnsettingSystemUiFlags:I

    goto :goto_0
.end method

.method public adjustWindowParamsLw(Landroid/view/WindowManager$LayoutParams;II)V
    .locals 3
    .param p1, "attrs"    # Landroid/view/WindowManager$LayoutParams;
    .param p2, "pid"    # I
    .param p3, "uid"    # I

    .prologue
    const/high16 v2, -0x80000000

    .line 7216
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v1, 0x967

    if-eq v0, v1, :cond_0

    .line 7217
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v1, 0x975

    if-ne v0, v1, :cond_4

    .line 7219
    :cond_0
    :goto_0
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    or-int/2addr v0, v2

    iput v0, p1, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    .line 7223
    :cond_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v1, "android.permission.INTERNAL_SYSTEM_WINDOW"

    invoke-virtual {v0, v1, p2, p3}, Landroid/content/Context;->checkPermission(Ljava/lang/String;II)I

    move-result v0

    if-eqz v0, :cond_2

    .line 7224
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v1, "com.samsung.android.permission.SAMSUNG_INTERNAL_SYSTEM_WINDOW"

    invoke-virtual {v0, v1, p2, p3}, Landroid/content/Context;->checkPermission(Ljava/lang/String;II)I

    move-result v0

    if-eqz v0, :cond_2

    .line 7225
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    const v1, -0x20001

    and-int/2addr v0, v1

    iput v0, p1, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    .line 7228
    :cond_2
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->privateFlags:I

    and-int/2addr v0, v2

    if-eqz v0, :cond_3

    .line 7229
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->subtreeSystemUiVisibility:I

    or-int/lit16 v0, v0, 0x200

    iput v0, p1, Landroid/view/WindowManager$LayoutParams;->subtreeSystemUiVisibility:I

    .line 7214
    :cond_3
    return-void

    .line 7218
    :cond_4
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v1, 0x974

    if-ne v0, v1, :cond_1

    goto :goto_0
.end method

.method public applyAspectRatioFrame(Landroid/graphics/Rect;FII)V
    .locals 4
    .param p1, "aspectRatioFrame"    # Landroid/graphics/Rect;
    .param p2, "aspectRatio"    # F
    .param p3, "winFlags"    # I
    .param p4, "sysUiFlags"    # I

    .prologue
    const/4 v3, 0x0

    .line 8968
    and-int/lit16 v1, p4, 0x1800

    if-eqz v1, :cond_0

    .line 8969
    return-void

    .line 8971
    :cond_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v1, :cond_1

    .line 8972
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDefaultMaxAspect:F

    sub-float v1, p2, v1

    invoke-static {v1}, Ljava/lang/Math;->abs(F)F

    move-result v1

    const/4 v2, 0x0

    cmpl-float v1, v1, v2

    if-nez v1, :cond_2

    const/4 v0, 0x1

    .line 8973
    .local v0, "defaultAspect":Z
    :goto_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarPosition:I

    packed-switch v1, :pswitch_data_0

    .line 8967
    .end local v0    # "defaultAspect":Z
    :cond_1
    :goto_1
    return-void

    .line 8972
    :cond_2
    const/4 v0, 0x0

    .restart local v0    # "defaultAspect":Z
    goto :goto_0

    .line 8975
    :pswitch_0
    if-eqz v0, :cond_3

    .line 8976
    invoke-virtual {p1, v3, v3}, Landroid/graphics/Rect;->offsetTo(II)V

    goto :goto_1

    .line 8978
    :cond_3
    and-int/lit16 v1, p3, 0x400

    if-nez v1, :cond_4

    .line 8979
    and-int/lit8 v1, p4, 0x4

    if-nez v1, :cond_4

    .line 8980
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableTop:I

    div-int/lit8 v1, v1, 0x2

    neg-int v1, v1

    invoke-virtual {p1, v3, v1}, Landroid/graphics/Rect;->offset(II)V

    goto :goto_1

    .line 8982
    :cond_4
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMarginForGameApp:I

    invoke-virtual {p1, v3, v1}, Landroid/graphics/Rect;->offsetTo(II)V

    goto :goto_1

    .line 8988
    :pswitch_1
    if-eqz v0, :cond_5

    .line 8989
    invoke-virtual {p1, v3, v3}, Landroid/graphics/Rect;->offsetTo(II)V

    goto :goto_1

    .line 8991
    :cond_5
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMarginForGameApp:I

    invoke-virtual {p1, v1, v3}, Landroid/graphics/Rect;->offsetTo(II)V

    goto :goto_1

    .line 8996
    :pswitch_2
    if-eqz v0, :cond_6

    .line 8997
    iget v1, p1, Landroid/graphics/Rect;->left:I

    invoke-virtual {p1, v1, v3}, Landroid/graphics/Rect;->offset(II)V

    goto :goto_1

    .line 8999
    :cond_6
    iget v1, p1, Landroid/graphics/Rect;->left:I

    invoke-virtual {p1, v1, v3}, Landroid/graphics/Rect;->offset(II)V

    .line 9000
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMarginForGameApp:I

    neg-int v1, v1

    invoke-virtual {p1, v1, v3}, Landroid/graphics/Rect;->offset(II)V

    goto :goto_1

    .line 8973
    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
        :pswitch_2
    .end packed-switch
.end method

.method public applyForceUserActivityTimeoutWin(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)V
    .locals 4
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "attrs"    # Landroid/view/WindowManager$LayoutParams;

    .prologue
    const-wide/16 v2, 0x0

    .line 9061
    iget v0, p2, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v1, 0x200000

    and-int/2addr v0, v1

    if-eqz v0, :cond_0

    .line 9062
    iget-wide v0, p2, Landroid/view/WindowManager$LayoutParams;->userActivityTimeout:J

    cmp-long v0, v0, v2

    if-gez v0, :cond_0

    .line 9063
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceUserActivityTimeoutWin:Ljava/util/ArrayList;

    invoke-virtual {v0, p1}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v0

    .line 9061
    if-eqz v0, :cond_0

    .line 9068
    const-wide/16 v0, 0x146a

    iput-wide v0, p2, Landroid/view/WindowManager$LayoutParams;->userActivityTimeout:J

    .line 9069
    iput-wide v2, p2, Landroid/view/WindowManager$LayoutParams;->screenDimDuration:J

    .line 9060
    :cond_0
    return-void
.end method

.method public applyFrameInLayoutWindowLw(Landroid/view/WindowManagerPolicy$WindowState;ZLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
    .locals 5
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "hasNavBar"    # Z
    .param p3, "pf"    # Landroid/graphics/Rect;
    .param p4, "df"    # Landroid/graphics/Rect;
    .param p5, "of"    # Landroid/graphics/Rect;
    .param p6, "cf"    # Landroid/graphics/Rect;

    .prologue
    .line 7652
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v0

    .line 7653
    .local v0, "attrs":Landroid/view/WindowManager$LayoutParams;
    invoke-static {p1, v0}, Lcom/android/server/policy/PolicyControl;->getWindowFlags(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I

    move-result v1

    .line 7654
    .local v1, "fl":I
    const/4 v3, 0x0

    invoke-static {p1, v3}, Lcom/android/server/policy/PolicyControl;->getSystemUiVisibility(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I

    move-result v2

    .line 7656
    .local v2, "sysUiFl":I
    iget v3, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    sparse-switch v3, :sswitch_data_0

    .line 7664
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mWindowManagerInternal:Landroid/view/WindowManagerInternal;

    const/4 v4, 0x3

    invoke-virtual {v3, v4}, Landroid/view/WindowManagerInternal;->isStackVisible(I)Z

    move-result v3

    if-eqz v3, :cond_0

    .line 7665
    and-int/lit16 v2, v2, -0x201

    .line 7670
    :cond_0
    :sswitch_0
    and-int/lit16 v3, v1, 0x100

    if-nez v3, :cond_1

    and-int/lit16 v3, v2, 0x600

    if-eqz v3, :cond_2

    .line 7673
    :cond_1
    iget v3, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v4, 0x7e4

    if-ne v3, v4, :cond_6

    .line 7674
    if-eqz p2, :cond_3

    .line 7675
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    .line 7674
    :goto_0
    iput v3, p6, Landroid/graphics/Rect;->left:I

    iput v3, p5, Landroid/graphics/Rect;->left:I

    iput v3, p4, Landroid/graphics/Rect;->left:I

    iput v3, p3, Landroid/graphics/Rect;->left:I

    .line 7676
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iput v3, p6, Landroid/graphics/Rect;->top:I

    iput v3, p5, Landroid/graphics/Rect;->top:I

    iput v3, p4, Landroid/graphics/Rect;->top:I

    iput v3, p3, Landroid/graphics/Rect;->top:I

    .line 7677
    if-eqz p2, :cond_4

    .line 7678
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    add-int/2addr v3, v4

    .line 7677
    :goto_1
    iput v3, p6, Landroid/graphics/Rect;->right:I

    iput v3, p5, Landroid/graphics/Rect;->right:I

    iput v3, p4, Landroid/graphics/Rect;->right:I

    iput v3, p3, Landroid/graphics/Rect;->right:I

    .line 7680
    if-eqz p2, :cond_5

    .line 7681
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenTop:I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenHeight:I

    add-int/2addr v3, v4

    .line 7680
    :goto_2
    iput v3, p6, Landroid/graphics/Rect;->bottom:I

    iput v3, p5, Landroid/graphics/Rect;->bottom:I

    iput v3, p4, Landroid/graphics/Rect;->bottom:I

    iput v3, p3, Landroid/graphics/Rect;->bottom:I

    .line 7651
    :cond_2
    :goto_3
    return-void

    .line 7675
    :cond_3
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    goto :goto_0

    .line 7679
    :cond_4
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    add-int/2addr v3, v4

    goto :goto_1

    .line 7682
    :cond_5
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    add-int/2addr v3, v4

    goto :goto_2

    .line 7683
    :cond_6
    iget v3, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v4, 0x8e0

    if-ne v3, v4, :cond_7

    .line 7685
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStableLeft:I

    iput v3, p6, Landroid/graphics/Rect;->left:I

    iput v3, p5, Landroid/graphics/Rect;->left:I

    iput v3, p4, Landroid/graphics/Rect;->left:I

    iput v3, p3, Landroid/graphics/Rect;->left:I

    .line 7686
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenTop:I

    iput v3, p6, Landroid/graphics/Rect;->top:I

    iput v3, p5, Landroid/graphics/Rect;->top:I

    iput v3, p4, Landroid/graphics/Rect;->top:I

    iput v3, p3, Landroid/graphics/Rect;->top:I

    .line 7687
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStableRight:I

    iput v3, p6, Landroid/graphics/Rect;->right:I

    iput v3, p5, Landroid/graphics/Rect;->right:I

    iput v3, p4, Landroid/graphics/Rect;->right:I

    iput v3, p3, Landroid/graphics/Rect;->right:I

    .line 7688
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStableBottom:I

    iput v3, p6, Landroid/graphics/Rect;->bottom:I

    iput v3, p5, Landroid/graphics/Rect;->bottom:I

    iput v3, p4, Landroid/graphics/Rect;->bottom:I

    iput v3, p3, Landroid/graphics/Rect;->bottom:I

    goto :goto_3

    .line 7689
    :cond_7
    invoke-direct {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->canBeAppliedUnrestrictedScreen(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v3

    if-eqz v3, :cond_8

    .line 7691
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iput v3, p5, Landroid/graphics/Rect;->left:I

    iput v3, p4, Landroid/graphics/Rect;->left:I

    iput v3, p3, Landroid/graphics/Rect;->left:I

    .line 7692
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iput v3, p5, Landroid/graphics/Rect;->top:I

    iput v3, p4, Landroid/graphics/Rect;->top:I

    iput v3, p3, Landroid/graphics/Rect;->top:I

    .line 7693
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    .line 7694
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    .line 7693
    add-int/2addr v3, v4

    iput v3, p5, Landroid/graphics/Rect;->right:I

    iput v3, p4, Landroid/graphics/Rect;->right:I

    iput v3, p3, Landroid/graphics/Rect;->right:I

    .line 7695
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    .line 7696
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    .line 7695
    add-int/2addr v3, v4

    iput v3, p5, Landroid/graphics/Rect;->bottom:I

    iput v3, p4, Landroid/graphics/Rect;->bottom:I

    iput v3, p3, Landroid/graphics/Rect;->bottom:I

    goto/16 :goto_3

    .line 7697
    :cond_8
    invoke-direct {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->canBeAppliedOverscanScreen(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v3

    if-eqz v3, :cond_9

    .line 7699
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenLeft:I

    iput v3, p6, Landroid/graphics/Rect;->left:I

    iput v3, p5, Landroid/graphics/Rect;->left:I

    iput v3, p4, Landroid/graphics/Rect;->left:I

    iput v3, p3, Landroid/graphics/Rect;->left:I

    .line 7700
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenTop:I

    iput v3, p6, Landroid/graphics/Rect;->top:I

    iput v3, p5, Landroid/graphics/Rect;->top:I

    iput v3, p4, Landroid/graphics/Rect;->top:I

    iput v3, p3, Landroid/graphics/Rect;->top:I

    .line 7701
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenLeft:I

    .line 7702
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenWidth:I

    .line 7701
    add-int/2addr v3, v4

    iput v3, p6, Landroid/graphics/Rect;->right:I

    iput v3, p5, Landroid/graphics/Rect;->right:I

    iput v3, p4, Landroid/graphics/Rect;->right:I

    iput v3, p3, Landroid/graphics/Rect;->right:I

    .line 7703
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenTop:I

    .line 7704
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenHeight:I

    .line 7703
    add-int/2addr v3, v4

    iput v3, p6, Landroid/graphics/Rect;->bottom:I

    iput v3, p5, Landroid/graphics/Rect;->bottom:I

    iput v3, p4, Landroid/graphics/Rect;->bottom:I

    iput v3, p3, Landroid/graphics/Rect;->bottom:I

    goto/16 :goto_3

    .line 7705
    :cond_9
    invoke-direct {p0, v0, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->canBeAppliedAllUnrestrictedScreen(Landroid/view/WindowManager$LayoutParams;I)Z

    move-result v3

    if-eqz v3, :cond_a

    .line 7713
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iput v3, p6, Landroid/graphics/Rect;->left:I

    iput v3, p5, Landroid/graphics/Rect;->left:I

    iput v3, p4, Landroid/graphics/Rect;->left:I

    iput v3, p3, Landroid/graphics/Rect;->left:I

    .line 7714
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iput v3, p6, Landroid/graphics/Rect;->top:I

    iput v3, p5, Landroid/graphics/Rect;->top:I

    iput v3, p4, Landroid/graphics/Rect;->top:I

    iput v3, p3, Landroid/graphics/Rect;->top:I

    .line 7715
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    .line 7716
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    .line 7715
    add-int/2addr v3, v4

    iput v3, p6, Landroid/graphics/Rect;->right:I

    iput v3, p5, Landroid/graphics/Rect;->right:I

    iput v3, p4, Landroid/graphics/Rect;->right:I

    iput v3, p3, Landroid/graphics/Rect;->right:I

    .line 7717
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    .line 7718
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    .line 7717
    add-int/2addr v3, v4

    iput v3, p6, Landroid/graphics/Rect;->bottom:I

    iput v3, p5, Landroid/graphics/Rect;->bottom:I

    iput v3, p4, Landroid/graphics/Rect;->bottom:I

    iput v3, p3, Landroid/graphics/Rect;->bottom:I

    goto/16 :goto_3

    .line 7719
    :cond_a
    invoke-direct {p0, v0, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->canBeAppliedFullStableScreen(Landroid/view/WindowManager$LayoutParams;I)Z

    move-result v3

    if-eqz v3, :cond_2

    .line 7720
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenLeft:I

    iput v3, p6, Landroid/graphics/Rect;->left:I

    iput v3, p5, Landroid/graphics/Rect;->left:I

    iput v3, p4, Landroid/graphics/Rect;->left:I

    iput v3, p3, Landroid/graphics/Rect;->left:I

    .line 7721
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenTop:I

    iput v3, p6, Landroid/graphics/Rect;->top:I

    iput v3, p5, Landroid/graphics/Rect;->top:I

    iput v3, p4, Landroid/graphics/Rect;->top:I

    iput v3, p3, Landroid/graphics/Rect;->top:I

    .line 7722
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenRight:I

    iput v3, p6, Landroid/graphics/Rect;->right:I

    iput v3, p5, Landroid/graphics/Rect;->right:I

    iput v3, p4, Landroid/graphics/Rect;->right:I

    iput v3, p3, Landroid/graphics/Rect;->right:I

    .line 7723
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenBottom:I

    iput v3, p6, Landroid/graphics/Rect;->bottom:I

    iput v3, p5, Landroid/graphics/Rect;->bottom:I

    iput v3, p4, Landroid/graphics/Rect;->bottom:I

    iput v3, p3, Landroid/graphics/Rect;->bottom:I

    goto/16 :goto_3

    .line 7656
    :sswitch_data_0
    .sparse-switch
        0x8b3 -> :sswitch_0
        0x8b4 -> :sswitch_0
        0x96e -> :sswitch_0
        0x97f -> :sswitch_0
    .end sparse-switch
.end method

.method public applyLidSwitchState()Z
    .locals 3

    .prologue
    const/4 v2, 0x1

    .line 8252
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isBuiltInKeyboardVisible()Z

    move-result v1

    invoke-virtual {v0, v1}, Landroid/os/PowerManager;->setKeyboardVisibility(Z)V

    .line 8254
    invoke-static {}, Landroid/os/FactoryTest;->isRunningFactoryApp()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8255
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "applyLidSwitchState isRunningFactoryApp() = true. ignore it."

    invoke-static {v0, v1}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8256
    return v2

    .line 8259
    :cond_0
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getLidControlsSleep()Z

    move-result v0

    if-nez v0, :cond_1

    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isPreloadInstallComplete()Z

    move-result v0

    if-eqz v0, :cond_2

    .line 8260
    :cond_1
    return v2

    .line 8262
    :cond_2
    const/4 v0, 0x0

    return v0
.end method

.method public applyPostLayoutPolicyLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;Landroid/view/WindowManagerPolicy$WindowState;Z)V
    .locals 9
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "attrs"    # Landroid/view/WindowManager$LayoutParams;
    .param p3, "attached"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p4, "showWhenLocked"    # Z

    .prologue
    const/4 v8, 0x3

    const/4 v5, 0x2

    const/4 v7, 0x1

    const/4 v6, 0x0

    .line 7836
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportAndAttachedSViewCover()Z

    move-result v3

    if-eqz v3, :cond_0

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v3, v3, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-eqz v3, :cond_6

    .line 7874
    :cond_0
    :goto_0
    sget-boolean v3, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v3, :cond_1

    .line 7875
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->inFreeformWorkspace()Z

    move-result v3

    if-eqz v3, :cond_1

    .line 7876
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v3, :cond_1

    .line 7877
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v3}, Landroid/view/WindowManagerPolicy$WindowState;->getFrameLw()Landroid/graphics/Rect;

    move-result-object v3

    iget v3, v3, Landroid/graphics/Rect;->top:I

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getVisibleFrameLw()Landroid/graphics/Rect;

    move-result-object v4

    iget v4, v4, Landroid/graphics/Rect;->bottom:I

    if-lt v3, v4, :cond_c

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->isInMultiWindowMode()Z

    move-result v3

    if-eqz v3, :cond_c

    .line 7884
    :cond_1
    :goto_1
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isKeyguardLocked()Z

    move-result v3

    if-eqz v3, :cond_2

    if-eqz p4, :cond_2

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v3

    invoke-interface {v3}, Lcom/samsung/android/view/IWindowStateBridge;->isOnScreen()Z

    move-result v3

    if-eqz v3, :cond_2

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mAppsToBeHidden:Ljava/util/HashSet;

    invoke-virtual {v3}, Ljava/util/HashSet;->isEmpty()Z

    move-result v3

    if-eqz v3, :cond_2

    .line 7885
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v0

    .line 7886
    .local v0, "appToken":Landroid/view/IApplicationToken;
    if-eqz v0, :cond_2

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsShowWhenLocked:Ljava/util/ArrayList;

    invoke-virtual {v3, v0}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v3

    if-eqz v3, :cond_d

    .line 7895
    .end local v0    # "appToken":Landroid/view/IApplicationToken;
    :cond_2
    :goto_2
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFakeFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-nez v3, :cond_3

    .line 7896
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    const/high16 v4, 0x10000

    and-int/2addr v3, v4

    if-eqz v3, :cond_3

    .line 7897
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFakeFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7901
    :cond_3
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    invoke-interface {v3}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isExpandedDockedStack()Z

    move-result v3

    if-nez v3, :cond_4

    .line 7902
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v3}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->isDesktopModeLw()Z

    move-result v3

    .line 7901
    if-eqz v3, :cond_5

    .line 7903
    :cond_4
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput-boolean v6, v3, Lcom/android/server/policy/PhoneWindowManager;->mForceStatusBar:Z

    .line 7834
    :cond_5
    return-void

    .line 7837
    :cond_6
    iput-boolean v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideLockScreenByCover:Z

    .line 7838
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-nez v3, :cond_0

    .line 7839
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v3

    invoke-interface {v3}, Lcom/samsung/android/view/IWindowStateBridge;->getCoverMode()I

    move-result v2

    .line 7840
    .local v2, "coverMode":I
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->type:I

    if-lt v3, v7, :cond_8

    .line 7841
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v4, 0x63

    if-gt v3, v4, :cond_8

    .line 7842
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v4, 0x80000

    and-int/2addr v3, v4

    if-eqz v3, :cond_8

    .line 7840
    const/4 v1, 0x1

    .line 7844
    .local v1, "applyWindow":Z
    :goto_3
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v0

    .line 7845
    .restart local v0    # "appToken":Landroid/view/IApplicationToken;
    if-eqz v1, :cond_0

    .line 7846
    if-ne v2, v7, :cond_a

    .line 7847
    iput v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    .line 7848
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsToBeHiddenBySViewCover:Ljava/util/HashSet;

    invoke-virtual {v3, v0}, Ljava/util/HashSet;->remove(Ljava/lang/Object;)Z

    .line 7857
    :cond_7
    :goto_4
    iget v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    if-eqz v3, :cond_0

    .line 7858
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsToBeHiddenBySViewCover:Ljava/util/HashSet;

    invoke-virtual {v3}, Ljava/util/HashSet;->isEmpty()Z

    move-result v3

    if-eqz v3, :cond_0

    .line 7859
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7860
    iget-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowingSViewCover:Z

    iput-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceStatusBarFromSViewCover:Z

    .line 7861
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-boolean v3, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_LAYOUT:Z

    if-eqz v3, :cond_0

    .line 7862
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "Hide sview cover : mHideSViewCover ="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 7863
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    .line 7862
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 7863
    const-string v5, ", SViewCoverWindow = "

    .line 7862
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_0

    .line 7843
    .end local v0    # "appToken":Landroid/view/IApplicationToken;
    .end local v1    # "applyWindow":Z
    :cond_8
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->type:I

    if-ne v3, v8, :cond_9

    if-eqz v2, :cond_9

    const/4 v1, 0x1

    .restart local v1    # "applyWindow":Z
    goto :goto_3

    .end local v1    # "applyWindow":Z
    :cond_9
    const/4 v1, 0x0

    .restart local v1    # "applyWindow":Z
    goto :goto_3

    .line 7849
    .restart local v0    # "appToken":Landroid/view/IApplicationToken;
    :cond_a
    if-ne v2, v5, :cond_b

    .line 7850
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v3

    invoke-interface {v3}, Lcom/samsung/android/view/IWindowStateBridge;->willBeHideSViewCoverOnce()Z

    move-result v3

    if-eqz v3, :cond_7

    .line 7851
    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    .line 7852
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsToBeHiddenBySViewCover:Ljava/util/HashSet;

    invoke-virtual {v3, v0}, Ljava/util/HashSet;->remove(Ljava/lang/Object;)Z

    goto :goto_4

    .line 7855
    :cond_b
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsToBeHiddenBySViewCover:Ljava/util/HashSet;

    invoke-virtual {v3, v0}, Ljava/util/HashSet;->add(Ljava/lang/Object;)Z

    goto :goto_4

    .line 7879
    .end local v0    # "appToken":Landroid/view/IApplicationToken;
    .end local v1    # "applyWindow":Z
    .end local v2    # "coverMode":I
    :cond_c
    iput-boolean v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOverrapedFreeformWithNaviBar:Z

    goto/16 :goto_1

    .line 7888
    .restart local v0    # "appToken":Landroid/view/IApplicationToken;
    :cond_d
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->type:I

    if-eq v3, v8, :cond_2

    .line 7889
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsShowWhenLocked:Ljava/util/ArrayList;

    invoke-virtual {v3, v0}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    goto/16 :goto_2
.end method

.method public beginCoverLayoutLw(III)V
    .locals 27
    .param p1, "displayWidth"    # I
    .param p2, "displayHeight"    # I
    .param p3, "displayRotation"    # I

    .prologue
    .line 7063
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v5, v1, Lcom/android/server/policy/PhoneWindowManager;->mSystemLeft:I

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v1, Lcom/android/server/policy/PhoneWindowManager;->mSystemTop:I

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v1, Lcom/android/server/policy/PhoneWindowManager;->mSystemRight:I

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v8, v1, Lcom/android/server/policy/PhoneWindowManager;->mSystemBottom:I

    .line 7064
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v9, v1, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v10, v1, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    .line 7065
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v11, v1, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v12, v1, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    .line 7066
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v13, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenLeft:I

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v14, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenTop:I

    .line 7067
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v15, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenRight:I

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenBottom:I

    move/from16 v16, v0

    .line 7068
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableLeft:I

    move/from16 v17, v0

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableTop:I

    move/from16 v18, v0

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableRight:I

    move/from16 v19, v0

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mStableBottom:I

    move/from16 v20, v0

    .line 7069
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    move/from16 v21, v0

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mDockTop:I

    move/from16 v22, v0

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    move/from16 v23, v0

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    move/from16 v24, v0

    .line 7070
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v1, Lcom/samsung/android/cover/CoverState;->heightPixel:I

    move/from16 v25, v0

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v1, Lcom/samsung/android/cover/CoverState;->widthPixel:I

    move/from16 v26, v0

    move-object/from16 v1, p0

    move/from16 v2, p3

    move/from16 v3, p1

    move/from16 v4, p2

    .line 7061
    invoke-virtual/range {v1 .. v26}, Lcom/android/server/policy/SamsungPhoneWindowManager;->prepareSViewCoverLayout(IIIIIIIIIIIIIIIIIIIIIIIII)V

    .line 7060
    return-void
.end method

.method public beginLayoutLw(IIIILandroid/graphics/Rect;)V
    .locals 16
    .param p1, "displayWidth"    # I
    .param p2, "displayHeight"    # I
    .param p3, "displayRotation"    # I
    .param p4, "displayId"    # I
    .param p5, "layoutFrame"    # Landroid/graphics/Rect;

    .prologue
    .line 7472
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mLastSystemUiFlags:I

    and-int/lit16 v2, v2, 0x800

    if-eqz v2, :cond_4

    const/4 v11, 0x1

    .line 7473
    .local v11, "immersive":Z
    :goto_0
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mLastSystemUiFlags:I

    and-int/lit16 v2, v2, 0x1000

    if-eqz v2, :cond_5

    const/4 v12, 0x1

    .line 7475
    .local v12, "immersiveSticky":Z
    :goto_1
    move-object/from16 v0, p0

    iget-boolean v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v2, :cond_0

    .line 7476
    const/4 v15, 0x0

    .local v15, "mobileKeyboardRight":I
    const/4 v13, 0x0

    .local v13, "mobileKeyboardBottom":I
    const/4 v14, 0x0

    .line 7477
    .local v14, "mobileKeyboardLeft":I
    move/from16 v0, p1

    move/from16 v1, p2

    if-ge v0, v1, :cond_6

    .line 7478
    move-object/from16 v0, p0

    iget v13, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    .line 7487
    :goto_2
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v14, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemLeft:I

    .line 7488
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mSystemRight:I

    sub-int/2addr v3, v15

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemRight:I

    .line 7489
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mSystemBottom:I

    sub-int/2addr v3, v13

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemBottom:I

    .line 7491
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenWidth:I

    sub-int/2addr v3, v14

    sub-int/2addr v3, v15

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenWidth:I

    .line 7492
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenHeight:I

    sub-int/2addr v3, v13

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenHeight:I

    .line 7494
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    .line 7495
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    sub-int/2addr v3, v14

    sub-int/2addr v3, v15

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    .line 7494
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenWidth:I

    .line 7496
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    .line 7497
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    sub-int/2addr v3, v13

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    .line 7496
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenHeight:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenHeight:I

    .line 7498
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    .line 7500
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mCurLeft:I

    add-int/2addr v3, v14

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mCurLeft:I

    .line 7499
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mStableLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mContentLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    .line 7498
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenLeft:I

    .line 7501
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    .line 7502
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mCurRight:I

    sub-int/2addr v3, v15

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mCurRight:I

    .line 7501
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mStableRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mContentRight:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    .line 7503
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    .line 7504
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mCurBottom:I

    sub-int/2addr v3, v13

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mCurBottom:I

    .line 7503
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenBottom:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mStableBottom:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mContentBottom:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    .line 7508
    .end local v13    # "mobileKeyboardBottom":I
    .end local v14    # "mobileKeyboardLeft":I
    .end local v15    # "mobileKeyboardRight":I
    :cond_0
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mHasNavigationBar:Z

    if-eqz v2, :cond_1

    .line 7509
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUiMode:I

    move/from16 v0, p3

    invoke-virtual {v2, v0, v3}, Lcom/android/server/policy/PhoneWindowManager;->getNavigationBarHeight(II)I

    move-result v2

    move-object/from16 v0, p0

    iput v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    .line 7513
    :cond_1
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v2, :cond_3

    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v2

    invoke-interface {v2}, Lcom/samsung/android/view/IWindowStateBridge;->getDisplayId()I

    move-result v2

    move/from16 v0, p4

    if-ne v2, v0, :cond_3

    .line 7514
    const-string v2, "SamsungPhoneWindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "beginLayoutLw mCarModeBar = "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 7515
    packed-switch p3, :pswitch_data_0

    .line 7534
    :pswitch_0
    const/4 v2, 0x2

    move-object/from16 v0, p0

    iput v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    .line 7535
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenHeight:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenHeight:I

    const/4 v5, 0x0

    move/from16 v0, p1

    invoke-virtual {v2, v5, v3, v0, v4}, Landroid/graphics/Rect;->set(IIII)V

    .line 7539
    :goto_3
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeBarVisible()Z

    move-result v2

    if-eqz v2, :cond_2

    .line 7540
    move-object/from16 v0, p0

    iget v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    packed-switch v2, :pswitch_data_1

    .line 7573
    :cond_2
    :goto_4
    if-nez p5, :cond_3

    .line 7574
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    sget-object v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    sget-object v4, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    .line 7575
    sget-object v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    sget-object v6, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    sget-object v7, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    new-instance v8, Landroid/graphics/Rect;

    invoke-direct {v8}, Landroid/graphics/Rect;-><init>()V

    sget-object v9, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    const/4 v10, 0x0

    .line 7574
    invoke-interface/range {v2 .. v10}, Landroid/view/WindowManagerPolicy$WindowState;->computeFrameLw(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V

    .line 7471
    :cond_3
    return-void

    .line 7472
    .end local v11    # "immersive":Z
    .end local v12    # "immersiveSticky":Z
    :cond_4
    const/4 v11, 0x0

    .restart local v11    # "immersive":Z
    goto/16 :goto_0

    .line 7473
    :cond_5
    const/4 v12, 0x0

    .restart local v12    # "immersiveSticky":Z
    goto/16 :goto_1

    .line 7480
    .restart local v13    # "mobileKeyboardBottom":I
    .restart local v14    # "mobileKeyboardLeft":I
    .restart local v15    # "mobileKeyboardRight":I
    :cond_6
    const/4 v2, 0x3

    move/from16 v0, p3

    if-ne v0, v2, :cond_7

    .line 7481
    move-object/from16 v0, p0

    iget v14, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    goto/16 :goto_2

    .line 7483
    :cond_7
    move-object/from16 v0, p0

    iget v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    goto/16 :goto_2

    .line 7517
    .end local v13    # "mobileKeyboardBottom":I
    .end local v14    # "mobileKeyboardLeft":I
    .end local v15    # "mobileKeyboardRight":I
    :pswitch_1
    move-object/from16 v0, p0

    iget v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarHorizontalPosition:I

    if-nez v2, :cond_8

    .line 7518
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    move-object/from16 v0, p0

    iget v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    const/4 v4, 0x0

    const/4 v5, 0x0

    move/from16 v0, p2

    invoke-virtual {v2, v4, v5, v3, v0}, Landroid/graphics/Rect;->set(IIII)V

    .line 7522
    :goto_5
    move-object/from16 v0, p0

    iget v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarHorizontalPosition:I

    move-object/from16 v0, p0

    iput v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    goto :goto_3

    .line 7520
    :cond_8
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    const/4 v5, 0x0

    move/from16 v0, p2

    invoke-virtual {v2, v3, v5, v4, v0}, Landroid/graphics/Rect;->set(IIII)V

    goto :goto_5

    .line 7525
    :pswitch_2
    move-object/from16 v0, p0

    iget v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarHorizontalPosition:I

    if-nez v2, :cond_9

    .line 7526
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    move-object/from16 v0, p0

    iget v5, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    add-int/2addr v4, v5

    const/4 v5, 0x0

    move/from16 v0, p2

    invoke-virtual {v2, v3, v5, v4, v0}, Landroid/graphics/Rect;->set(IIII)V

    .line 7530
    :goto_6
    move-object/from16 v0, p0

    iget v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarHorizontalPosition:I

    move-object/from16 v0, p0

    iput v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    goto/16 :goto_3

    .line 7528
    :cond_9
    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTmpCarModeFrame:Landroid/graphics/Rect;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    add-int/2addr v3, v4

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    add-int/2addr v4, v5

    const/4 v5, 0x0

    move/from16 v0, p2

    invoke-virtual {v2, v3, v5, v4, v0}, Landroid/graphics/Rect;->set(IIII)V

    goto :goto_6

    .line 7542
    :pswitch_3
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableBottom:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableBottom:I

    .line 7543
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenBottom:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenBottom:I

    .line 7544
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemBottom:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemBottom:I

    .line 7545
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    .line 7546
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mCurBottom:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mVoiceContentBottom:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentBottom:I

    .line 7547
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenTop:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenHeight:I

    .line 7548
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenTop:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenHeight:I

    goto/16 :goto_4

    .line 7551
    :pswitch_4
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableLeft:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    add-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableLeft:I

    .line 7552
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenLeft:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    add-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenLeft:I

    .line 7553
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemLeft:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    add-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemLeft:I

    .line 7554
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    add-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    .line 7555
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mCurLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mVoiceContentLeft:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentLeft:I

    .line 7556
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    .line 7557
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    .line 7558
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenWidth:I

    goto/16 :goto_4

    .line 7561
    :pswitch_5
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableRight:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableRight:I

    .line 7562
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenRight:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenRight:I

    .line 7563
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemRight:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mSystemRight:I

    .line 7564
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    .line 7565
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mCurRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mVoiceContentRight:I

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentRight:I

    .line 7566
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    .line 7567
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    sub-int/2addr v3, v4

    iput v3, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenWidth:I

    goto/16 :goto_4

    .line 7515
    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_1
        :pswitch_0
        :pswitch_2
    .end packed-switch

    .line 7540
    :pswitch_data_1
    .packed-switch 0x0
        :pswitch_4
        :pswitch_5
        :pswitch_3
    .end packed-switch
.end method

.method public beginPostLayoutPolicyLw(II)V
    .locals 4
    .param p1, "displayWidth"    # I
    .param p2, "displayHeight"    # I

    .prologue
    const/4 v3, 0x0

    const/4 v2, 0x0

    .line 7803
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsShowWhenLocked:Ljava/util/ArrayList;

    invoke-virtual {v0}, Ljava/util/ArrayList;->clear()V

    .line 7807
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsToBeHiddenBySViewCover:Ljava/util/HashSet;

    invoke-virtual {v0}, Ljava/util/HashSet;->clear()V

    .line 7808
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceStatusBarFromSViewCover:Z

    .line 7809
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowingSViewCover:Z

    .line 7810
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7811
    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    .line 7812
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideLockScreenByCover:Z

    .line 7813
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v0, v0, Lcom/samsung/android/cover/CoverState;->attached:Z

    if-eqz v0, :cond_3

    .line 7819
    :cond_0
    :goto_0
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWatchLaunching:Z

    if-eqz v0, :cond_1

    .line 7820
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/4 v1, 0x1

    iput-boolean v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mHideLockScreen:Z

    .line 7824
    :cond_1
    iput-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFakeFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7827
    sget-boolean v0, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v0, :cond_2

    .line 7828
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOverrapedFreeformWithNaviBar:Z

    .line 7801
    :cond_2
    return-void

    .line 7814
    :cond_3
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastCoverAppCovered:Z

    goto :goto_0
.end method

.method public broadcastHardKeyIntent(Landroid/view/KeyEvent;)V
    .locals 5
    .param p1, "event"    # Landroid/view/KeyEvent;

    .prologue
    .line 8755
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    if-eqz v4, :cond_0

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    invoke-virtual {v4}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v4

    if-eqz v4, :cond_0

    .line 8756
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    invoke-virtual {v4}, Lcom/samsung/android/knox/custom/ProKioskManager;->getHardKeyIntentState()Z

    move-result v4

    .line 8755
    if-eqz v4, :cond_0

    .line 8757
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v4

    if-nez v4, :cond_1

    const/4 v0, 0x1

    .line 8758
    .local v0, "down":Z
    :goto_0
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v3

    .line 8759
    .local v3, "keyCode":I
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v4}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v4

    if-eqz v4, :cond_0

    .line 8760
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v4

    if-nez v4, :cond_0

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v4

    if-nez v4, :cond_0

    .line 8761
    sparse-switch v3, :sswitch_data_0

    .line 8754
    .end local v0    # "down":Z
    .end local v3    # "keyCode":I
    :cond_0
    :goto_1
    return-void

    .line 8757
    :cond_1
    const/4 v0, 0x0

    .restart local v0    # "down":Z
    goto :goto_0

    .line 8770
    .restart local v3    # "keyCode":I
    :sswitch_0
    new-instance v1, Landroid/content/Intent;

    const-string v4, "com.samsung.android.knox.intent.action.HARD_KEY_PRESS"

    invoke-direct {v1, v4}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 8771
    .local v1, "intent":Landroid/content/Intent;
    const-string v4, "com.samsung.android.knox.intent.extra.KEY_CODE"

    invoke-virtual {v1, v4, v3}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 8772
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v4, v1}, Landroid/content/Context;->sendBroadcast(Landroid/content/Intent;)V

    .line 8773
    new-instance v2, Landroid/content/Intent;

    const-string v4, "com.sec.action.HARD_KEY_PRESS"

    invoke-direct {v2, v4}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 8774
    .local v2, "intentLegacy":Landroid/content/Intent;
    const-string v4, "com.sec.intent.extra.KEY_CODE"

    invoke-virtual {v2, v4, v3}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 8775
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v4, v2}, Landroid/content/Context;->sendBroadcast(Landroid/content/Intent;)V

    goto :goto_1

    .line 8761
    :sswitch_data_0
    .sparse-switch
        0x3 -> :sswitch_0
        0x4 -> :sswitch_0
        0x18 -> :sswitch_0
        0x19 -> :sswitch_0
        0x1a -> :sswitch_0
        0x52 -> :sswitch_0
        0xbb -> :sswitch_0
    .end sparse-switch
.end method

.method public callAccessibilityScreenCurtain()V
    .locals 4

    .prologue
    .line 3733
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "callAccessibilityScreenCurtain() is called"

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3734
    const-string v2, "ADPD"

    const-string v3, "PowerKey DoubleClick"

    invoke-virtual {p0, v2, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager;->insertLog(Ljava/lang/String;Ljava/lang/String;)V

    .line 3735
    const-string v2, "accessibility"

    invoke-static {v2}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v2

    invoke-static {v2}, Landroid/view/accessibility/IAccessibilityManager$Stub;->asInterface(Landroid/os/IBinder;)Landroid/view/accessibility/IAccessibilityManager;

    move-result-object v1

    .line 3737
    .local v1, "iAccessibilityManager":Landroid/view/accessibility/IAccessibilityManager;
    :try_start_0
    invoke-interface {v1}, Landroid/view/accessibility/IAccessibilityManager;->semToggleDarkScreenMode()V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 3732
    :goto_0
    return-void

    .line 3738
    :catch_0
    move-exception v0

    .line 3739
    .local v0, "e":Landroid/os/RemoteException;
    invoke-virtual {v0}, Landroid/os/RemoteException;->printStackTrace()V

    goto :goto_0
.end method

.method public callAccessibilityTalkbackMode()V
    .locals 4

    .prologue
    .line 3723
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "callAccessibilityTalkbackMode() is called"

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3724
    const-string v2, "accessibility"

    invoke-static {v2}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v2

    invoke-static {v2}, Landroid/view/accessibility/IAccessibilityManager$Stub;->asInterface(Landroid/os/IBinder;)Landroid/view/accessibility/IAccessibilityManager;

    move-result-object v1

    .line 3726
    .local v1, "iAccessibilityManager":Landroid/view/accessibility/IAccessibilityManager;
    :try_start_0
    invoke-interface {v1}, Landroid/view/accessibility/IAccessibilityManager;->setTalkbackMode()V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 3722
    :goto_0
    return-void

    .line 3727
    :catch_0
    move-exception v0

    .line 3728
    .local v0, "e":Landroid/os/RemoteException;
    invoke-virtual {v0}, Landroid/os/RemoteException;->printStackTrace()V

    goto :goto_0
.end method

.method public callOneTouchReport()V
    .locals 8

    .prologue
    const/4 v7, 0x0

    .line 3767
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isOneTouchReportEnabled()Z

    move-result v3

    if-eqz v3, :cond_1

    .line 3769
    const/4 v1, 0x0

    .line 3770
    .local v1, "intent":Landroid/content/Intent;
    :try_start_0
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_0

    .line 3771
    new-instance v2, Landroid/content/Intent;

    const-string v3, "android.intent.action.CALL_PRIVILEGED"

    const-string v4, "tel"

    const-string v5, "114"

    const/4 v6, 0x0

    invoke-static {v4, v5, v6}, Landroid/net/Uri;->fromParts(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;

    move-result-object v4

    invoke-direct {v2, v3, v4}, Landroid/content/Intent;-><init>(Ljava/lang/String;Landroid/net/Uri;)V

    .local v2, "intent":Landroid/content/Intent;
    move-object v1, v2

    .line 3775
    .end local v2    # "intent":Landroid/content/Intent;
    .local v1, "intent":Landroid/content/Intent;
    :goto_0
    const-string v3, "startFlag"

    const-string v4, "002"

    invoke-virtual {v1, v3, v4}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;

    .line 3776
    const/high16 v3, 0x10000000

    invoke-virtual {v1, v3}, Landroid/content/Intent;->setFlags(I)Landroid/content/Intent;

    .line 3777
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "OneTouchReport started"

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3778
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3, v1}, Landroid/content/Context;->startActivity(Landroid/content/Intent;)V
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    .line 3780
    .end local v1    # "intent":Landroid/content/Intent;
    :goto_1
    const v3, 0xc36a

    const/4 v4, 0x1

    invoke-virtual {p0, v7, v3, v4}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z

    .line 3766
    :goto_2
    return-void

    .line 3773
    .local v1, "intent":Landroid/content/Intent;
    :cond_0
    :try_start_1
    new-instance v2, Landroid/content/Intent;

    const-string v3, "android.intent.action.CALL_PRIVILEGED"

    const-string v4, "tel"

    const-string v5, "112"

    const/4 v6, 0x0

    invoke-static {v4, v5, v6}, Landroid/net/Uri;->fromParts(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;

    move-result-object v4

    invoke-direct {v2, v3, v4}, Landroid/content/Intent;-><init>(Ljava/lang/String;Landroid/net/Uri;)V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_0

    .restart local v2    # "intent":Landroid/content/Intent;
    move-object v1, v2

    .end local v2    # "intent":Landroid/content/Intent;
    .local v1, "intent":Landroid/content/Intent;
    goto :goto_0

    .line 3782
    .end local v1    # "intent":Landroid/content/Intent;
    :cond_1
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "OneTouchReport was disable"

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_2

    .line 3779
    :catch_0
    move-exception v0

    .local v0, "e":Ljava/lang/Exception;
    goto :goto_1
.end method

.method public canBeForceHiddenBySViewCover(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)Z
    .locals 6
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "attrs"    # Landroid/view/WindowManager$LayoutParams;

    .prologue
    const/4 v1, 0x1

    const/4 v2, 0x0

    .line 5325
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v3

    invoke-interface {v3}, Lcom/samsung/android/view/IWindowStateBridge;->getCoverMode()I

    move-result v0

    .line 5326
    .local v0, "coverMode":I
    if-nez v0, :cond_1

    .line 5327
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->type:I

    sparse-switch v3, :sswitch_data_0

    .line 5343
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v3

    sparse-switch v3, :sswitch_data_1

    .line 5364
    :cond_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v4

    invoke-virtual {v3, v4}, Lcom/android/server/policy/PhoneWindowManager;->windowTypeToLayerLw(I)I

    move-result v3

    .line 5365
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/16 v5, 0x7d0

    invoke-virtual {v4, v5}, Lcom/android/server/policy/PhoneWindowManager;->windowTypeToLayerLw(I)I

    move-result v4

    .line 5364
    if-ge v3, v4, :cond_4

    :goto_0
    return v1

    .line 5339
    :sswitch_0
    return v2

    .line 5348
    :sswitch_1
    return v1

    .line 5353
    :cond_1
    const/16 v3, 0xa

    if-ne v0, v3, :cond_2

    .line 5354
    return v2

    .line 5355
    :cond_2
    iget v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    if-eqz v3, :cond_0

    .line 5356
    const/4 v3, 0x2

    if-ne v0, v3, :cond_3

    .line 5357
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v3

    invoke-interface {v3}, Lcom/samsung/android/view/IWindowStateBridge;->willBeHideSViewCoverOnce()Z

    move-result v3

    if-eqz v3, :cond_0

    .line 5358
    return v2

    .line 5360
    :cond_3
    if-ne v0, v1, :cond_0

    .line 5361
    return v2

    :cond_4
    move v1, v2

    .line 5364
    goto :goto_0

    .line 5327
    nop

    :sswitch_data_0
    .sparse-switch
        0x7d0 -> :sswitch_0
        0x7d4 -> :sswitch_0
        0x7d5 -> :sswitch_0
        0x7dd -> :sswitch_0
        0x7e3 -> :sswitch_0
        0x7e4 -> :sswitch_0
        0x833 -> :sswitch_0
        0x8ac -> :sswitch_0
        0x8ad -> :sswitch_0
    .end sparse-switch

    .line 5343
    :sswitch_data_1
    .sparse-switch
        0x7d9 -> :sswitch_1
        0x8b2 -> :sswitch_1
        0x8de -> :sswitch_1
        0x8df -> :sswitch_1
    .end sparse-switch
.end method

.method public changeAppOpsMode(IILjava/lang/String;)I
    .locals 7
    .param p1, "outAppOp"    # I
    .param p2, "callingUid"    # I
    .param p3, "packageName"    # Ljava/lang/String;

    .prologue
    .line 8187
    const/4 v1, 0x3

    .line 8189
    .local v1, "ret":I
    const-string v4, "com.nttdocomo.android.mascot"

    invoke-virtual {v4, p3}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v4

    if-eqz v4, :cond_0

    .line 8191
    :try_start_0
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 8192
    .local v2, "identity":J
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppOpsManager:Landroid/app/AppOpsManager;

    const/4 v5, 0x0

    invoke-virtual {v4, p1, p2, p3, v5}, Landroid/app/AppOpsManager;->setMode(IILjava/lang/String;I)V

    .line 8193
    const-string v4, "SamsungPhoneWindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "mode change : "

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, p3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v4, v5}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8194
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    .line 8195
    const/4 v1, 0x0

    .line 8200
    .end local v2    # "identity":J
    :cond_0
    :goto_0
    return v1

    .line 8196
    :catch_0
    move-exception v0

    .line 8197
    .local v0, "e":Ljava/lang/Exception;
    const-string v4, "SamsungPhoneWindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "Exception occured for AppOpsManager "

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v4, v5}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method public changeNavigationBarHeight(I)V
    .locals 4
    .param p1, "height"    # I

    .prologue
    .line 8812
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->getWindowManagerLock()Ljava/lang/Object;

    move-result-object v1

    monitor-enter v1

    .line 8813
    :try_start_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->isDesktopModeLw()Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v0

    if-eqz v0, :cond_0

    monitor-exit v1

    .line 8814
    return-void

    :cond_0
    monitor-exit v1

    .line 8821
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v0, :cond_1

    return-void

    .line 8812
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0

    .line 8824
    :cond_1
    sget-boolean v0, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_CUSTOM_HEIGHT:Z

    if-eqz v0, :cond_2

    .line 8825
    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarCustomHeight:I

    .line 8827
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 8830
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput p1, v2, v3

    .line 8829
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    aput p1, v2, v3

    .line 8828
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput p1, v2, v3

    .line 8827
    aput p1, v0, v1

    .line 8832
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 8835
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput p1, v2, v3

    .line 8834
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    aput p1, v2, v3

    .line 8833
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput p1, v2, v3

    .line 8832
    aput p1, v0, v1

    .line 8809
    :cond_2
    return-void
.end method

.method public checkLaunchSetting()I
    .locals 4

    .prologue
    .line 6632
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    const-string v2, "active_key_on_lockscreen"

    const/4 v3, 0x0

    invoke-static {v1, v2, v3}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v0

    .line 6633
    .local v0, "state":I
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "checkLaunchSetting state = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6634
    return v0
.end method

.method public completeToggleSplitScreen()V
    .locals 1

    .prologue
    .line 8949
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->completeToggleSplitScreen()V

    .line 8947
    return-void
.end method

.method public downloadForSGA(Ljava/lang/String;)V
    .locals 4
    .param p1, "pkgUri"    # Ljava/lang/String;

    .prologue
    .line 6124
    sget-boolean v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v2, :cond_0

    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "try download SGA"

    invoke-static {v2, v3}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6126
    :cond_0
    :try_start_0
    new-instance v1, Landroid/content/Intent;

    invoke-direct {v1}, Landroid/content/Intent;-><init>()V

    .line 6127
    .local v1, "intent":Landroid/content/Intent;
    invoke-static {p1}, Landroid/net/Uri;->parse(Ljava/lang/String;)Landroid/net/Uri;

    move-result-object v2

    invoke-virtual {v1, v2}, Landroid/content/Intent;->setData(Landroid/net/Uri;)Landroid/content/Intent;

    .line 6128
    const v2, 0x30000020

    invoke-virtual {v1, v2}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 6130
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-object v3, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2, v1, v3}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 6123
    .end local v1    # "intent":Landroid/content/Intent;
    :goto_0
    return-void

    .line 6131
    :catch_0
    move-exception v0

    .line 6133
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    sget-boolean v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v2, :cond_1

    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Samsung apps is not installed. so you are moving to Samsung apps download page."

    invoke-static {v2, v3}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6134
    :cond_1
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->downloadForSamsungApps()V

    goto :goto_0
.end method

.method public downloadForSamsungApps()V
    .locals 5

    .prologue
    .line 6108
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_0

    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "try download SamsungApps"

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6109
    :cond_0
    const-string v2, "http://apps.samsung.com/mw/apk_en.as"

    .line 6111
    .local v2, "url":Ljava/lang/String;
    :try_start_0
    new-instance v1, Landroid/content/Intent;

    const-string v3, "android.intent.action.VIEW"

    invoke-static {v2}, Landroid/net/Uri;->parse(Ljava/lang/String;)Landroid/net/Uri;

    move-result-object v4

    invoke-direct {v1, v3, v4}, Landroid/content/Intent;-><init>(Ljava/lang/String;Landroid/net/Uri;)V

    .line 6113
    .local v1, "intent":Landroid/content/Intent;
    const-string v3, "android.intent.category.BROWSABLE"

    invoke-virtual {v1, v3}, Landroid/content/Intent;->addCategory(Ljava/lang/String;)Landroid/content/Intent;

    .line 6114
    const v3, 0x30000020

    invoke-virtual {v1, v3}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 6116
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-object v4, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v3, v1, v4}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 6107
    .end local v1    # "intent":Landroid/content/Intent;
    :goto_0
    return-void

    .line 6117
    :catch_0
    move-exception v0

    .line 6119
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "There is not browsable apps for samsungapps download"

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method public dump(Ljava/lang/String;Ljava/io/PrintWriter;[Ljava/lang/String;)V
    .locals 1
    .param p1, "prefix"    # Ljava/lang/String;
    .param p2, "pw"    # Ljava/io/PrintWriter;
    .param p3, "args"    # [Ljava/lang/String;

    .prologue
    .line 5648
    const-string v0, ""

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5649
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "--- Samsung Window Policy ---"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5650
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSafeModeReason="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSafeModeReason:Ljava/lang/String;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5651
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFakeFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_0

    .line 5652
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mFakeFocusedWindow="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    .line 5653
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFakeFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 5655
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_1

    .line 5656
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mGameToolWindow="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    .line 5657
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 5660
    :cond_1
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mForceEnabledSystemUiFlags="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5661
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mUnsettingSystemUiFlags="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUnsettingSystemUiFlags:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5663
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mPenState="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenState:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5664
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mPerformEditAfterScreenCapture="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPerformEditAfterScreenCapture:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Z)V

    .line 5665
    const-string v0, " mHasFlashAnnotateComponent="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFlashAnnotateComponent:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5666
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mIsSafetyAssuranceEnabled="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSafetyAssuranceEnabled:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Z)V

    .line 5667
    const-string v0, " mIsUseAccessControl="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsUseAccessControl:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Z)V

    .line 5668
    const-string v0, " mIsEnabledAccessControl="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5669
    const-string v0, " mIsEasyModeEnabled="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEasyModeEnabled:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Z)V

    .line 5670
    const-string v0, " mIsDockHomeEnabled="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDockHomeEnabled:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5671
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mDoubleTapLaunchBehavior="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5672
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mDoubleTapEnabled="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapEnabled:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Z)V

    .line 5673
    const-string v0, " mAvailableDoublTapLaunchCommand="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableDoublTapLaunchCommand:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5674
    const-string v0, "mDoubleTapLaunchUser="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchUser:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5675
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mComponentNameOfDoubleTapLaunchCommandIntent="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 5676
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mDirectAccessBehavior="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDirectAccessBehavior:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5677
    const-string v0, " mAvailableVoiceCommand="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableVoiceCommand:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Z)V

    .line 5678
    const-string v0, " mAvailableOneTouchReport="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableOneTouchReport:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5679
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mHasFakeMenuKeyRecent="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyRecent:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Z)V

    .line 5680
    const-string v0, " mHasFakeMenuKeyBack="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyBack:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5682
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSideSyncSourcePresentationActived="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSideSyncSourcePresentationActived:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5685
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mIsGearVrDocked="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsGearVrDocked:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5688
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mIsWakeupPrevention="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakeupPrevention:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5689
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mWakeupPreventionPackages="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeupPreventionPackages:Ljava/util/HashSet;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 5690
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mLastRequiredFreezeRotation="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastRequiredFreezeRotation:Ljava/lang/String;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5691
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSleepReason="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSleepReason:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5693
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mBixbyComponent="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyComponent:Landroid/content/ComponentName;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 5695
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCombinationKeyManager:Lcom/android/server/policy/CombinationKeyManager;

    invoke-virtual {v0, p1, p2}, Lcom/android/server/policy/CombinationKeyManager;->dump(Ljava/lang/String;Ljava/io/PrintWriter;)V

    .line 5696
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v0, p1, p2}, Lcom/android/server/policy/SystemKeyManager;->dump(Ljava/lang/String;Ljava/io/PrintWriter;)V

    .line 5697
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {p1, p2, p3, v0}, Lcom/android/server/policy/SamsungPolicyProperties;->dump(Ljava/lang/String;Ljava/io/PrintWriter;[Ljava/lang/String;Landroid/content/Context;)V

    .line 5700
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mCoverCloseRotation="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverCloseRotation:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5701
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mIsSupportFlipCover="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportFlipCover:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5702
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mIsSupportSViewCover="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5703
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mHideSViewCoverWindowState="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 5704
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "OriginalmUnrestrictedScreen=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5705
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5706
    const-string v0, ") "

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenWidth:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5707
    const-string v0, "x"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenHeight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5708
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mOriginalStableFullscreen=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5709
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5710
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5711
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5712
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mOriginalStable=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5713
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5714
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5715
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5716
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mOriginalSystem=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5717
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5718
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5719
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5720
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mOriginalDock=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5721
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5722
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5723
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5724
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSViewCoverUnrestrictedScreen=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5725
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5726
    const-string v0, ") "

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenWidth:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5727
    const-string v0, "x"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenHeight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5728
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSViewCoverStableFullscreen=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5729
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5730
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5731
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5732
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSViewCoverStable=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5733
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5734
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5735
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5736
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSViewCoverSystem=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5737
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5738
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5739
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5740
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mSViewCoverDock=("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockLeft:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5741
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockTop:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5742
    const-string v0, ")-("

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockRight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 5743
    const-string v0, ","

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockBottom:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(I)V

    const-string v0, ")"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5746
    const-string v0, ""

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5747
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mMobileKeyboardEnabled="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Z)V

    .line 5748
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mMobileKeyboardHeight="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(I)V

    .line 5751
    const-string v0, ""

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 5752
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mDefaultMaxAspect="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDefaultMaxAspect:F

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(F)V

    .line 5753
    invoke-virtual {p2, p1}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    const-string v0, "mCurrentAspect="

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentAspect:F

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(F)V

    .line 5647
    return-void
.end method

.method public endCallByGamekey()Z
    .locals 6

    .prologue
    .line 6032
    const/4 v1, 0x0

    .line 6034
    .local v1, "hungUp":Z
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getTelecommService()Landroid/telecom/TelecomManager;

    move-result-object v2

    .line 6035
    .local v2, "telecomManager":Landroid/telecom/TelecomManager;
    if-eqz v2, :cond_0

    invoke-virtual {v2}, Landroid/telecom/TelecomManager;->isRinging()Z

    move-result v4

    if-eqz v4, :cond_0

    .line 6036
    invoke-virtual {v2}, Landroid/telecom/TelecomManager;->endCall()Z

    move-result v1

    .line 6040
    .end local v1    # "hungUp":Z
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getVoIPInterfaceService()Landroid/os/IVoIPInterface;

    move-result-object v3

    .line 6042
    .local v3, "voipInterfaceService":Landroid/os/IVoIPInterface;
    if-eqz v3, :cond_1

    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isVoIPRinging()Z

    move-result v4

    if-eqz v4, :cond_1

    .line 6043
    invoke-interface {v3}, Landroid/os/IVoIPInterface;->hangupVoIPCall()Z
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    move-result v4

    or-int/2addr v1, v4

    .line 6048
    :cond_1
    :goto_0
    return v1

    .line 6045
    :catch_0
    move-exception v0

    .line 6046
    .local v0, "ex":Landroid/os/RemoteException;
    sget-boolean v4, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v4, :cond_1

    const-string v4, "SamsungPhoneWindowManager"

    const-string v5, "ITelephony2 threw RemoteException"

    invoke-static {v4, v5, v0}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_0
.end method

.method public finishPostLayoutPolicyLw(I)I
    .locals 12
    .param p1, "changes"    # I

    .prologue
    const/4 v7, 0x1

    const/4 v8, 0x0

    .line 7908
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportAndAttachedSViewCover()Z

    move-result v9

    if-eqz v9, :cond_3

    .line 7909
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-boolean v9, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_LAYOUT:Z

    if-eqz v9, :cond_0

    .line 7910
    const-string v9, "SamsungPhoneWindowManager"

    new-instance v10, Ljava/lang/StringBuilder;

    invoke-direct {v10}, Ljava/lang/StringBuilder;-><init>()V

    const-string v11, "finishPostLayoutPolicyLw: mHideSViewCover="

    invoke-virtual {v10, v11}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    .line 7911
    iget v11, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    .line 7910
    invoke-virtual {v10, v11}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v10

    invoke-static {v9, v10}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 7913
    :cond_0
    const/4 v5, 0x0

    .line 7914
    .local v5, "result":I
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getCoverManager()Lcom/samsung/android/cover/ICoverManager;

    move-result-object v1

    .line 7915
    .local v1, "coverManager":Lcom/samsung/android/cover/ICoverManager;
    if-eqz v1, :cond_3

    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, v9, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v9, :cond_3

    .line 7916
    iget v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    if-nez v9, :cond_1

    .line 7918
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v9, v9, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-nez v9, :cond_7

    .line 7919
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v9, v9, Lcom/samsung/android/cover/CoverState;->type:I

    const/16 v10, 0xff

    if-eq v9, v10, :cond_7

    .line 7920
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isRingingOrOffhook()Z

    move-result v9

    .line 7918
    if-eqz v9, :cond_7

    .line 7920
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isTphoneRelaxMode()Z

    move-result v9

    .line 7916
    if-eqz v9, :cond_7

    .line 7922
    :cond_1
    :try_start_0
    iget-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastCoverAppCovered:Z

    if-nez v9, :cond_2

    .line 7923
    const/4 v9, 0x1

    invoke-interface {v1, v9}, Lcom/samsung/android/cover/ICoverManager;->onCoverAppCovered(Z)I

    move-result v5

    .line 7924
    and-int/lit8 v9, v5, 0x10

    if-eqz v9, :cond_2

    .line 7925
    const/4 v9, 0x1

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastCoverAppCovered:Z
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 7931
    :cond_2
    :goto_0
    invoke-virtual {p0, v5}, Lcom/android/server/policy/SamsungPhoneWindowManager;->processSViewCoverSetHiddenResultLw(I)Z

    move-result v9

    if-eqz v9, :cond_3

    .line 7932
    or-int/lit8 p1, p1, 0x1

    .line 7952
    .end local v1    # "coverManager":Lcom/samsung/android/cover/ICoverManager;
    .end local v5    # "result":I
    :cond_3
    :goto_1
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, v9, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v9, :cond_6

    .line 7953
    const/4 v6, 0x0

    .line 7954
    .local v6, "size":I
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, v9, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v9}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v9

    invoke-interface {v9}, Lcom/samsung/android/view/IWindowStateBridge;->getAspectRatioFrame()Landroid/graphics/Rect;

    move-result-object v0

    .line 7955
    .local v0, "aspectFrame":Landroid/graphics/Rect;
    new-instance v2, Landroid/graphics/Point;

    invoke-direct {v2}, Landroid/graphics/Point;-><init>()V

    .line 7956
    .local v2, "displaySize":Landroid/graphics/Point;
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, v9, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    invoke-virtual {v9, v2}, Landroid/view/Display;->getRealSize(Landroid/graphics/Point;)V

    .line 7957
    if-eqz v0, :cond_a

    .line 7958
    iget v9, v0, Landroid/graphics/Rect;->top:I

    if-nez v9, :cond_a

    iget v9, v0, Landroid/graphics/Rect;->left:I

    if-eqz v9, :cond_4

    iget v9, v0, Landroid/graphics/Rect;->right:I

    iget v10, v2, Landroid/graphics/Point;->x:I

    if-ne v9, v10, :cond_9

    :cond_4
    :goto_2
    move v4, v7

    .line 7959
    .local v4, "needToShowButtonView":Z
    :goto_3
    if-eqz v4, :cond_b

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v7, :cond_5

    .line 7537
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarPosition:I

    packed-switch v7, :pswitch_data_0

    .line 7971
    :goto_4
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSamsungWindowManager:Lcom/android/server/wm/IWindowManagerServiceBridge;

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarPosition:I

    .line 7972
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, v9, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v9}, Landroid/view/WindowManagerPolicy$WindowState;->getOwningPackage()Ljava/lang/String;

    move-result-object v9

    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v10, v10, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v10}, Landroid/view/WindowManagerPolicy$WindowState;->getOwningUid()I

    move-result v10

    .line 7971
    invoke-interface {v7, v8, v6, v9, v10}, Lcom/android/server/wm/IWindowManagerServiceBridge;->showConventionalModeChangeRatioButton(IILjava/lang/String;I)V

    .line 7974
    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangeRatioBarPosition:I

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarPosition:I

    if-eq v7, v8, :cond_5

    .line 7975
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarPosition:I

    iput v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangeRatioBarPosition:I

    .line 7976
    or-int/lit8 p1, p1, 0x1

    .line 7981
    :cond_5
    :goto_5
    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangeRatioBarSize:I

    if-eq v7, v6, :cond_6

    .line 7982
    iput v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangeRatioBarSize:I

    .line 7983
    or-int/lit8 p1, p1, 0x1

    .line 7987
    .end local v0    # "aspectFrame":Landroid/graphics/Rect;
    .end local v2    # "displaySize":Landroid/graphics/Point;
    .end local v4    # "needToShowButtonView":Z
    .end local v6    # "size":I
    :cond_6
    return p1

    .line 7928
    .restart local v1    # "coverManager":Lcom/samsung/android/cover/ICoverManager;
    .restart local v5    # "result":I
    :catch_0
    move-exception v3

    .line 7929
    .local v3, "e":Landroid/os/RemoteException;
    invoke-virtual {v3}, Landroid/os/RemoteException;->printStackTrace()V

    goto :goto_0

    .line 7936
    .end local v3    # "e":Landroid/os/RemoteException;
    :cond_7
    :try_start_1
    iget-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastCoverAppCovered:Z

    if-eqz v9, :cond_8

    .line 7937
    const/4 v9, 0x0

    invoke-interface {v1, v9}, Lcom/samsung/android/cover/ICoverManager;->onCoverAppCovered(Z)I

    move-result v5

    .line 7938
    and-int/lit8 v9, v5, 0x20

    if-eqz v9, :cond_8

    .line 7939
    const/4 v9, 0x0

    iput-boolean v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastCoverAppCovered:Z
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_1

    .line 7945
    :cond_8
    :goto_6
    invoke-virtual {p0, v5}, Lcom/android/server/policy/SamsungPhoneWindowManager;->processSViewCoverSetHiddenResultLw(I)Z

    move-result v9

    if-eqz v9, :cond_3

    .line 7946
    or-int/lit8 p1, p1, 0x1

    goto/16 :goto_1

    .line 7942
    :catch_1
    move-exception v3

    .line 7943
    .restart local v3    # "e":Landroid/os/RemoteException;
    invoke-virtual {v3}, Landroid/os/RemoteException;->printStackTrace()V

    goto :goto_6

    .end local v1    # "coverManager":Lcom/samsung/android/cover/ICoverManager;
    .end local v3    # "e":Landroid/os/RemoteException;
    .end local v5    # "result":I
    .restart local v0    # "aspectFrame":Landroid/graphics/Rect;
    .restart local v2    # "displaySize":Landroid/graphics/Point;
    .restart local v6    # "size":I
    :cond_9
    move v7, v8

    .line 7958
    goto :goto_2

    :cond_a
    move v4, v8

    .line 7957
    goto :goto_3

    .line 7962
    .restart local v4    # "needToShowButtonView":Z
    :pswitch_0
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v7}, Landroid/view/WindowManagerPolicy$WindowState;->getFrameLw()Landroid/graphics/Rect;

    move-result-object v7

    iget v7, v7, Landroid/graphics/Rect;->top:I

    iget v8, v0, Landroid/graphics/Rect;->bottom:I

    sub-int v6, v7, v8

    .line 7963
    goto :goto_4

    .line 7965
    :pswitch_1
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v7}, Landroid/view/WindowManagerPolicy$WindowState;->getFrameLw()Landroid/graphics/Rect;

    move-result-object v7

    iget v7, v7, Landroid/graphics/Rect;->left:I

    iget v8, v0, Landroid/graphics/Rect;->right:I

    sub-int v6, v7, v8

    .line 7966
    goto :goto_4

    .line 7968
    :pswitch_2
    iget v7, v0, Landroid/graphics/Rect;->left:I

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v8}, Landroid/view/WindowManagerPolicy$WindowState;->getFrameLw()Landroid/graphics/Rect;

    move-result-object v8

    iget v8, v8, Landroid/graphics/Rect;->right:I

    sub-int v6, v7, v8

    .line 7969
    goto/16 :goto_4

    .line 7979
    :cond_b
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSamsungWindowManager:Lcom/android/server/wm/IWindowManagerServiceBridge;

    invoke-interface {v7}, Lcom/android/server/wm/IWindowManagerServiceBridge;->hideConventionalModeChangeRatioButton()V

    goto :goto_5

    .line 7960
    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
        :pswitch_2
    .end packed-switch
.end method

.method public finishScreenTurningOn()V
    .locals 3

    .prologue
    const/4 v2, 0x0

    .line 6710
    sget-boolean v0, Lcom/android/server/policy/TspStateManagerPolicy;->FEATURE_ENABLED:Z

    if-eqz v0, :cond_0

    .line 6711
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_0

    .line 6712
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getTspStateManagerPolicy()Lcom/android/server/policy/TspStateManagerPolicy;

    move-result-object v0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0, v1, v2}, Lcom/android/server/policy/TspStateManagerPolicy;->updateWindowPolicy(Landroid/view/WindowManagerPolicy$WindowState;Ljava/lang/String;)V

    .line 6715
    :cond_0
    const/4 v0, -0x1

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSleepReason:I

    .line 6709
    return-void
.end method

.method public finishedGoingToSleep(I)V
    .locals 0
    .param p1, "why"    # I

    .prologue
    .line 9172
    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSleepReason:I

    .line 9171
    return-void
.end method

.method public focusChangedLw()V
    .locals 4

    .prologue
    const/4 v3, 0x0

    .line 6675
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v1, :cond_0

    .line 6676
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    invoke-virtual {v1}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v1

    invoke-interface {v1}, Ljava/lang/CharSequence;->toString()Ljava/lang/String;

    move-result-object v0

    .line 6677
    .local v0, "focusedWindow":Ljava/lang/String;
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v1, v0}, Lcom/android/server/policy/SystemKeyManager;->updateFocusedWindow(Ljava/lang/String;)V

    .line 6679
    sget-boolean v1, Lcom/android/server/policy/TspStateManagerPolicy;->FEATURE_ENABLED:Z

    if-eqz v1, :cond_0

    .line 6680
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 6681
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getTspStateManagerPolicy()Lcom/android/server/policy/TspStateManagerPolicy;

    move-result-object v1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1, v2, v3}, Lcom/android/server/policy/TspStateManagerPolicy;->updateWindowPolicy(Landroid/view/WindowManagerPolicy$WindowState;Ljava/lang/String;)V

    .line 6674
    .end local v0    # "focusedWindow":Ljava/lang/String;
    :cond_0
    return-void
.end method

.method public freezeRotation(I)V
    .locals 4
    .param p1, "rotation"    # I

    .prologue
    .line 4942
    :try_start_0
    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "rotation:"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-static {p1}, Ljava/lang/Integer;->toString(I)Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, ". package:"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    .line 4943
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v2

    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v3

    invoke-interface {v2, v3}, Landroid/app/IActivityManager;->getPackageFromAppProcesses(I)Ljava/lang/String;

    move-result-object v2

    .line 4942
    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastRequiredFreezeRotation:Ljava/lang/String;
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 4940
    :goto_0
    return-void

    .line 4944
    :catch_0
    move-exception v0

    .local v0, "e":Landroid/os/RemoteException;
    goto :goto_0
.end method

.method public getAppsShowWhenLockedLw()Ljava/util/ArrayList;
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/ArrayList",
            "<",
            "Landroid/view/IApplicationToken;",
            ">;"
        }
    .end annotation

    .prologue
    .line 5613
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppsShowWhenLocked:Ljava/util/ArrayList;

    return-object v0
.end method

.method getAudioManager()Landroid/media/AudioManager;
    .locals 3

    .prologue
    .line 5071
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mServiceAquireLock:Ljava/lang/Object;

    monitor-enter v1

    .line 5072
    :try_start_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAudioManager:Landroid/media/AudioManager;

    if-nez v0, :cond_0

    .line 5073
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    .line 5074
    const-string v2, "audio"

    .line 5073
    invoke-virtual {v0, v2}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/media/AudioManager;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAudioManager:Landroid/media/AudioManager;

    .line 5076
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAudioManager:Landroid/media/AudioManager;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    return-object v0

    .line 5071
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public getChangeRatioBarSize()I
    .locals 1

    .prologue
    .line 9008
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangeRatioBarSize:I

    return v0
.end method

.method public declared-synchronized getCoverManager()Lcom/samsung/android/cover/ICoverManager;
    .locals 2

    .prologue
    monitor-enter p0

    .line 5292
    :try_start_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    if-nez v0, :cond_0

    .line 5293
    const-string v0, "cover"

    invoke-static {v0}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v0

    invoke-static {v0}, Lcom/samsung/android/cover/ICoverManager$Stub;->asInterface(Landroid/os/IBinder;)Lcom/samsung/android/cover/ICoverManager;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    .line 5294
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    if-nez v0, :cond_0

    .line 5295
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "warning: no COVER_MANAGER_SERVICE"

    invoke-static {v0, v1}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 5298
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit p0

    return-object v0

    :catchall_0
    move-exception v0

    monitor-exit p0

    throw v0
.end method

.method public getCoverState()Lcom/samsung/android/cover/CoverState;
    .locals 2

    .prologue
    const/4 v1, 0x0

    .line 5451
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v0, :cond_0

    .line 5452
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    return-object v0

    .line 5454
    :cond_0
    return-object v1
.end method

.method public getCoverStateSwitch()Z
    .locals 1

    .prologue
    .line 5444
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v0, :cond_0

    .line 5445
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v0}, Lcom/samsung/android/cover/CoverState;->getSwitchState()Z

    move-result v0

    return v0

    .line 5447
    :cond_0
    const/4 v0, 0x1

    return v0
.end method

.method public getCurrentAspect()F
    .locals 1

    .prologue
    .line 8964
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentAspect:F

    return v0
.end method

.method public getCustomBootMsgDialog()Lcom/samsung/android/app/CustomBootMsgDialog;
    .locals 4

    .prologue
    .line 8795
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v2

    .line 8796
    const v3, 0x11200db

    .line 8795
    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v2

    if-eqz v2, :cond_0

    .line 8796
    const/4 v1, 0x0

    .line 8797
    .local v1, "supportCustomDialog":Z
    :goto_0
    const/4 v0, 0x0

    .line 8798
    .local v0, "customBootMsgDialog":Lcom/samsung/android/app/CustomBootMsgDialog;
    if-eqz v1, :cond_2

    .line 8799
    new-instance v0, Lcom/samsung/android/app/CustomBootMsgDialog;

    .end local v0    # "customBootMsgDialog":Lcom/samsung/android/app/CustomBootMsgDialog;
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v2

    invoke-virtual {v2}, Landroid/content/pm/PackageManager;->isUpgrade()Z

    move-result v2

    if-eqz v2, :cond_1

    .line 8800
    const v2, 0x10403c5

    .line 8799
    :goto_1
    invoke-direct {v0, v3, v2}, Lcom/samsung/android/app/CustomBootMsgDialog;-><init>(Landroid/content/Context;I)V

    .line 8802
    .local v0, "customBootMsgDialog":Lcom/samsung/android/app/CustomBootMsgDialog;
    invoke-virtual {v0}, Lcom/samsung/android/app/CustomBootMsgDialog;->show()V

    .line 8803
    return-object v0

    .line 8796
    .end local v0    # "customBootMsgDialog":Lcom/samsung/android/app/CustomBootMsgDialog;
    .end local v1    # "supportCustomDialog":Z
    :cond_0
    const/4 v1, 0x1

    goto :goto_0

    .line 8801
    .restart local v1    # "supportCustomDialog":Z
    :cond_1
    const v2, 0x10403c6

    goto :goto_1

    .line 8805
    .local v0, "customBootMsgDialog":Lcom/samsung/android/app/CustomBootMsgDialog;
    :cond_2
    const/4 v2, 0x0

    return-object v2
.end method

.method public getDefaultMaxAspect()F
    .locals 1

    .prologue
    .line 8960
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDefaultMaxAspect:F

    return v0
.end method

.method public getHandler()Landroid/os/Handler;
    .locals 1

    .prologue
    .line 1287
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    return-object v0
.end method

.method public getHideSViewCover()I
    .locals 1

    .prologue
    .line 7099
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    return v0
.end method

.method public getHideSViewCoverWindowState()Landroid/view/WindowManagerPolicy$WindowState;
    .locals 1

    .prologue
    .line 7091
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    return-object v0
.end method

.method public getKeycodeOnNavigationBar(II)I
    .locals 4
    .param p1, "x"    # I
    .param p2, "y"    # I

    .prologue
    .line 6272
    const/4 v0, -0x1

    .line 6273
    .local v0, "ret":I
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v1, v1, Landroid/graphics/Rect;->left:I

    if-lt p1, v1, :cond_0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v1, v1, Landroid/graphics/Rect;->right:I

    if-ge p1, v1, :cond_0

    .line 6274
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v1, v1, Landroid/graphics/Rect;->top:I

    if-lt p2, v1, :cond_0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v1, v1, Landroid/graphics/Rect;->bottom:I

    if-ge p2, v1, :cond_0

    .line 6275
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "getKeycodeOnNavigationBar() get back key"

    invoke-static {v1, v2}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 6276
    const/4 v0, 0x4

    .line 6279
    :cond_0
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "getKeycodeOnNavigationBar() x="

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string v3, ", y="

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string v3, ", ret="

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6280
    const-string v3, ", left="

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6280
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v3, v3, Landroid/graphics/Rect;->left:I

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6280
    const-string v3, ",  top="

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6280
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v3, v3, Landroid/graphics/Rect;->top:I

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6281
    const-string v3, ", right="

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6281
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v3, v3, Landroid/graphics/Rect;->right:I

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6281
    const-string v3, ", bottom="

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 6281
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyRect:Landroid/graphics/Rect;

    iget v3, v3, Landroid/graphics/Rect;->bottom:I

    .line 6279
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 6283
    return v0
.end method

.method public getNavigationBarCustomHeight()I
    .locals 1

    .prologue
    .line 8840
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarCustomHeight:I

    return v0
.end method

.method public getNavigationBarHeight()I
    .locals 1

    .prologue
    .line 8913
    sget-boolean v0, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v0, :cond_0

    .line 8914
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    return v0

    .line 8916
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public getNonDecorDisplayHeight(III)I
    .locals 1
    .param p1, "fullWidth"    # I
    .param p2, "fullHeight"    # I
    .param p3, "displayId"    # I

    .prologue
    .line 7281
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v0, :cond_0

    .line 7282
    if-ge p1, p2, :cond_0

    .line 7283
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    sub-int/2addr p2, v0

    .line 7288
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeBarVisible()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 7289
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeEnabled()Z

    move-result v0

    .line 7288
    if-eqz v0, :cond_1

    .line 7290
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v0

    invoke-interface {v0}, Lcom/samsung/android/view/IWindowStateBridge;->getDisplayId()I

    move-result v0

    if-ne v0, p3, :cond_1

    .line 7291
    if-ge p1, p2, :cond_1

    .line 7292
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr p2, v0

    .line 7296
    :cond_1
    return p2
.end method

.method public getNonDecorDisplayWidth(III)I
    .locals 1
    .param p1, "fullWidth"    # I
    .param p2, "fullHeight"    # I
    .param p3, "displayId"    # I

    .prologue
    .line 7261
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v0, :cond_0

    .line 7262
    if-le p1, p2, :cond_0

    .line 7263
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    sub-int/2addr p1, v0

    .line 7268
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeBarVisible()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 7269
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeEnabled()Z

    move-result v0

    .line 7268
    if-eqz v0, :cond_1

    .line 7270
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v0

    invoke-interface {v0}, Lcom/samsung/android/view/IWindowStateBridge;->getDisplayId()I

    move-result v0

    if-ne v0, p3, :cond_1

    .line 7271
    if-le p1, p2, :cond_1

    .line 7272
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr p1, v0

    .line 7276
    :cond_1
    return p1
.end method

.method public getProKioskManager()Lcom/samsung/android/knox/custom/ProKioskManager;
    .locals 1

    .prologue
    .line 8741
    invoke-static {}, Lcom/samsung/android/knox/custom/ProKioskManager;->getInstance()Lcom/samsung/android/knox/custom/ProKioskManager;

    move-result-object v0

    return-object v0
.end method

.method public getRotationLockOrientation()I
    .locals 2

    .prologue
    .line 9013
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mUserRotation:I

    invoke-virtual {v0, v1}, Lcom/android/server/policy/PhoneWindowManager;->isAnyPortrait(I)Z

    move-result v0

    if-eqz v0, :cond_0

    const/4 v0, 0x1

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x2

    goto :goto_0
.end method

.method public getSViewCoverHeight(Landroid/view/DisplayInfo;)I
    .locals 1
    .param p1, "info"    # Landroid/view/DisplayInfo;

    .prologue
    .line 5437
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v0, :cond_0

    .line 5438
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->heightPixel:I

    return v0

    .line 5440
    :cond_0
    iget v0, p1, Landroid/view/DisplayInfo;->appHeight:I

    return v0
.end method

.method public getSViewCoverWidth(Landroid/view/DisplayInfo;)I
    .locals 1
    .param p1, "info"    # Landroid/view/DisplayInfo;

    .prologue
    .line 5430
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v0, :cond_0

    .line 5431
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v0, v0, Lcom/samsung/android/cover/CoverState;->widthPixel:I

    return v0

    .line 5433
    :cond_0
    iget v0, p1, Landroid/view/DisplayInfo;->appWidth:I

    return v0
.end method

.method public getStatusBarHeight()I
    .locals 1

    .prologue
    .line 8903
    sget-boolean v0, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v0, :cond_0

    .line 8904
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBarHeight:I

    return v0

    .line 8906
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public getSurfaceLayerCarModeBar()I
    .locals 1

    .prologue
    .line 8370
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->getSurfaceLayer()I

    move-result v0

    return v0
.end method

.method public getTaskBarHeightInDesktopMode()I
    .locals 1

    .prologue
    .line 8656
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTaskBarHeightInDesktopMode:I

    return v0
.end method

.method getTelecommService()Landroid/telecom/TelecomManager;
    .locals 2

    .prologue
    .line 5067
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v1, "telecom"

    invoke-virtual {v0, v1}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/telecom/TelecomManager;

    return-object v0
.end method

.method public getVoIPInterfaceService()Landroid/os/IVoIPInterface;
    .locals 3

    .prologue
    .line 5987
    const-string v1, "voip"

    invoke-static {v1}, Landroid/os/ServiceManager;->checkService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v1

    .line 5986
    invoke-static {v1}, Landroid/os/IVoIPInterface$Stub;->asInterface(Landroid/os/IBinder;)Landroid/os/IVoIPInterface;

    move-result-object v0

    .line 5988
    .local v0, "voipInterfaceService":Landroid/os/IVoIPInterface;
    if-nez v0, :cond_0

    .line 5989
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Unable to find IVoIPInterface interface."

    invoke-static {v1, v2}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 5991
    :cond_0
    return-object v0
.end method

.method public handleLongPressOnHome()Z
    .locals 4

    .prologue
    const/4 v3, 0x1

    .line 3804
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isScreenOffOnLongPressHome()Z

    move-result v1

    if-eqz v1, :cond_1

    .line 3805
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_0

    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress block in KNOX"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3806
    :cond_0
    return v3

    .line 3808
    :cond_1
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    if-eqz v1, :cond_3

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    invoke-virtual {v1}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v1

    if-eqz v1, :cond_3

    .line 3809
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_2

    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress block in ProKiosk Mode"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3810
    :cond_2
    return v3

    .line 3816
    :cond_3
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isVzwSetupRunning()Z

    move-result v1

    if-eqz v1, :cond_4

    .line 3817
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress block when Verizon Setup Wizard Running"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3818
    return v3

    .line 3824
    :cond_4
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getTelecommService()Landroid/telecom/TelecomManager;

    move-result-object v0

    .line 3825
    .local v0, "telecomManager":Landroid/telecom/TelecomManager;
    if-eqz v0, :cond_6

    invoke-virtual {v0}, Landroid/telecom/TelecomManager;->isRinging()Z

    move-result v1

    if-eqz v1, :cond_6

    .line 3826
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_5

    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress block in Ringing"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3827
    :cond_5
    return v3

    .line 3830
    :cond_6
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isVoIPRinging()Z

    move-result v1

    if-eqz v1, :cond_8

    .line 3831
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_7

    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress block in VoIPRinging"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3832
    :cond_7
    return v3

    .line 3837
    :cond_8
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    if-eqz v1, :cond_9

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v1}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->isEmergencyMode(Landroid/content/Context;)Z

    move-result v1

    if-eqz v1, :cond_9

    .line 3838
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress block in emergency & upsm mode"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3839
    return v3

    .line 3844
    :cond_9
    const/4 v1, 0x3

    invoke-virtual {p0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isEnableAccessControl(I)Z

    move-result v1

    if-eqz v1, :cond_a

    .line 3845
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress blocked by Interaction control"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3846
    return v3

    .line 3850
    :cond_a
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v1

    if-nez v1, :cond_b

    .line 3851
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Home longpress block in UserSetup not complete"

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3852
    return v3

    .line 3855
    :cond_b
    const/4 v1, 0x0

    return v1
.end method

.method public handleLongPressOnMenu()V
    .locals 3

    .prologue
    const/4 v2, 0x0

    const/4 v1, 0x0

    .line 3864
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    invoke-virtual {v0}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 3865
    return-void

    .line 3870
    :cond_0
    const/4 v0, 0x1

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMenuConsumed:Z

    .line 3871
    invoke-virtual {p0, v2, v1, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z

    .line 3861
    return-void
.end method

.method public handleLongPressOnRecent()Z
    .locals 10

    .prologue
    const/4 v9, -0x2

    const/4 v7, 0x0

    const/4 v8, 0x1

    .line 3895
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isRecentAppStart()Z

    move-result v5

    if-eqz v5, :cond_0

    .line 3896
    iput-boolean v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRecentConsumed:Z

    .line 3897
    return v8

    .line 3902
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isLockTaskModeEnabled()Z

    move-result v5

    if-eqz v5, :cond_2

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isAccessiblityEnabled()Z

    move-result v5

    if-eqz v5, :cond_2

    .line 3904
    :try_start_0
    sget-boolean v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v5, :cond_1

    const-string v5, "SamsungPhoneWindowManager"

    const-string v6, "Recent longpress used in Lock task mode"

    invoke-static {v5, v6}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3905
    :cond_1
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v0

    .line 3906
    .local v0, "activityManager":Landroid/app/IActivityManager;
    invoke-interface {v0}, Landroid/app/IActivityManager;->stopSystemLockTaskMode()V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 3910
    .end local v0    # "activityManager":Landroid/app/IActivityManager;
    :goto_0
    return v8

    .line 3907
    :catch_0
    move-exception v1

    .line 3908
    .local v1, "e":Landroid/os/RemoteException;
    const-string v5, "SamsungPhoneWindowManager"

    const-string v6, "Unable to reach activity manager"

    invoke-static {v5, v6, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_0

    .line 3913
    .end local v1    # "e":Landroid/os/RemoteException;
    :cond_2
    iput-boolean v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRecentConsumed:Z

    .line 3923
    iget-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyRecent:Z

    if-eqz v5, :cond_3

    .line 3925
    const/16 v5, 0x52

    invoke-direct {p0, v5}, Lcom/android/server/policy/SamsungPhoneWindowManager;->injectionKeyEvent(I)V

    .line 3926
    return v8

    .line 3930
    :cond_3
    sget-boolean v5, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v5, :cond_c

    .line 3931
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    .line 3932
    const-string v6, "db_split_screen_view_shortcut"

    .line 3931
    invoke-static {v5, v6, v7, v9}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v5

    if-ne v5, v8, :cond_5

    const/4 v4, 0x1

    .line 3933
    .local v4, "splitScreenViewEnabled":Z
    :goto_1
    sget-boolean v5, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SNAP_WINDOW_SUPPORT:Z

    if-eqz v5, :cond_7

    .line 3934
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    .line 3935
    const-string v6, "db_snap_window_shortcut"

    .line 3934
    invoke-static {v5, v6, v7, v9}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v5

    if-ne v5, v8, :cond_6

    const/4 v3, 0x1

    .line 3936
    .local v3, "snapWindowEnabled":Z
    :goto_2
    invoke-static {}, Landroid/app/ActivityManager;->supportsMultiWindow()Z

    move-result v2

    .line 3939
    .local v2, "multiWindowEnabled":Z
    iget-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v5, :cond_8

    if-nez v4, :cond_4

    if-eqz v3, :cond_8

    .line 3940
    :cond_4
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    new-instance v6, Lcom/android/server/policy/SamsungPhoneWindowManager$29;

    invoke-direct {v6, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$29;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual {v5, v6}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 3948
    return v8

    .line 3931
    .end local v2    # "multiWindowEnabled":Z
    .end local v3    # "snapWindowEnabled":Z
    .end local v4    # "splitScreenViewEnabled":Z
    :cond_5
    const/4 v4, 0x0

    .restart local v4    # "splitScreenViewEnabled":Z
    goto :goto_1

    .line 3934
    :cond_6
    const/4 v3, 0x0

    .restart local v3    # "snapWindowEnabled":Z
    goto :goto_2

    .line 3933
    .end local v3    # "snapWindowEnabled":Z
    :cond_7
    const/4 v3, 0x0

    .restart local v3    # "snapWindowEnabled":Z
    goto :goto_2

    .line 3952
    .restart local v2    # "multiWindowEnabled":Z
    :cond_8
    if-eqz v2, :cond_9

    if-nez v4, :cond_a

    .line 3954
    :cond_9
    const-string v5, "SamsungPhoneWindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string v7, "Recents L/P works like short press MW="

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v6

    const-string v7, ", L/P="

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v4}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3955
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v5}, Lcom/android/server/policy/PhoneWindowManager;->toggleRecentApps()V

    .line 3956
    return v8

    .line 3953
    :cond_a
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v5

    .line 3952
    if-nez v5, :cond_9

    .line 3959
    if-eqz v3, :cond_c

    .line 3960
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    invoke-interface {v5}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isSnapWindowRunning()Z

    move-result v5

    if-eqz v5, :cond_b

    .line 3961
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v5, :cond_b

    .line 3962
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v5}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v5

    if-eqz v5, :cond_b

    .line 3963
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v5}, Landroid/view/WindowManagerPolicy$WindowState;->getStackId()I

    move-result v5

    if-eqz v5, :cond_b

    .line 3964
    return v7

    .line 3967
    :cond_b
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    new-instance v6, Lcom/android/server/policy/SamsungPhoneWindowManager$30;

    invoke-direct {v6, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$30;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual {v5, v6}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 3977
    return v8

    .line 3983
    .end local v2    # "multiWindowEnabled":Z
    .end local v3    # "snapWindowEnabled":Z
    .end local v4    # "splitScreenViewEnabled":Z
    :cond_c
    return v7
.end method

.method public handleLongPressOnStar()V
    .locals 5

    .prologue
    .line 6141
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const-string v3, "reason"

    invoke-virtual {v2, v3}, Lcom/android/server/policy/PhoneWindowManager;->sendCloseSystemWindows(Ljava/lang/String;)V

    .line 6143
    new-instance v1, Landroid/content/Intent;

    const-string v2, "android.intent.action.MAIN"

    invoke-direct {v1, v2}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 6144
    .local v1, "intent":Landroid/content/Intent;
    const/high16 v2, 0x10000000

    invoke-virtual {v1, v2}, Landroid/content/Intent;->setFlags(I)Landroid/content/Intent;

    .line 6145
    const-string v2, "com.sec.android.applicationshortcut"

    const-string v3, "com.sec.android.applicationshortcut.MainviewActivity"

    invoke-virtual {v1, v2, v3}, Landroid/content/Intent;->setClassName(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;

    .line 6146
    if-eqz v1, :cond_0

    .line 6147
    const-string v2, "SamsungPhoneWindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "launch applicationshortcut "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6149
    :try_start_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-object v3, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2, v1, v3}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 6140
    :cond_0
    :goto_0
    return-void

    .line 6150
    :catch_0
    move-exception v0

    .line 6151
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "No activity to launch applicationshortcut."

    invoke-static {v2, v3, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_0
.end method

.method public hasCustomDoubleTapLaunchCommand()Z
    .locals 1

    .prologue
    .line 3546
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

    if-eqz v0, :cond_0

    const/4 v0, 0x1

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public ignorePowerKeyInEncrypting()Z
    .locals 7

    .prologue
    const/4 v6, 0x0

    .line 5818
    const-string v3, "vold.encrypt_progress"

    invoke-static {v3}, Landroid/os/SystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v2

    .line 5819
    .local v2, "state":Ljava/lang/String;
    invoke-virtual {v2}, Ljava/lang/String;->length()I

    move-result v3

    if-lez v3, :cond_0

    .line 5820
    const/4 v1, 0x0

    .line 5822
    .local v1, "progress":I
    :try_start_0
    invoke-static {v2}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    move-result v1

    .line 5826
    :goto_0
    if-lez v1, :cond_0

    const/16 v3, 0x64

    if-ge v1, v3, :cond_0

    .line 5827
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "Ignore Power Off Key!!"

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 5828
    const/4 v3, 0x1

    return v3

    .line 5823
    :catch_0
    move-exception v0

    .line 5824
    .local v0, "e":Ljava/lang/Exception;
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "Error parsing progress: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v0}, Ljava/lang/Exception;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    .line 5831
    .end local v0    # "e":Ljava/lang/Exception;
    .end local v1    # "progress":I
    :cond_0
    return v6
.end method

.method public init(Landroid/content/Context;Lcom/android/server/policy/PhoneWindowManager;Landroid/view/IWindowManager;Landroid/view/WindowManagerPolicy$WindowManagerFuncs;)V
    .locals 10
    .param p1, "context"    # Landroid/content/Context;
    .param p2, "phoneWindowManager"    # Lcom/android/server/policy/PhoneWindowManager;
    .param p3, "windowManager"    # Landroid/view/IWindowManager;
    .param p4, "windowManagerFuncs"    # Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    .prologue
    const/4 v5, 0x0

    const/4 v9, 0x0

    const/4 v8, 0x1

    .line 977
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    .line 978
    iput-object p2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    .line 979
    iput-object p3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManager:Landroid/view/IWindowManager;

    .line 980
    iput-object p4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    .line 982
    sget-object v0, Lcom/android/server/SamsungCoreServices$ServiceTag;->TAG_SAMSUNG_WINDOW_MANAGER_SERVICE:Lcom/android/server/SamsungCoreServices$ServiceTag;

    invoke-static {v0}, Lcom/android/server/SamsungCoreServices;->getService(Lcom/android/server/SamsungCoreServices$ServiceTag;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/IWindowManagerServiceBridge;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSamsungWindowManager:Lcom/android/server/wm/IWindowManagerServiceBridge;

    .line 984
    const-string v0, "power"

    invoke-virtual {p1, v0}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/os/PowerManager;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    .line 985
    const-string v0, "vibrator"

    invoke-virtual {p1, v0}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/os/Vibrator;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 986
    const-string v0, "phone"

    invoke-virtual {p1, v0}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/telephony/TelephonyManager;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    .line 987
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v1, "appops"

    invoke-virtual {v0, v1}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/app/AppOpsManager;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppOpsManager:Landroid/app/AppOpsManager;

    .line 988
    new-instance v0, Lcom/android/server/policy/CombinationKeyManager;

    invoke-direct {v0, p1, p2, p0}, Lcom/android/server/policy/CombinationKeyManager;-><init>(Landroid/content/Context;Lcom/android/server/policy/PhoneWindowManager;Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCombinationKeyManager:Lcom/android/server/policy/CombinationKeyManager;

    .line 989
    new-instance v0, Lcom/android/server/policy/SystemKeyManager;

    invoke-direct {v0, p2, p0}, Lcom/android/server/policy/SystemKeyManager;-><init>(Lcom/android/server/policy/PhoneWindowManager;Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    .line 990
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    .line 991
    const-string v1, "PhoneWindowManager.mTorchlightWakeLock"

    .line 990
    invoke-virtual {v0, v8, v1}, Landroid/os/PowerManager;->newWakeLock(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightWakeLock:Landroid/os/PowerManager$WakeLock;

    .line 993
    sget-boolean v0, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v0, :cond_0

    .line 994
    new-instance v0, Lcom/android/server/policy/NaviBarForceTouchManager;

    invoke-direct {v0, p1, p2, p0}, Lcom/android/server/policy/NaviBarForceTouchManager;-><init>(Landroid/content/Context;Lcom/android/server/policy/PhoneWindowManager;Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

    .line 997
    :cond_0
    new-instance v3, Landroid/content/IntentFilter;

    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 998
    .local v3, "filter":Landroid/content/IntentFilter;
    invoke-static {}, Landroid/os/Debug;->semIsProductDev()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 999
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "com.samsung.action.DEBUG_RECONFIGURE"

    invoke-direct {v3, v0}, Landroid/content/IntentFilter;-><init>(Ljava/lang/String;)V

    .line 1000
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mReconfigureDebugReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1004
    :cond_1
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1005
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "com.samsung.android.motion.SWEEP_LEFT"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1006
    const-string v0, "com.samsung.android.motion.SWEEP_RIGHT"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1007
    const-string v0, "com.samsung.android.motion.SWEEP_DOWN"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1008
    const-string v0, "com.samsung.android.motion.SWEEP_FULL_SCREEN"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1009
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSweepReceiver:Landroid/content/BroadcastReceiver;

    sget-object v2, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    const-string v4, "com.samsung.permission.PALM_MOTION"

    move-object v0, p1

    invoke-virtual/range {v0 .. v5}, Landroid/content/Context;->registerReceiverAsUser(Landroid/content/BroadcastReceiver;Landroid/os/UserHandle;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;

    .line 1011
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1012
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "com.samsung.android.capture.QuickPanelCapture"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1013
    const-string v0, "com.samsung.android.capture.DesktopCapture"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1014
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCaptureReceiver:Landroid/content/BroadcastReceiver;

    sget-object v2, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    const-string v4, "com.samsung.permission.CAPTURE"

    move-object v0, p1

    invoke-virtual/range {v0 .. v5}, Landroid/content/Context;->registerReceiverAsUser(Landroid/content/BroadcastReceiver;Landroid/os/UserHandle;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;

    .line 1017
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1018
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "android.intent.action.BOOT_COMPLETED"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1019
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBootCompleteReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1022
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1023
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "android.intent.action.PACKAGE_CHANGED"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1024
    const-string v0, "package"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addDataScheme(Ljava/lang/String;)V

    .line 1025
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPackageChangeReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1028
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1029
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "android.intent.action.PACKAGE_ADDED"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1030
    const-string v0, "android.intent.action.PACKAGE_REMOVED"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1031
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPackageAddOrRemoveReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1034
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1035
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "android.intent.action.USER_SWITCHED"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1036
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserSwitchReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1038
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1039
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "android.os.action.POWER_SAVE_MODE_CHANGED"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1040
    const-string v0, "android.os.action.POWER_SAVE_MODE_CHANGING"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1041
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerSaveChangeReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1043
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1044
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "android.intent.action.BATTERY_CHANGED"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1045
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBatteryChangeReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1047
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1048
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->ACTION_RESOLUTION_CHANGED:Ljava/lang/String;

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1049
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPolicyUpdateReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1053
    sget-object v0, Lcom/android/server/SamsungCoreServices$ServiceTag;->TAG_MULTIWINDOW_PHONE_WINDOW_MANAGER:Lcom/android/server/SamsungCoreServices$ServiceTag;

    invoke-static {v0, v8}, Lcom/android/server/SamsungCoreServices;->createService(Lcom/android/server/SamsungCoreServices$ServiceTag;Z)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    .line 1054
    sget-object v0, Lcom/android/server/SamsungCoreServices$ServiceTag;->TAG_MULTIWINDOW_MANAGER_INTERNAL:Lcom/android/server/SamsungCoreServices$ServiceTag;

    invoke-static {v0}, Lcom/android/server/SamsungCoreServices;->getService(Lcom/android/server/SamsungCoreServices$ServiceTag;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/IMultiWindowManagerInternalBridge;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiWindowManagerInternal:Lcom/android/server/wm/IMultiWindowManagerInternalBridge;

    .line 1059
    new-instance v6, Landroid/content/IntentFilter;

    sget-object v0, Lcom/samsung/android/knox/kiosk/KioskMode;->ACTION_REFRESH_HWKEY_INTERNAL:Ljava/lang/String;

    invoke-direct {v6, v0}, Landroid/content/IntentFilter;-><init>(Ljava/lang/String;)V

    .line 1060
    .local v6, "kioskFilter":Landroid/content/IntentFilter;
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeysReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v6}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1065
    invoke-static {}, Lcom/samsung/android/knox/custom/ProKioskManager;->getInstance()Lcom/samsung/android/knox/custom/ProKioskManager;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    .line 1066
    invoke-static {}, Lcom/samsung/android/knox/custom/SystemManager;->getInstance()Lcom/samsung/android/knox/custom/SystemManager;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    .line 1070
    new-instance v0, Landroid/content/Intent;

    const-string v1, "android.intent.action.MAIN"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    .line 1071
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const-string v1, "android.intent.category.LAUNCHER"

    invoke-virtual {v0, v1}, Landroid/content/Intent;->addCategory(Ljava/lang/String;)Landroid/content/Intent;

    .line 1072
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const-string v1, "isThisComeFromHomeKeyDoubleClickConcept"

    invoke-virtual {v0, v1, v8}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 1073
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const-string v1, "CHECK_SCHEDULE_ENABLED"

    invoke-virtual {v0, v1, v9}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 1074
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const-string v1, "isQuickLaunchMode"

    invoke-virtual {v0, v1, v8}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 1076
    new-instance v0, Landroid/content/Intent;

    const-string v1, "android.intent.action.MAIN"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFifthTapLaunchCommandIntent:Landroid/content/Intent;

    .line 1077
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFifthTapLaunchCommandIntent:Landroid/content/Intent;

    const-string v1, "android.intent.category.LAUNCHER"

    invoke-virtual {v0, v1}, Landroid/content/Intent;->addCategory(Ljava/lang/String;)Landroid/content/Intent;

    .line 1078
    new-instance v7, Landroid/content/ComponentName;

    const-string v0, "go.police.report"

    const-string v1, "go.police.report.Report"

    invoke-direct {v7, v0, v1}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    .line 1079
    .local v7, "tmpComponentName":Landroid/content/ComponentName;
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFifthTapLaunchCommandIntent:Landroid/content/Intent;

    invoke-virtual {v0, v7}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 1080
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFifthTapLaunchCommandIntent:Landroid/content/Intent;

    invoke-virtual {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isActivitiesAvailable(Landroid/content/Intent;)Z

    move-result v0

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableOneTouchReport:Z

    .line 1082
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.sec.action.SVOICE"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    .line 1083
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    const-string v1, "isThisComeFromHomeKeyDoubleClickConcept"

    invoke-virtual {v0, v1, v8}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 1084
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    const-string v1, "CHECK_SCHEDULE_ENABLED"

    invoke-virtual {v0, v1, v9}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 1085
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    invoke-virtual {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isActivitiesAvailable(Landroid/content/Intent;)Z

    move-result v0

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableVoiceCommand:Z

    .line 1087
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.samsung.pen.INSERT"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertedIntent:Landroid/content/Intent;

    .line 1088
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.samsung.pen.INSERT.USER_SWITCH"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertedIntentUserSwitch:Landroid/content/Intent;

    .line 1089
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.samsung.flipfolder.OPEN"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFlipFolderOpenedIntent:Landroid/content/Intent;

    .line 1090
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.samsung.android.secretmode.action.REQ_SHOW_VISUAL_CUE"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintIntent:Landroid/content/Intent;

    .line 1091
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintIntent:Landroid/content/Intent;

    new-instance v1, Landroid/content/ComponentName;

    const-string v2, "com.samsung.android.secretmode.service"

    const-string v4, "com.samsung.android.secretmode.service.SecretModeService"

    invoke-direct {v1, v2, v4}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 1094
    const-string v0, "com.sec.android.daynote"

    invoke-virtual {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isPackageAvailable(Ljava/lang/String;)Z

    move-result v0

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasDaynotePackage:Z

    .line 1098
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    .line 1099
    const-string v1, "PhoneWindowManager.mVoiceWakeUpWakeLock"

    .line 1098
    invoke-virtual {v0, v8, v1}, Landroid/os/PowerManager;->newWakeLock(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceWakeUpWakeLock:Landroid/os/PowerManager$WakeLock;

    .line 1103
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$22;

    invoke-direct {v0, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$22;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPhoneStateListener:Landroid/telephony/PhoneStateListener;

    .line 1114
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    if-eqz v0, :cond_2

    .line 1115
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPhoneStateListener:Landroid/telephony/PhoneStateListener;

    const/16 v2, 0x20

    invoke-virtual {v0, v1, v2}, Landroid/telephony/TelephonyManager;->listen(Landroid/telephony/PhoneStateListener;I)V

    .line 1120
    :cond_2
    new-instance v3, Landroid/content/IntentFilter;

    .end local v3    # "filter":Landroid/content/IntentFilter;
    invoke-direct {v3}, Landroid/content/IntentFilter;-><init>()V

    .line 1121
    .restart local v3    # "filter":Landroid/content/IntentFilter;
    const-string v0, "com.samsung.android.intent.action.PAUSE_WATCH"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1122
    const-string v0, "com.samsung.android.intent.action.STOP_WATCH"

    invoke-virtual {v3, v0}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    .line 1123
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPremiumWatchReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {p1, v0, v3}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    .line 1126
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v0

    const-string v1, "com.sec.feature.findo"

    invoke-virtual {v0, v1}, Landroid/content/pm/PackageManager;->hasSystemFeature(Ljava/lang/String;)Z

    move-result v0

    if-eqz v0, :cond_3

    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;

    invoke-direct {v0, p0, v5}, Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;)V

    move-object v5, v0

    :cond_3
    iput-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSFinderLaunchPolicy:Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;

    .line 1129
    new-instance v0, Lcom/android/internal/widget/LockPatternUtils;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-direct {v0, v1}, Lcom/android/internal/widget/LockPatternUtils;-><init>(Landroid/content/Context;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockPatternUtils:Lcom/android/internal/widget/LockPatternUtils;

    .line 1132
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$SettingsObserver;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    invoke-direct {v0, p0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager$SettingsObserver;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;Landroid/os/Handler;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSettingsObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$SettingsObserver;

    .line 1133
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSettingsObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$SettingsObserver;

    invoke-virtual {v0}, Lcom/android/server/policy/SamsungPhoneWindowManager$SettingsObserver;->observe()V

    .line 1135
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$WakeupPreventionObserver;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    invoke-direct {v0, p0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager$WakeupPreventionObserver;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;Landroid/os/Handler;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeupPreventionObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$WakeupPreventionObserver;

    .line 1136
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeupPreventionObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$WakeupPreventionObserver;

    invoke-virtual {v0}, Lcom/android/server/policy/SamsungPhoneWindowManager$WakeupPreventionObserver;->observe()V

    .line 1139
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v0

    const v1, 0x112006b

    invoke-virtual {v0, v1}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v0

    if-eqz v0, :cond_4

    .line 1140
    new-instance v0, Lcom/android/server/policy/SamsungPhoneWindowManager$ForceImmersiveModeObserver;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    invoke-direct {v0, p0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager$ForceImmersiveModeObserver;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;Landroid/os/Handler;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceImmersiveModeObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$ForceImmersiveModeObserver;

    .line 1141
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceImmersiveModeObserver:Lcom/android/server/policy/SamsungPhoneWindowManager$ForceImmersiveModeObserver;

    invoke-virtual {v0}, Lcom/android/server/policy/SamsungPhoneWindowManager$ForceImmersiveModeObserver;->observe()V

    .line 1145
    :cond_4
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v0}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->getInstance(Landroid/content/Context;)Lcom/samsung/android/emergencymode/SemEmergencyManager;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    .line 1146
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->initHomeBoost()V

    .line 1149
    iput v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverCloseRotation:I

    .line 1151
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v0

    .line 1152
    const-string v1, "com.sec.feature.cover.flip"

    .line 1151
    invoke-virtual {v0, v1}, Landroid/content/pm/PackageManager;->hasSystemFeature(Ljava/lang/String;)Z

    move-result v0

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportFlipCover:Z

    .line 1153
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v0

    .line 1154
    const-string v1, "com.sec.feature.cover.sview"

    .line 1153
    invoke-virtual {v0, v1}, Landroid/content/pm/PackageManager;->hasSystemFeature(Ljava/lang/String;)Z

    move-result v0

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    .line 1155
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportFlipCover:Z

    if-nez v0, :cond_5

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    if-eqz v0, :cond_6

    .line 1156
    :cond_5
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getCoverManager()Lcom/samsung/android/cover/ICoverManager;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    .line 1157
    new-instance v0, Lcom/samsung/android/cover/CoverState;

    invoke-direct {v0}, Lcom/samsung/android/cover/CoverState;-><init>()V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    .line 1162
    :cond_6
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    const-string v1, "mobile_keyboard"

    invoke-static {v0, v1, v9, v9}, Landroid/provider/Settings$System;->putIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)Z

    .line 1167
    const-string v0, "desktopmode"

    invoke-virtual {p1, v0}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/samsung/android/desktopmode/SemDesktopModeManager;

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDesktopModeManager:Lcom/samsung/android/desktopmode/SemDesktopModeManager;

    .line 1171
    const-string v0, "com.samsung.android.bixby.agent/com.samsung.android.bixby.WinkService"

    invoke-virtual {v0}, Ljava/lang/String;->isEmpty()Z

    move-result v0

    if-nez v0, :cond_7

    .line 1173
    const-string v0, "com.samsung.android.bixby.agent/com.samsung.android.bixby.WinkService"

    .line 1172
    invoke-static {v0}, Landroid/content/ComponentName;->unflattenFromString(Ljava/lang/String;)Landroid/content/ComponentName;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyComponent:Landroid/content/ComponentName;

    .line 976
    :cond_7
    return-void
.end method

.method public insertLog(Ljava/lang/String;Ljava/lang/String;)V
    .locals 2
    .param p1, "feature"    # Ljava/lang/String;
    .param p2, "extra"    # Ljava/lang/String;

    .prologue
    .line 6641
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContextLoggingThread:Ljava/lang/Thread;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContextLoggingThread:Ljava/lang/Thread;

    invoke-virtual {v0}, Ljava/lang/Thread;->isAlive()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 6642
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContextLoggingThread:Ljava/lang/Thread;

    invoke-virtual {v0}, Ljava/lang/Thread;->interrupt()V

    .line 6645
    :cond_0
    new-instance v0, Ljava/lang/Thread;

    new-instance v1, Lcom/android/server/policy/SamsungPhoneWindowManager$36;

    invoke-direct {v1, p0, p1, p2}, Lcom/android/server/policy/SamsungPhoneWindowManager$36;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;Ljava/lang/String;Ljava/lang/String;)V

    invoke-direct {v0, v1}, Ljava/lang/Thread;-><init>(Ljava/lang/Runnable;)V

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContextLoggingThread:Ljava/lang/Thread;

    .line 6670
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContextLoggingThread:Ljava/lang/Thread;

    invoke-virtual {v0}, Ljava/lang/Thread;->start()V

    .line 6640
    return-void
.end method

.method public interceptEndCallKey(Landroid/view/KeyEvent;ZZ)I
    .locals 12
    .param p1, "event"    # Landroid/view/KeyEvent;
    .param p2, "interactive"    # Z
    .param p3, "down"    # Z

    .prologue
    .line 8405
    const/4 v1, 0x0

    .line 8406
    .local v1, "keyUpCanceled":Z
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCombinationKeyTriggered()Z

    move-result v7

    if-eqz v7, :cond_0

    .line 8407
    const/4 v1, 0x1

    .line 8410
    :cond_0
    if-eqz v1, :cond_1

    .line 8411
    const/4 v7, 0x0

    return v7

    .line 8415
    :cond_1
    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallKeyPressCounter:I

    if-eqz v7, :cond_2

    .line 8416
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    const/4 v8, 0x3

    invoke-virtual {v7, v8}, Landroid/os/Handler;->removeMessages(I)V

    .line 8419
    :cond_2
    if-eqz p3, :cond_5

    .line 8420
    if-eqz p2, :cond_4

    .line 8421
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCombinationKeyTriggered()Z

    move-result v8

    iput-boolean v8, v7, Lcom/android/server/policy/PhoneWindowManager;->mEndCallKeyHandled:Z

    .line 8422
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallLongPress:Ljava/lang/Runnable;

    .line 8423
    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v9}, Landroid/view/ViewConfiguration;->get(Landroid/content/Context;)Landroid/view/ViewConfiguration;

    move-result-object v9

    invoke-virtual {v9}, Landroid/view/ViewConfiguration;->getDeviceGlobalActionKeyTimeout()J

    move-result-wide v10

    .line 8422
    invoke-virtual {v7, v8, v10, v11}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 8477
    :cond_3
    :goto_0
    const/4 v7, 0x0

    return v7

    .line 8425
    :cond_4
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/4 v8, 0x1

    iput-boolean v8, v7, Lcom/android/server/policy/PhoneWindowManager;->mEndCallKeyHandled:Z

    .line 8426
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v7}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v7

    if-eqz v7, :cond_3

    .line 8427
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v7}, Lcom/android/server/policy/PhoneWindowManager;->getMaxMultiPressPowerCount()I

    move-result v4

    .line 8428
    .local v4, "maxCount":I
    const/4 v7, 0x1

    if-le v4, v7, :cond_3

    .line 8429
    const/4 v7, 0x1

    iput-boolean v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBeganFromNonInteractiveEndCall:Z

    .line 8430
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/4 v8, 0x0

    iput-boolean v8, v7, Lcom/android/server/policy/PhoneWindowManager;->mEndCallKeyHandled:Z

    goto :goto_0

    .line 8435
    .end local v4    # "maxCount":I
    :cond_5
    invoke-virtual {p1}, Landroid/view/KeyEvent;->isCanceled()Z

    move-result v0

    .line 8436
    .local v0, "canceled":Z
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mEndCallKeyHandled:Z

    if-nez v7, :cond_3

    .line 8437
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getTelecommService()Landroid/telecom/TelecomManager;

    move-result-object v6

    .line 8438
    .local v6, "telecomManager":Landroid/telecom/TelecomManager;
    if-eqz v6, :cond_6

    .line 8439
    invoke-virtual {v6}, Landroid/telecom/TelecomManager;->endCall()Z

    .line 8442
    :cond_6
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallLongPress:Ljava/lang/Runnable;

    invoke-virtual {v7, v8}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 8443
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v7}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v7

    if-eqz v7, :cond_9

    .line 8444
    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallKeyPressCounter:I

    add-int/lit8 v7, v7, 0x1

    iput v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallKeyPressCounter:I

    .line 8445
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v7}, Lcom/android/server/policy/PhoneWindowManager;->getMaxMultiPressPowerCount()I

    move-result v4

    .line 8446
    .restart local v4    # "maxCount":I
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getDownTime()J

    move-result-wide v2

    .line 8448
    .local v2, "eventTime":J
    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallKeyPressCounter:I

    if-ge v7, v4, :cond_8

    .line 8450
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    .line 8451
    if-eqz p2, :cond_7

    const/4 v7, 0x1

    :goto_1
    iget v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallKeyPressCounter:I

    invoke-static {v2, v3}, Ljava/lang/Long;->valueOf(J)Ljava/lang/Long;

    move-result-object v10

    .line 8450
    const/4 v11, 0x3

    invoke-virtual {v8, v11, v7, v9, v10}, Landroid/os/Handler;->obtainMessage(IIILjava/lang/Object;)Landroid/os/Message;

    move-result-object v5

    .line 8452
    .local v5, "msg":Landroid/os/Message;
    const/4 v7, 0x1

    invoke-virtual {v5, v7}, Landroid/os/Message;->setAsynchronous(Z)V

    .line 8453
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    invoke-static {}, Landroid/view/ViewConfiguration;->getDoubleTapTimeout()I

    move-result v8

    int-to-long v8, v8

    invoke-virtual {v7, v5, v8, v9}, Landroid/os/Handler;->sendMessageDelayed(Landroid/os/Message;J)Z

    .line 8454
    const/4 v7, 0x0

    return v7

    .line 8451
    .end local v5    # "msg":Landroid/os/Message;
    :cond_7
    const/4 v7, 0x0

    goto :goto_1

    .line 8456
    :cond_8
    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEndCallKeyPressCounter:I

    invoke-direct {p0, v2, v3, p2, v7}, Lcom/android/server/policy/SamsungPhoneWindowManager;->endCallPress(JZI)V

    .line 8458
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->finishEndCallKeyPress()V

    goto/16 :goto_0

    .line 8459
    .end local v2    # "eventTime":J
    .end local v4    # "maxCount":I
    :cond_9
    if-nez v0, :cond_3

    .line 8460
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mEndcallBehavior:I

    and-int/lit8 v7, v7, 0x1

    if-eqz v7, :cond_a

    .line 8462
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v7}, Lcom/android/server/policy/PhoneWindowManager;->goHome()Z

    move-result v7

    if-eqz v7, :cond_a

    .line 8463
    const/4 v7, 0x0

    return v7

    .line 8467
    :cond_a
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mEndCallKeyHandled:Z

    if-nez v7, :cond_3

    .line 8468
    if-nez v0, :cond_3

    .line 8469
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mEndcallBehavior:I

    and-int/lit8 v7, v7, 0x2

    if-eqz v7, :cond_3

    .line 8470
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getEventTime()J

    move-result-wide v8

    .line 8471
    const/4 v10, 0x4

    const/4 v11, 0x0

    .line 8470
    invoke-virtual {v7, v8, v9, v10, v11}, Landroid/os/PowerManager;->goToSleep(JII)V

    .line 8472
    const/4 v7, 0x1

    return v7
.end method

.method public interceptKeyBeforeDispatching(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
    .locals 56
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "event"    # Landroid/view/KeyEvent;
    .param p3, "policyFlags"    # I

    .prologue
    .line 1985
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v34

    .line 1986
    .local v34, "keyguardOn":Z
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v33

    .line 1987
    .local v33, "keyCode":I
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v40

    .line 1988
    .local v40, "repeatCount":I
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getFlags()I

    move-result v22

    .line 1989
    .local v22, "flags":I
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getAction()I

    move-result v51

    if-nez v51, :cond_0

    const/4 v15, 0x1

    .line 1990
    .local v15, "down":Z
    :goto_0
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isCanceled()Z

    move-result v9

    .line 1991
    .local v9, "canceled":Z
    const/high16 v51, 0x20000000

    and-int v51, v51, p3

    if-eqz v51, :cond_1

    const/16 v27, 0x1

    .line 1993
    .local v27, "interactive":Z
    :goto_1
    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v36

    .line 1994
    .local v36, "now":J
    move-object/from16 v0, p0

    move/from16 v1, v22

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getTimeoutTimeOfKeyCombination(I)J

    move-result-wide v46

    .line 1995
    .local v46, "timeoutTime":J
    cmp-long v51, v36, v46

    if-gez v51, :cond_2

    .line 1996
    sub-long v52, v46, v36

    return-wide v52

    .line 1989
    .end local v9    # "canceled":Z
    .end local v15    # "down":Z
    .end local v27    # "interactive":Z
    .end local v36    # "now":J
    .end local v46    # "timeoutTime":J
    :cond_0
    const/4 v15, 0x0

    .restart local v15    # "down":Z
    goto :goto_0

    .line 1991
    .restart local v9    # "canceled":Z
    :cond_1
    const/16 v27, 0x0

    .restart local v27    # "interactive":Z
    goto :goto_1

    .line 2001
    .restart local v36    # "now":J
    .restart local v46    # "timeoutTime":J
    :cond_2
    const/16 v51, 0x19

    move/from16 v0, v33

    move/from16 v1, v51

    if-eq v0, v1, :cond_3

    const/16 v51, 0x18

    move/from16 v0, v33

    move/from16 v1, v51

    if-ne v0, v1, :cond_5

    .line 2002
    :cond_3
    if-eqz v40, :cond_5

    .line 2004
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v51, v0

    if-eqz v51, :cond_5

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v51

    if-eqz v51, :cond_5

    .line 2005
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/custom/ProKioskManager;->getVolumeKeyAppState()Z

    move-result v51

    .line 2004
    if-eqz v51, :cond_5

    .line 2007
    sget-boolean v51, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v51, :cond_4

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "knox: volume key is blocked"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2008
    :cond_4
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2043
    :cond_5
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCombinationKeyManager:Lcom/android/server/policy/CombinationKeyManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move-object/from16 v1, p2

    invoke-virtual {v0, v1}, Lcom/android/server/policy/CombinationKeyManager;->isConsumedKeyCombination(Landroid/view/KeyEvent;)Z

    move-result v51

    if-eqz v51, :cond_6

    .line 2044
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2048
    :cond_6
    move-object/from16 v0, p0

    move-object/from16 v1, p2

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isBlockedKeyBySideSync(Landroid/view/KeyEvent;)Z

    move-result v51

    if-eqz v51, :cond_8

    .line 2049
    sget-boolean v51, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v51, :cond_7

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "interceptKeyTi : Key was blocked by sidesync."

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2050
    :cond_7
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2055
    :cond_8
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWatchLaunching:Z

    move/from16 v51, v0

    if-eqz v51, :cond_9

    .line 2056
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Home key is blocked during watch is displayed"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 2057
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2062
    :cond_9
    sget-boolean v51, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v51, :cond_a

    .line 2063
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiWindowManagerInternal:Lcom/android/server/wm/IMultiWindowManagerInternalBridge;

    move-object/from16 v51, v0

    invoke-interface/range {v51 .. v51}, Lcom/android/server/wm/IMultiWindowManagerInternalBridge;->isUsingTaskPositioner()Z

    move-result v51

    if-eqz v51, :cond_a

    .line 2064
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "TaskPositioner is used by moving or resizing a task."

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 2065
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2070
    :cond_a
    sparse-switch v33, :sswitch_data_0

    .line 3048
    :cond_b
    :goto_2
    const/16 v31, 0x0

    .line 3049
    .local v31, "isNeedKeyBlock":Z
    if-nez v40, :cond_c

    if-eqz v27, :cond_c

    .line 3050
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mMultitapKeyManager:Lcom/android/server/policy/MultitapKeyPolicy;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move-object/from16 v1, p2

    invoke-interface {v0, v1}, Lcom/android/server/policy/MultitapKeyPolicy;->dispatchMultitapKeyEvent(Landroid/view/KeyEvent;)Z

    move-result v51

    if-eqz v51, :cond_c

    .line 3051
    const/16 v51, 0x3

    move/from16 v0, v33

    move/from16 v1, v51

    if-ne v0, v1, :cond_c

    if-eqz v15, :cond_7a

    .line 3064
    :cond_c
    :goto_3
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move/from16 v1, v33

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SystemKeyManager;->isSystemKeyEventRequested(I)Z

    move-result v51

    if-eqz v51, :cond_7e

    .line 3065
    if-eqz p1, :cond_7c

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v5

    .line 3066
    .local v5, "attrs":Landroid/view/WindowManager$LayoutParams;
    :goto_4
    if-eqz v5, :cond_7d

    iget v0, v5, Landroid/view/WindowManager$LayoutParams;->type:I

    move/from16 v51, v0

    const/16 v52, 0x7d0

    move/from16 v0, v51

    move/from16 v1, v52

    if-ne v0, v1, :cond_7d

    .line 3067
    iget v0, v5, Landroid/view/WindowManager$LayoutParams;->privateFlags:I

    move/from16 v51, v0

    move/from16 v0, v51

    and-int/lit16 v0, v0, 0x400

    move/from16 v51, v0

    if-nez v51, :cond_7d

    .line 3068
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    const-string v52, "reason"

    invoke-virtual/range {v51 .. v52}, Lcom/android/server/policy/PhoneWindowManager;->sendCloseSystemWindows(Ljava/lang/String;)V

    .line 3069
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2073
    .end local v5    # "attrs":Landroid/view/WindowManager$LayoutParams;
    .end local v31    # "isNeedKeyBlock":Z
    :sswitch_0
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNeedTriggerQD:Z

    move/from16 v51, v0

    if-eqz v51, :cond_e

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getFlags()I

    move-result v51

    move/from16 v0, v51

    and-int/lit16 v0, v0, 0x80

    move/from16 v51, v0

    if-eqz v51, :cond_e

    .line 2074
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mMultitapKeyManager:Lcom/android/server/policy/MultitapKeyPolicy;

    move-object/from16 v51, v0

    invoke-interface/range {v51 .. v51}, Lcom/android/server/policy/MultitapKeyPolicy;->isHomeConsumed()Z

    move-result v51

    if-nez v51, :cond_d

    .line 2075
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getDeviceId()I

    move-result v52

    invoke-virtual/range {v51 .. v52}, Lcom/android/server/policy/PhoneWindowManager;->handleLongPressOnHome(I)V

    .line 2077
    :cond_d
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2078
    :cond_e
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakekey:Z

    move/from16 v51, v0

    if-eqz v51, :cond_f

    .line 2079
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Homekey is used as a wake key on quick dial status"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2080
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mMultitapKeyManager:Lcom/android/server/policy/MultitapKeyPolicy;

    move-object/from16 v51, v0

    const/16 v52, 0x1

    move-object/from16 v0, v51

    move-object/from16 v1, p2

    move/from16 v2, v52

    invoke-interface {v0, v1, v2}, Lcom/android/server/policy/MultitapKeyPolicy;->dispatchMultitapKeyEvent(Landroid/view/KeyEvent;Z)Z

    .line 2081
    const/16 v51, 0x0

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakekey:Z

    .line 2082
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2086
    :cond_f
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getTelecommService()Landroid/telecom/TelecomManager;

    move-result-object v45

    .line 2087
    .local v45, "telecomManager":Landroid/telecom/TelecomManager;
    if-eqz v45, :cond_10

    invoke-virtual/range {v45 .. v45}, Landroid/telecom/TelecomManager;->isRinging()Z

    move-result v51

    if-eqz v51, :cond_10

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isTphoneRelaxMode()Z

    move-result v51

    if-eqz v51, :cond_12

    .line 2097
    :cond_10
    sget-boolean v51, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v51, :cond_11

    .line 2098
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    .line 2097
    if-eqz v51, :cond_11

    .line 2099
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_11

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-eqz v51, :cond_13

    .line 2110
    :cond_11
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v51

    if-eqz v51, :cond_18

    .line 2111
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/EnterpriseDeviceManager;->getRestrictionPolicy()Lcom/samsung/android/knox/restriction/RestrictionPolicy;

    move-result-object v35

    .line 2112
    .local v35, "lRestPolicy":Lcom/samsung/android/knox/restriction/RestrictionPolicy;
    if-eqz v35, :cond_16

    .line 2113
    const/16 v28, 0x1

    .line 2114
    .local v28, "isAllowed":Z
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getAction()I

    move-result v51

    if-nez v51, :cond_15

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v51

    if-nez v51, :cond_15

    .line 2115
    const/16 v51, 0x1

    move-object/from16 v0, v35

    move/from16 v1, v51

    invoke-virtual {v0, v1}, Lcom/samsung/android/knox/restriction/RestrictionPolicy;->isHomeKeyEnabled(Z)Z

    move-result v28

    .line 2119
    .local v28, "isAllowed":Z
    :goto_5
    if-nez v28, :cond_16

    .line 2120
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "home key disabled by edm"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2121
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2088
    .end local v28    # "isAllowed":Z
    .end local v35    # "lRestPolicy":Lcom/samsung/android/knox/restriction/RestrictionPolicy;
    :cond_12
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isAnyKeyMode()Z

    move-result v51

    if-eqz v51, :cond_10

    .line 2089
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "ringing: Accept the call!"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 2090
    invoke-virtual/range {v45 .. v45}, Landroid/telecom/TelecomManager;->acceptRingingCall()V

    .line 2091
    const-string v51, "VCHA"

    const/16 v52, 0x0

    move-object/from16 v0, p0

    move-object/from16 v1, v51

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->insertLog(Ljava/lang/String;Ljava/lang/String;)V

    .line 2092
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Ignoring HOME; there\'s a ringing incoming call and set anykey mode"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 2093
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2100
    :cond_13
    if-nez v15, :cond_14

    .line 2101
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    if-eqz v51, :cond_14

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move-object/from16 v1, p1

    invoke-interface {v0, v1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isFreeformWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v51

    if-eqz v51, :cond_14

    .line 2102
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    move-object/from16 v52, v0

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    check-cast v51, Landroid/os/IBinder;

    move-object/from16 v0, v52

    move-object/from16 v1, v51

    invoke-interface {v0, v1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->minimizeOtherFreeforms(Landroid/os/IBinder;)V

    .line 2105
    :cond_14
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2117
    .local v28, "isAllowed":Z
    .restart local v35    # "lRestPolicy":Lcom/samsung/android/knox/restriction/RestrictionPolicy;
    :cond_15
    const/16 v51, 0x0

    move-object/from16 v0, v35

    move/from16 v1, v51

    invoke-virtual {v0, v1}, Lcom/samsung/android/knox/restriction/RestrictionPolicy;->isHomeKeyEnabled(Z)Z

    move-result v28

    .local v28, "isAllowed":Z
    goto :goto_5

    .line 2124
    .end local v28    # "isAllowed":Z
    :cond_16
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/EnterpriseDeviceManager;->getPasswordPolicy()Lcom/samsung/android/knox/devicesecurity/PasswordPolicy;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/devicesecurity/PasswordPolicy;->isChangeRequested()I

    move-result v51

    if-gtz v51, :cond_17

    .line 2125
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/EnterpriseDeviceManager;->getBootBanner()Lcom/samsung/android/knox/lockscreen/BootBanner;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/lockscreen/BootBanner;->isDodBannerVisible()Z

    move-result v51

    .line 2124
    if-eqz v51, :cond_18

    .line 2126
    :cond_17
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "home key disabled by either pwd policy OR DoD Banner"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2127
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2133
    .end local v35    # "lRestPolicy":Lcom/samsung/android/knox/restriction/RestrictionPolicy;
    :cond_18
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isKnoxKeyguardShowing()Z

    move-result v51

    if-eqz v51, :cond_19

    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsRinging:Z

    move/from16 v51, v0

    if-eqz v51, :cond_1b

    .line 2179
    :cond_19
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsGearVrDocked:Z

    move/from16 v51, v0

    if-eqz v51, :cond_23

    .line 2180
    const-class v51, Lcom/android/server/vr/GearVrManagerInternal;

    invoke-static/range {v51 .. v51}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v49

    check-cast v49, Lcom/android/server/vr/GearVrManagerInternal;

    .line 2181
    .local v49, "vrService":Lcom/android/server/vr/GearVrManagerInternal;
    if-eqz v49, :cond_22

    .line 2182
    invoke-virtual/range {v49 .. v49}, Lcom/android/server/vr/GearVrManagerInternal;->isHomeKeyBlocked()Z

    move-result v51

    if-eqz v51, :cond_23

    .line 2183
    sget-boolean v51, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v51, :cond_1a

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Home Key is blocked by VR"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2184
    :cond_1a
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2134
    .end local v49    # "vrService":Lcom/android/server/vr/GearVrManagerInternal;
    :cond_1b
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v51

    .line 2133
    if-eqz v51, :cond_19

    .line 2134
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v51

    if-nez v51, :cond_19

    .line 2135
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getAction()I

    move-result v51

    const/16 v52, 0x1

    move/from16 v0, v51

    move/from16 v1, v52

    if-ne v0, v1, :cond_21

    .line 2137
    :try_start_0
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

    move-object/from16 v51, v0

    if-nez v51, :cond_1c

    .line 2138
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    const-string v52, "persona"

    invoke-virtual/range {v51 .. v52}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v51

    check-cast v51, Lcom/samsung/android/knox/SemPersonaManager;

    move-object/from16 v0, v51

    move-object/from16 v1, p0

    iput-object v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

    .line 2140
    :cond_1c
    const/16 v39, 0x0

    .line 2141
    .local v39, "personaIds":[I
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

    move-object/from16 v51, v0

    if-eqz v51, :cond_1d

    .line 2142
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPersonaManager:Lcom/samsung/android/knox/SemPersonaManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/SemPersonaManager;->getPersonaIds()[I

    move-result-object v39

    .line 2144
    .end local v39    # "personaIds":[I
    :cond_1d
    if-eqz v39, :cond_21

    .line 2145
    const/16 v25, 0x0

    .local v25, "i":I
    :goto_6
    move-object/from16 v0, v39

    array-length v0, v0

    move/from16 v51, v0

    move/from16 v0, v25

    move/from16 v1, v51

    if-ge v0, v1, :cond_21

    .line 2146
    aget v51, v39, v25

    const/16 v52, 0x64

    move/from16 v0, v51

    move/from16 v1, v52

    if-lt v0, v1, :cond_1f

    .line 2147
    aget v51, v39, v25

    const/16 v52, 0xc8

    move/from16 v0, v51

    move/from16 v1, v52

    if-gt v0, v1, :cond_1f

    .line 2148
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v51

    if-eqz v51, :cond_1f

    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v51

    aget v52, v39, v25

    invoke-virtual/range {v51 .. v52}, Lcom/samsung/android/knox/SemPersonaManager;->getKeyguardShowState(I)Z

    move-result v51

    if-eqz v51, :cond_1f

    .line 2149
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "current send personaId : "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    aget v53, v39, v25

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 2150
    const-string v51, "persona"

    invoke-static/range {v51 .. v51}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v38

    check-cast v38, Lcom/android/server/pm/PersonaManagerService;

    .line 2151
    .local v38, "pService":Lcom/android/server/pm/PersonaManagerService;
    if-eqz v38, :cond_1e

    .line 2152
    const/16 v51, 0x1

    move-object/from16 v0, v38

    move/from16 v1, v51

    invoke-virtual {v0, v1}, Lcom/android/server/pm/PersonaManagerService;->setIsPressHomeKey(Z)V

    .line 2154
    :cond_1e
    new-instance v26, Landroid/content/Intent;

    invoke-direct/range {v26 .. v26}, Landroid/content/Intent;-><init>()V

    .line 2155
    .local v26, "intent":Landroid/content/Intent;
    const-string v51, "KnoxKeyguardEventFlag"

    const/16 v52, 0x8

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    move/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 2156
    aget v51, v39, v25

    invoke-static/range {v51 .. v51}, Lcom/samsung/android/knox/SemPersonaManager;->isSecureFolderId(I)Z

    move-result v51

    if-eqz v51, :cond_20

    .line 2157
    new-instance v51, Landroid/content/ComponentName;

    const-string v52, "com.samsung.knox.securefolder"

    .line 2158
    const-string v53, "com.samsung.knox.securefolder.keyguard.KnoxKeyguardService"

    .line 2157
    invoke-direct/range {v51 .. v53}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 2163
    :goto_7
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    new-instance v52, Landroid/os/UserHandle;

    aget v53, v39, v25

    invoke-direct/range {v52 .. v53}, Landroid/os/UserHandle;-><init>(I)V

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;

    .line 2145
    .end local v26    # "intent":Landroid/content/Intent;
    .end local v38    # "pService":Lcom/android/server/pm/PersonaManagerService;
    :cond_1f
    add-int/lit8 v25, v25, 0x1

    goto/16 :goto_6

    .line 2160
    .restart local v26    # "intent":Landroid/content/Intent;
    .restart local v38    # "pService":Lcom/android/server/pm/PersonaManagerService;
    :cond_20
    new-instance v51, Landroid/content/ComponentName;

    const-string v52, "com.samsung.knox.kss"

    .line 2161
    const-string v53, "com.samsung.knox.kss.KnoxKeyguardService"

    .line 2160
    invoke-direct/range {v51 .. v53}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    goto :goto_7

    .line 2168
    .end local v25    # "i":I
    .end local v26    # "intent":Landroid/content/Intent;
    .end local v38    # "pService":Lcom/android/server/pm/PersonaManagerService;
    :catch_0
    move-exception v19

    .line 2169
    .local v19, "e":Ljava/lang/Exception;
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "start: threw an exception: "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, v19

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 2170
    invoke-virtual/range {v19 .. v19}, Ljava/lang/Exception;->printStackTrace()V

    .line 2173
    .end local v19    # "e":Ljava/lang/Exception;
    :cond_21
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2187
    .restart local v49    # "vrService":Lcom/android/server/vr/GearVrManagerInternal;
    :cond_22
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "HMT SamsungPhoneWindowManager failed"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 2192
    .end local v49    # "vrService":Lcom/android/server/vr/GearVrManagerInternal;
    :cond_23
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSideSyncPresentationRunning()Z

    move-result v51

    if-eqz v51, :cond_24

    .line 2193
    move-object/from16 v0, p0

    move-object/from16 v1, p2

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->sendSystemKeyToSideSync(Landroid/view/KeyEvent;)Z

    move-result v51

    if-eqz v51, :cond_24

    .line 2194
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2199
    :cond_24
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMirrorLinkEnabled()Z

    move-result v51

    if-eqz v51, :cond_25

    .line 2200
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "isMirrorLinkEnabled() true"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2201
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2205
    :cond_25
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockKeyForDrivingMode:Z

    move/from16 v51, v0

    if-eqz v51, :cond_26

    .line 2206
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "carmode true"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2207
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2212
    :cond_26
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v51

    if-eqz v51, :cond_27

    .line 2213
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Home key is blocked by policy"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2214
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2222
    :cond_27
    if-nez v15, :cond_29

    .line 2224
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isVoIPRinging()Z

    move-result v51

    if-eqz v51, :cond_29

    .line 2225
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isAnyKeyMode()Z

    move-result v51

    if-eqz v51, :cond_29

    .line 2227
    :try_start_1
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getVoIPInterfaceService()Landroid/os/IVoIPInterface;

    move-result-object v48

    .line 2228
    .local v48, "voipInterfaceService":Landroid/os/IVoIPInterface;
    if-eqz v48, :cond_28

    .line 2229
    invoke-interface/range {v48 .. v48}, Landroid/os/IVoIPInterface;->answerVoIPCall()Z

    .line 2230
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "HOME; while ringing: Answer the VoIPcall!"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 2231
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2233
    :cond_28
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Unable to find IVoIPInterface interface"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_1

    .line 2244
    .end local v48    # "voipInterfaceService":Landroid/os/IVoIPInterface;
    :cond_29
    :goto_8
    if-nez v15, :cond_b

    goto/16 :goto_2

    .line 2235
    :catch_1
    move-exception v21

    .line 2236
    .local v21, "ex":Landroid/os/RemoteException;
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "RemoteException from getVoIPInterfaceService()"

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    move-object/from16 v2, v21

    invoke-static {v0, v1, v2}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_8

    .line 2256
    .end local v21    # "ex":Landroid/os/RemoteException;
    .end local v45    # "telecomManager":Landroid/telecom/TelecomManager;
    :sswitch_1
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v51, v0

    if-eqz v51, :cond_2b

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v51

    if-eqz v51, :cond_2b

    .line 2257
    sget-boolean v51, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v51, :cond_2a

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Recent key is blocked in ProKiosk mode"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2258
    :cond_2a
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2262
    :cond_2b
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v51

    if-eqz v51, :cond_2d

    .line 2263
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/EnterpriseDeviceManager;->getPasswordPolicy()Lcom/samsung/android/knox/devicesecurity/PasswordPolicy;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/devicesecurity/PasswordPolicy;->isChangeRequested()I

    move-result v51

    if-gtz v51, :cond_2c

    .line 2264
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getEDM()Lcom/samsung/android/knox/EnterpriseDeviceManager;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/EnterpriseDeviceManager;->getBootBanner()Lcom/samsung/android/knox/lockscreen/BootBanner;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Lcom/samsung/android/knox/lockscreen/BootBanner;->isDodBannerVisible()Z

    move-result v51

    .line 2263
    if-eqz v51, :cond_2d

    .line 2265
    :cond_2c
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "recent apps key disabled by either pwd policy OR DoD Banner"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2266
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2272
    :cond_2d
    invoke-static {}, Lcom/samsung/android/desktopmode/SemDesktopModeManager;->isDesktopMode()Z

    move-result v51

    if-eqz v51, :cond_2f

    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isKnoxKeyguardShowing()Z

    move-result v51

    if-eqz v51, :cond_2f

    .line 2273
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v51

    if-eqz v51, :cond_2e

    .line 2274
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v51

    const/16 v52, 0x2

    invoke-virtual/range {v51 .. v52}, Lcom/samsung/android/knox/SemPersonaManager;->hideKeyguardForDex(I)V

    .line 2276
    :cond_2e
    const-wide/16 v52, -0x2

    return-wide v52

    .line 2278
    :cond_2f
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isKnoxKeyguardShowing()Z

    move-result v51

    if-nez v51, :cond_30

    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isKnoxCreatingOnTop()Z

    move-result v51

    if-eqz v51, :cond_31

    .line 2279
    :cond_30
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2285
    :cond_31
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMirrorLinkEnabled()Z

    move-result v51

    if-eqz v51, :cond_32

    .line 2286
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "isMirrorLinkEnabled() true"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2287
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2291
    :cond_32
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockKeyForDrivingMode:Z

    move/from16 v51, v0

    if-eqz v51, :cond_33

    .line 2292
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "carmode true"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2293
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2298
    :cond_33
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v51

    if-eqz v51, :cond_35

    .line 2299
    sget-boolean v51, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v51, :cond_34

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Recent key is blocked by policy"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2300
    :cond_34
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2309
    :cond_35
    if-eqz v15, :cond_b

    if-nez v40, :cond_b

    goto/16 :goto_2

    .line 2335
    :sswitch_2
    const/16 v51, 0x6f

    move/from16 v0, v33

    move/from16 v1, v51

    if-ne v0, v1, :cond_36

    .line 2336
    if-eqz v15, :cond_37

    .line 2348
    :cond_36
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyBack:Z

    move/from16 v51, v0

    if-eqz v51, :cond_b

    .line 2349
    if-nez v15, :cond_39

    .line 2350
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isBackKeyConsumed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2351
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2337
    :cond_37
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_36

    .line 2338
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isCtrlPressed()Z

    move-result v51

    .line 2335
    if-eqz v51, :cond_36

    .line 2339
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isShiftPressed()Z

    move-result v51

    if-eqz v51, :cond_38

    .line 2340
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Open Task Manager"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2345
    :goto_9
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2343
    :cond_38
    const/16 v51, 0x52

    move-object/from16 v0, p0

    move/from16 v1, v51

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->injectionKeyEvent(I)V

    goto :goto_9

    .line 2354
    :cond_39
    if-nez v40, :cond_3a

    .line 2355
    const/16 v51, 0x0

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyConsumed:Z

    .line 2358
    :cond_3a
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyConsumed:Z

    move/from16 v51, v0

    if-nez v51, :cond_b

    const/16 v51, 0xa

    move/from16 v0, v40

    move/from16 v1, v51

    if-ne v0, v1, :cond_b

    .line 2359
    const/16 v51, 0x1

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBackKeyConsumed:Z

    .line 2361
    const/16 v51, 0x52

    move-object/from16 v0, p0

    move/from16 v1, v51

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->injectionKeyEvent(I)V

    goto/16 :goto_2

    .line 2369
    :sswitch_3
    if-eqz v15, :cond_3b

    .line 2370
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintTimeoutRunnable:Ljava/lang/Runnable;

    move-object/from16 v52, v0

    invoke-virtual/range {v51 .. v52}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 2371
    const/16 v51, 0x1

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintPending:Z

    .line 2372
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintTimeoutRunnable:Ljava/lang/Runnable;

    move-object/from16 v52, v0

    const-wide/16 v54, 0x3e8

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    move-wide/from16 v2, v54

    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 2374
    :cond_3b
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2378
    :sswitch_4
    if-nez v15, :cond_3c

    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintPending:Z

    move/from16 v51, v0

    if-eqz v51, :cond_3c

    .line 2379
    const/16 v51, 0x0

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintPending:Z

    .line 2380
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintTimeoutRunnable:Ljava/lang/Runnable;

    move-object/from16 v52, v0

    invoke-virtual/range {v51 .. v52}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 2381
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->launchFingerPrint()V

    .line 2383
    :cond_3c
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2388
    :sswitch_5
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isSupportDMBAntennaDetach()Z

    move-result v51

    if-eqz v51, :cond_45

    .line 2389
    const-string v51, "service.media.dmb"

    invoke-static/range {v51 .. v51}, Landroid/os/SystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v14

    .line 2390
    .local v14, "dmb_running":Ljava/lang/String;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v51

    .line 2391
    const-string v52, "dmb_antenna_auto_start"

    const/16 v53, 0x0

    const/16 v54, -0x2

    .line 2390
    invoke-static/range {v51 .. v54}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v51

    .line 2391
    const/16 v52, 0x1

    .line 2390
    move/from16 v0, v51

    move/from16 v1, v52

    if-ne v0, v1, :cond_42

    const/16 v29, 0x1

    .line 2392
    .local v29, "isDmbAutoStarton":Z
    :goto_a
    const/4 v6, 0x0

    .line 2393
    .local v6, "b_dmb_running":Z
    const/16 v32, 0x0

    .line 2394
    .local v32, "isSecureKeyguard":Z
    if-eqz v14, :cond_3d

    invoke-virtual {v14}, Ljava/lang/String;->length()I

    move-result v51

    if-lez v51, :cond_3d

    .line 2395
    const-string v51, "1"

    move-object/from16 v0, v51

    invoke-virtual {v14, v0}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v51

    if-eqz v51, :cond_43

    .line 2396
    const/4 v6, 0x1

    .line 2402
    :cond_3d
    :goto_b
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v51

    if-eqz v51, :cond_3e

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v52, v0

    move-object/from16 v0, v52

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mCurrentUserId:I

    move/from16 v52, v0

    invoke-virtual/range {v51 .. v52}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardSecure(I)Z

    move-result v32

    .line 2404
    .end local v32    # "isSecureKeyguard":Z
    :cond_3e
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "KEYCODE_DMB_ANT_OPEN dmb_running="

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    invoke-virtual {v0, v14}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    .line 2405
    const-string v53, ", isSecureKeyguard="

    .line 2404
    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move/from16 v1, v32

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v52

    .line 2405
    const-string v53, ", isDmbAutoStarton="

    .line 2404
    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move/from16 v1, v29

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2408
    if-nez v15, :cond_40

    if-nez v40, :cond_40

    .line 2410
    :try_start_2
    const-string v4, "/efs/FactoryApp/tdmb_det_count"

    .line 2411
    .local v4, "TDMB_DET_PATH":Ljava/lang/String;
    new-instance v51, Ljava/io/File;

    move-object/from16 v0, v51

    invoke-direct {v0, v4}, Ljava/io/File;-><init>(Ljava/lang/String;)V

    const/16 v52, 0x0

    const/16 v53, 0x0

    invoke-static/range {v51 .. v53}, Landroid/os/FileUtils;->readTextFile(Ljava/io/File;ILjava/lang/String;)Ljava/lang/String;

    move-result-object v43

    .line 2412
    .local v43, "strDMBCount":Ljava/lang/String;
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "TDMB_DET_COUNT : "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, v43

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2414
    if-eqz v43, :cond_44

    invoke-virtual/range {v43 .. v43}, Ljava/lang/String;->length()I

    move-result v51

    if-lez v51, :cond_44

    .line 2415
    invoke-virtual/range {v43 .. v43}, Ljava/lang/String;->trim()Ljava/lang/String;

    move-result-object v51

    invoke-static/range {v51 .. v51}, Ljava/lang/Long;->parseLong(Ljava/lang/String;)J

    move-result-wide v52

    const-wide/16 v54, 0x1

    add-long v12, v52, v54

    .line 2416
    .local v12, "dmb_det_count":J
    const-wide/32 v52, 0xf423f

    cmp-long v51, v12, v52

    if-lez v51, :cond_3f

    .line 2417
    const-wide/16 v12, 0x1

    .line 2419
    :cond_3f
    invoke-static {v12, v13}, Ljava/lang/Long;->toString(J)Ljava/lang/String;

    move-result-object v51

    move-object/from16 v0, v51

    invoke-static {v4, v0}, Landroid/os/FileUtils;->stringToFile(Ljava/lang/String;Ljava/lang/String;)V
    :try_end_2
    .catch Ljava/io/IOException; {:try_start_2 .. :try_end_2} :catch_2
    .catch Ljava/lang/NumberFormatException; {:try_start_2 .. :try_end_2} :catch_3

    .line 2430
    .end local v4    # "TDMB_DET_PATH":Ljava/lang/String;
    .end local v12    # "dmb_det_count":J
    .end local v43    # "strDMBCount":Ljava/lang/String;
    :cond_40
    :goto_c
    if-nez v15, :cond_b

    if-nez v40, :cond_b

    if-nez v6, :cond_b

    .line 2431
    if-nez v32, :cond_b

    .line 2430
    if-eqz v29, :cond_b

    .line 2432
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    move-object/from16 v52, v0

    invoke-static/range {v51 .. v52}, Landroid/os/FactoryTest;->isFactoryMode(Landroid/content/Context;Landroid/telephony/TelephonyManager;)Z

    move-result v51

    if-nez v51, :cond_b

    .line 2433
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "KEYCODE_DMB_ANT_OPEN"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2435
    new-instance v51, Landroid/content/ComponentName;

    const-string v52, "com.sec.android.app.dmb"

    .line 2436
    const-string v53, "com.sec.android.app.dmb.activity.DMBFullScreenView"

    .line 2435
    invoke-direct/range {v51 .. v53}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    .line 2434
    invoke-static/range {v51 .. v51}, Landroid/content/Intent;->makeMainActivity(Landroid/content/ComponentName;)Landroid/content/Intent;

    move-result-object v26

    .line 2437
    .restart local v26    # "intent":Landroid/content/Intent;
    const-string v51, "com.sec.android.action.DMB_ANT_OPEN"

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 2438
    const/high16 v51, 0x10000000

    move-object/from16 v0, v26

    move/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 2440
    :try_start_3
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_3
    .catch Landroid/content/ActivityNotFoundException; {:try_start_3 .. :try_end_3} :catch_4

    .line 2445
    :goto_d
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v51

    if-eqz v51, :cond_41

    .line 2446
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v51, v0

    new-instance v52, Lcom/android/server/policy/SamsungPhoneWindowManager$26;

    move-object/from16 v0, v52

    move-object/from16 v1, p0

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager$26;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual/range {v51 .. v52}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 2452
    :cond_41
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2390
    .end local v6    # "b_dmb_running":Z
    .end local v26    # "intent":Landroid/content/Intent;
    .end local v29    # "isDmbAutoStarton":Z
    :cond_42
    const/16 v29, 0x0

    .restart local v29    # "isDmbAutoStarton":Z
    goto/16 :goto_a

    .line 2397
    .restart local v6    # "b_dmb_running":Z
    .restart local v32    # "isSecureKeyguard":Z
    :cond_43
    const-string v51, "0"

    move-object/from16 v0, v51

    invoke-virtual {v14, v0}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v51

    if-eqz v51, :cond_3d

    .line 2398
    const/4 v6, 0x0

    goto/16 :goto_b

    .line 2421
    .end local v32    # "isSecureKeyguard":Z
    .restart local v4    # "TDMB_DET_PATH":Ljava/lang/String;
    .restart local v43    # "strDMBCount":Ljava/lang/String;
    :cond_44
    :try_start_4
    const-string v51, "0"

    move-object/from16 v0, v51

    invoke-static {v4, v0}, Landroid/os/FileUtils;->stringToFile(Ljava/lang/String;Ljava/lang/String;)V
    :try_end_4
    .catch Ljava/io/IOException; {:try_start_4 .. :try_end_4} :catch_2
    .catch Ljava/lang/NumberFormatException; {:try_start_4 .. :try_end_4} :catch_3

    goto/16 :goto_c

    .line 2423
    .end local v4    # "TDMB_DET_PATH":Ljava/lang/String;
    .end local v43    # "strDMBCount":Ljava/lang/String;
    :catch_2
    move-exception v18

    .line 2424
    .local v18, "e":Ljava/io/IOException;
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "IOException : "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, v18

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_c

    .line 2425
    .end local v18    # "e":Ljava/io/IOException;
    :catch_3
    move-exception v20

    .line 2426
    .local v20, "e":Ljava/lang/NumberFormatException;
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "NumberFormatException : "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, v20

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_c

    .line 2441
    .end local v20    # "e":Ljava/lang/NumberFormatException;
    .restart local v26    # "intent":Landroid/content/Intent;
    :catch_4
    move-exception v16

    .line 2442
    .local v16, "e":Landroid/content/ActivityNotFoundException;
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "No activity to launch DMB."

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    move-object/from16 v2, v16

    invoke-static {v0, v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto/16 :goto_d

    .line 2456
    .end local v6    # "b_dmb_running":Z
    .end local v14    # "dmb_running":Ljava/lang/String;
    .end local v16    # "e":Landroid/content/ActivityNotFoundException;
    .end local v26    # "intent":Landroid/content/Intent;
    .end local v29    # "isDmbAutoStarton":Z
    :cond_45
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isSupportDTVAntennaDetach()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2457
    const/16 v32, 0x0

    .line 2458
    .restart local v32    # "isSecureKeyguard":Z
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "SISO DTV  APPLICATION KEYCODE_DTV_ANTENNA_OPEN"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2459
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v51

    if-eqz v51, :cond_46

    .line 2460
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v52, v0

    move-object/from16 v0, v52

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mCurrentUserId:I

    move/from16 v52, v0

    invoke-virtual/range {v51 .. v52}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardSecure(I)Z

    move-result v32

    .line 2462
    .end local v32    # "isSecureKeyguard":Z
    :cond_46
    if-nez v15, :cond_b

    if-nez v40, :cond_b

    if-nez v32, :cond_b

    .line 2463
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "SISO DTV  APPLICATION KEYCODE_DTV_ANTENNA_OPEN TO SEND BROADCAST"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2464
    new-instance v26, Landroid/content/Intent;

    invoke-direct/range {v26 .. v26}, Landroid/content/Intent;-><init>()V

    .line 2465
    .restart local v26    # "intent":Landroid/content/Intent;
    const-string v51, "com.samsung.sec.mtv.DTV_ANTENNA_OPEN"

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 2466
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 2467
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2475
    .end local v26    # "intent":Landroid/content/Intent;
    :sswitch_6
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isSupportDMBAntennaDetach()Z

    move-result v51

    if-eqz v51, :cond_47

    .line 2476
    if-nez v15, :cond_b

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    move-object/from16 v52, v0

    invoke-static/range {v51 .. v52}, Landroid/os/FactoryTest;->isFactoryMode(Landroid/content/Context;Landroid/telephony/TelephonyManager;)Z

    move-result v51

    if-nez v51, :cond_b

    .line 2477
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "KEYCODE_DMB_ANT_CLOSE"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2478
    new-instance v26, Landroid/content/Intent;

    invoke-direct/range {v26 .. v26}, Landroid/content/Intent;-><init>()V

    .line 2479
    .restart local v26    # "intent":Landroid/content/Intent;
    const-string v51, "com.sec.android.action.DMB_ANT_CLOSE"

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 2480
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 2482
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2486
    .end local v26    # "intent":Landroid/content/Intent;
    :cond_47
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isSupportDTVAntennaDetach()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2487
    if-nez v15, :cond_b

    .line 2488
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "KEYCODE_DTV_ANT_CLOSE"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2489
    new-instance v26, Landroid/content/Intent;

    invoke-direct/range {v26 .. v26}, Landroid/content/Intent;-><init>()V

    .line 2490
    .restart local v26    # "intent":Landroid/content/Intent;
    const-string v51, "com.samsung.sec.mtv.DTV_ANTENNA_CLOSE"

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 2491
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 2492
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2502
    .end local v26    # "intent":Landroid/content/Intent;
    :sswitch_7
    if-eqz v15, :cond_b

    if-nez v34, :cond_b

    if-nez v40, :cond_b

    .line 2504
    :try_start_5
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->getStatusBarService()Lcom/android/internal/statusbar/IStatusBarService;

    move-result-object v42

    .line 2505
    .local v42, "statusbar":Lcom/android/internal/statusbar/IStatusBarService;
    if-eqz v42, :cond_48

    .line 2506
    invoke-interface/range {v42 .. v42}, Lcom/android/internal/statusbar/IStatusBarService;->toggleNotificationPanel()V
    :try_end_5
    .catch Landroid/os/RemoteException; {:try_start_5 .. :try_end_5} :catch_c

    .line 2510
    .end local v42    # "statusbar":Lcom/android/internal/statusbar/IStatusBarService;
    :cond_48
    :goto_e
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2516
    :sswitch_8
    if-nez v15, :cond_49

    .line 2517
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->launchSFinderIfPossible()Z

    .line 2519
    :cond_49
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2523
    :sswitch_9
    if-nez v15, :cond_b

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDeviceProvisioned()Z

    move-result v51

    if-eqz v51, :cond_b

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2524
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isScreenCaptureEnabled()Z

    move-result v51

    .line 2523
    if-eqz v51, :cond_b

    .line 2525
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v51, v0

    new-instance v52, Lcom/android/server/policy/SamsungPhoneWindowManager$TakeScreenShotRunnable;

    const/16 v53, 0x1

    move-object/from16 v0, v52

    move-object/from16 v1, p0

    move/from16 v2, v53

    invoke-direct {v0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager$TakeScreenShotRunnable;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;I)V

    invoke-virtual/range {v51 .. v52}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    goto/16 :goto_2

    .line 2531
    :sswitch_a
    if-nez v15, :cond_4a

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDeviceProvisioned()Z

    move-result v51

    if-eqz v51, :cond_4a

    if-eqz v34, :cond_4b

    .line 2535
    :cond_4a
    :goto_f
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2532
    :cond_4b
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "KEYCODE_MULTI_WINDOW key input"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2533
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->toggleSplitScreen()V

    goto :goto_f

    .line 2557
    :sswitch_b
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSideSyncPresentationRunning()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2558
    move-object/from16 v0, p0

    move-object/from16 v1, p2

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->sendSystemKeyToSideSync(Landroid/view/KeyEvent;)Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2559
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2566
    :sswitch_c
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Lcom/samsung/android/knox/SemPersonaManager;->isKioskModeEnabled(Landroid/content/Context;)Z

    move-result v51

    if-eqz v51, :cond_4c

    .line 2567
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v52, v0

    const v53, 0x1040a1a

    invoke-virtual/range {v52 .. v53}, Landroid/content/Context;->getText(I)Ljava/lang/CharSequence;

    move-result-object v52

    invoke-interface/range {v52 .. v52}, Ljava/lang/CharSequence;->toString()Ljava/lang/String;

    move-result-object v52

    const/16 v53, 0x0

    invoke-static/range {v51 .. v53}, Landroid/widget/Toast;->makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;

    move-result-object v51

    invoke-virtual/range {v51 .. v51}, Landroid/widget/Toast;->show()V

    .line 2568
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2571
    :cond_4c
    move-object/from16 v0, p0

    move-object/from16 v1, p2

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->shouldPassEventForPTT(Landroid/view/KeyEvent;)Z

    move-result v51

    if-nez v51, :cond_b

    .line 2575
    if-eqz v15, :cond_4f

    .line 2576
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v51

    if-nez v51, :cond_4d

    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserKeyLongPressed:Z

    move/from16 v51, v0

    if-eqz v51, :cond_4d

    .line 2577
    const/16 v51, 0x0

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserKeyLongPressed:Z

    .line 2580
    :cond_4d
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isLongPress()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2581
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    sget-boolean v51, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_INPUT:Z

    if-eqz v51, :cond_4e

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "User key longpress"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2582
    :cond_4e
    const/16 v51, 0x1

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUserKeyLongPressed:Z

    .line 2584
    const/16 v51, 0x1

    move-object/from16 v0, p0

    move/from16 v1, v51

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleUserKey(Z)Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2585
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2589
    :cond_4f
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isUserKeyLongPressed()Z

    move-result v51

    if-nez v51, :cond_b

    .line 2590
    const/16 v51, 0x0

    move-object/from16 v0, p0

    move/from16 v1, v51

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleUserKey(Z)Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2591
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2599
    :sswitch_d
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v51

    if-eqz v51, :cond_50

    .line 2600
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarrierLocked()Z

    move-result v51

    .line 2599
    if-nez v51, :cond_50

    .line 2601
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSimLocked()Z

    move-result v51

    .line 2599
    if-nez v51, :cond_50

    .line 2602
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v51

    .line 2599
    if-eqz v51, :cond_51

    .line 2603
    :cond_50
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "no action about wink"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2604
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2607
    :cond_51
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move/from16 v1, v33

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SystemKeyManager;->isSystemKeyEventRequested(I)Z

    move-result v51

    if-nez v51, :cond_b

    .line 2611
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v51

    if-nez v51, :cond_52

    .line 2612
    const/16 v51, 0x0

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsBixbyConsumed:Z

    .line 2613
    if-eqz v15, :cond_52

    .line 2614
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->checkBixbyToast()V

    .line 2616
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    move-object/from16 v51, v0

    if-eqz v51, :cond_52

    if-eqz v27, :cond_52

    .line 2617
    new-instance v24, Landroid/os/Handler;

    invoke-static {}, Landroid/os/Looper;->getMainLooper()Landroid/os/Looper;

    move-result-object v51

    move-object/from16 v0, v24

    move-object/from16 v1, v51

    invoke-direct {v0, v1}, Landroid/os/Handler;-><init>(Landroid/os/Looper;)V

    .line 2618
    .local v24, "handler":Landroid/os/Handler;
    new-instance v51, Lcom/android/server/policy/SamsungPhoneWindowManager$27;

    move-object/from16 v0, v51

    move-object/from16 v1, p0

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager$27;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    .line 2628
    const-wide/16 v52, 0x0

    .line 2618
    move-object/from16 v0, v24

    move-object/from16 v1, v51

    move-wide/from16 v2, v52

    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 2633
    .end local v24    # "handler":Landroid/os/Handler;
    :cond_52
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isLongPress()Z

    move-result v30

    .line 2635
    .local v30, "isLongPress":Z
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    if-nez v51, :cond_55

    .line 2636
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    move-object/from16 v51, v0

    if-nez v51, :cond_55

    .line 2637
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v51

    if-eqz v51, :cond_53

    .line 2635
    if-eqz v30, :cond_55

    .line 2638
    :cond_53
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyComponent:Landroid/content/ComponentName;

    move-object/from16 v51, v0

    if-eqz v51, :cond_55

    .line 2639
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mBroadcastWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Landroid/os/PowerManager$WakeLock;->acquire()V

    .line 2640
    new-instance v8, Landroid/content/Intent;

    invoke-direct {v8}, Landroid/content/Intent;-><init>()V

    .line 2641
    .local v8, "brCogIntent":Landroid/content/Intent;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    sget-boolean v51, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_INPUT:Z

    if-eqz v51, :cond_54

    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "mIsBixbyConsumed = "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsBixbyConsumed:Z

    move/from16 v53, v0

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v52

    const-string v53, " event = "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, p2

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2642
    :cond_54
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyComponent:Landroid/content/ComponentName;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    invoke-virtual {v8, v0}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 2643
    const-string v51, "KEYEVENT"

    invoke-static/range {p2 .. p2}, Landroid/view/KeyEvent;->obtain(Landroid/view/KeyEvent;)Landroid/view/KeyEvent;

    move-result-object v52

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    invoke-virtual {v8, v0, v1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;

    .line 2644
    const-string v51, "BIXBY_KEY_FW_VERSION"

    const/16 v52, 0x2

    move-object/from16 v0, v51

    move/from16 v1, v52

    invoke-virtual {v8, v0, v1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 2646
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->OWNER:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    invoke-virtual {v0, v8, v1}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;

    .line 2647
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mBroadcastWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Landroid/os/PowerManager$WakeLock;->release()V

    .line 2649
    .end local v8    # "brCogIntent":Landroid/content/Intent;
    :cond_55
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2654
    .end local v30    # "isLongPress":Z
    :sswitch_e
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "KeyEvent.KEYCODE_NETWORK_SEL"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2655
    invoke-static {}, Landroid/os/FactoryTest;->isFactoryMode()Z

    move-result v51

    if-nez v51, :cond_56

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Landroid/os/FactoryTest;->isAutomaticTestMode(Landroid/content/Context;)Z

    move-result v51

    if-eqz v51, :cond_57

    .line 2656
    :cond_56
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Network selection key - no action in factory mode"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_2

    .line 2658
    :cond_57
    if-nez v34, :cond_58

    .line 2659
    if-eqz v15, :cond_59

    move/from16 v0, v22

    and-int/lit16 v0, v0, 0x80

    move/from16 v51, v0

    if-eqz v51, :cond_59

    .line 2660
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Network selection long press action"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 2661
    new-instance v26, Landroid/content/Intent;

    invoke-direct/range {v26 .. v26}, Landroid/content/Intent;-><init>()V

    .line 2662
    .restart local v26    # "intent":Landroid/content/Intent;
    const-string v51, "ACTION_NETWORK_LONGPRESS_KEY"

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 2663
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 2665
    const/16 v51, 0x1

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNetworkSelectionLongPress:Z

    .line 2677
    .end local v26    # "intent":Landroid/content/Intent;
    :cond_58
    :goto_10
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2666
    :cond_59
    if-nez v15, :cond_58

    if-nez v40, :cond_58

    .line 2667
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNetworkSelectionLongPress:Z

    move/from16 v51, v0

    if-nez v51, :cond_5a

    .line 2668
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Network selection short press action"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 2669
    new-instance v26, Landroid/content/Intent;

    invoke-direct/range {v26 .. v26}, Landroid/content/Intent;-><init>()V

    .line 2670
    .restart local v26    # "intent":Landroid/content/Intent;
    const-string v51, "ACTION_NETWORK_KEY"

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 2671
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    goto :goto_10

    .line 2673
    .end local v26    # "intent":Landroid/content/Intent;
    :cond_5a
    const/16 v51, 0x0

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNetworkSelectionLongPress:Z

    goto :goto_10

    .line 2683
    :sswitch_f
    invoke-static {}, Landroid/os/FactoryTest;->isFactoryMode()Z

    move-result v51

    if-nez v51, :cond_5b

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Landroid/os/FactoryTest;->isAutomaticTestMode(Landroid/content/Context;)Z

    move-result v51

    if-eqz v51, :cond_5c

    .line 2684
    :cond_5b
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Data key - no action in factory mode"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_2

    .line 2686
    :cond_5c
    if-nez v15, :cond_b

    if-nez v40, :cond_b

    .line 2687
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "3G key action"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 2688
    new-instance v26, Landroid/content/Intent;

    const-string v51, "android.settings.DATA_NETWORK_KEY_PRESSED"

    move-object/from16 v0, v26

    move-object/from16 v1, v51

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 2689
    .restart local v26    # "intent":Landroid/content/Intent;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v26

    move-object/from16 v2, v52

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    goto/16 :goto_2

    .line 2697
    .end local v26    # "intent":Landroid/content/Intent;
    :sswitch_10
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSimLocked()Z

    move-result v51

    if-nez v51, :cond_5d

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarrierLocked()Z

    move-result v51

    if-nez v51, :cond_5d

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2698
    :cond_5d
    sget-boolean v51, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v51, :cond_5e

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Key was blocked by sim or carrier status"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2699
    :cond_5e
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2705
    :sswitch_11
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2706
    sget-boolean v51, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v51, :cond_5f

    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "Key was blocked by carrier status"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2707
    :cond_5f
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2713
    :sswitch_12
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isAltPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2714
    if-nez v15, :cond_60

    .line 2715
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSamsungWindowManager:Lcom/android/server/wm/IWindowManagerServiceBridge;

    move-object/from16 v51, v0

    invoke-interface/range {v51 .. v51}, Lcom/android/server/wm/IWindowManagerServiceBridge;->getFocusedTaskId()I

    move-result v51

    const/16 v52, -0x1

    move/from16 v0, v51

    move/from16 v1, v52

    if-eq v0, v1, :cond_61

    .line 2716
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "window screenshot"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2717
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v51, v0

    new-instance v52, Lcom/android/server/policy/SamsungPhoneWindowManager$TakeScreenShotRunnable;

    const/16 v53, 0x64

    move-object/from16 v0, v52

    move-object/from16 v1, p0

    move/from16 v2, v53

    invoke-direct {v0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager$TakeScreenShotRunnable;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;I)V

    invoke-virtual/range {v51 .. v52}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 2723
    :cond_60
    :goto_11
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2719
    :cond_61
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "full screenshot"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2720
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v51, v0

    new-instance v52, Lcom/android/server/policy/SamsungPhoneWindowManager$TakeScreenShotRunnable;

    const/16 v53, 0x1

    move-object/from16 v0, v52

    move-object/from16 v1, p0

    move/from16 v2, v53

    invoke-direct {v0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager$TakeScreenShotRunnable;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;I)V

    invoke-virtual/range {v51 .. v52}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    goto :goto_11

    .line 2729
    :sswitch_13
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    if-nez v15, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2730
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "goto home by combination key"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2731
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->launchHomeFromHotKey()V

    .line 2732
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2738
    :sswitch_14
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    if-nez v15, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2739
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "launch SFinder"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2740
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->launchSFinderIfPossible()Z

    .line 2741
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2747
    :sswitch_15
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_62

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_62

    .line 2748
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    if-eqz v51, :cond_63

    .line 2789
    :cond_62
    :goto_12
    if-nez v15, :cond_b

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mBroadcastWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Landroid/os/PowerManager$WakeLock;->isHeld()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2790
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mBroadcastWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Landroid/os/PowerManager$WakeLock;->release()V

    goto/16 :goto_2

    .line 2749
    :cond_63
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v51

    if-eqz v51, :cond_64

    .line 2750
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarrierLocked()Z

    move-result v51

    .line 2749
    if-nez v51, :cond_64

    .line 2751
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSimLocked()Z

    move-result v51

    .line 2749
    if-nez v51, :cond_64

    .line 2752
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    invoke-static/range {v51 .. v51}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v51

    .line 2749
    if-eqz v51, :cond_65

    .line 2753
    :cond_64
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "no action about wink"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2754
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2757
    :cond_65
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "bixby is triggered(combination)"

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2759
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v51

    if-nez v51, :cond_66

    .line 2760
    const/16 v51, 0x0

    move/from16 v0, v51

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsBixbyConsumed:Z

    .line 2761
    if-eqz v15, :cond_66

    .line 2762
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mBroadcastWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Landroid/os/PowerManager$WakeLock;->acquire()V

    .line 2763
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->checkBixbyToast()V

    .line 2765
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    move-object/from16 v51, v0

    if-eqz v51, :cond_66

    if-eqz v27, :cond_66

    .line 2766
    new-instance v24, Landroid/os/Handler;

    invoke-static {}, Landroid/os/Looper;->getMainLooper()Landroid/os/Looper;

    move-result-object v51

    move-object/from16 v0, v24

    move-object/from16 v1, v51

    invoke-direct {v0, v1}, Landroid/os/Handler;-><init>(Landroid/os/Looper;)V

    .line 2767
    .restart local v24    # "handler":Landroid/os/Handler;
    new-instance v51, Lcom/android/server/policy/SamsungPhoneWindowManager$28;

    move-object/from16 v0, v51

    move-object/from16 v1, p0

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager$28;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    .line 2772
    const-wide/16 v52, 0x0

    .line 2767
    move-object/from16 v0, v24

    move-object/from16 v1, v51

    move-wide/from16 v2, v52

    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 2777
    .end local v24    # "handler":Landroid/os/Handler;
    :cond_66
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isLongPress()Z

    move-result v30

    .line 2779
    .restart local v30    # "isLongPress":Z
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyMsg:Ljava/lang/String;

    move-object/from16 v51, v0

    if-nez v51, :cond_62

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v51

    if-eqz v51, :cond_67

    if-eqz v30, :cond_62

    :cond_67
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyComponent:Landroid/content/ComponentName;

    move-object/from16 v51, v0

    if-eqz v51, :cond_62

    .line 2780
    new-instance v8, Landroid/content/Intent;

    invoke-direct {v8}, Landroid/content/Intent;-><init>()V

    .line 2781
    .restart local v8    # "brCogIntent":Landroid/content/Intent;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyComponent:Landroid/content/ComponentName;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    invoke-virtual {v8, v0}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 2782
    const-string v51, "KEYEVENT"

    invoke-static/range {p2 .. p2}, Landroid/view/KeyEvent;->obtain(Landroid/view/KeyEvent;)Landroid/view/KeyEvent;

    move-result-object v52

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    invoke-virtual {v8, v0, v1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;

    .line 2783
    const-string v51, "BIXBY_KEY_FW_VERSION"

    const/16 v52, 0x2

    move-object/from16 v0, v51

    move/from16 v1, v52

    invoke-virtual {v8, v0, v1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 2784
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v51, v0

    sget-object v52, Landroid/os/UserHandle;->OWNER:Landroid/os/UserHandle;

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    invoke-virtual {v0, v8, v1}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;

    goto/16 :goto_12

    .line 2797
    .end local v8    # "brCogIntent":Landroid/content/Intent;
    .end local v30    # "isLongPress":Z
    :sswitch_16
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2798
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    .line 2799
    if-nez v15, :cond_68

    .line 2800
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "window locked"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2801
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    const/16 v52, 0x0

    invoke-virtual/range {v51 .. v52}, Lcom/android/server/policy/PhoneWindowManager;->lockNow(Landroid/os/Bundle;)V

    .line 2803
    :cond_68
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2810
    :sswitch_17
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    if-nez v15, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2811
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "launch Quick Setting"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2812
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->getStatusBarService()Lcom/android/internal/statusbar/IStatusBarService;

    move-result-object v41

    .line 2813
    .local v41, "service":Lcom/android/internal/statusbar/IStatusBarService;
    if-eqz v41, :cond_69

    .line 2815
    const/16 v51, 0x0

    :try_start_6
    move-object/from16 v0, v41

    move-object/from16 v1, v51

    invoke-interface {v0, v1}, Lcom/android/internal/statusbar/IStatusBarService;->expandSettingsPanel(Ljava/lang/String;)V
    :try_end_6
    .catch Landroid/os/RemoteException; {:try_start_6 .. :try_end_6} :catch_5

    .line 2820
    :cond_69
    :goto_13
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2816
    :catch_5
    move-exception v17

    .local v17, "e":Landroid/os/RemoteException;
    goto :goto_13

    .line 2826
    .end local v17    # "e":Landroid/os/RemoteException;
    .end local v41    # "service":Lcom/android/internal/statusbar/IStatusBarService;
    :sswitch_18
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    if-nez v15, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2827
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "launch volume panel"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2828
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAudioManager:Landroid/media/AudioManager;

    move-object/from16 v51, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAudioManager:Landroid/media/AudioManager;

    move-object/from16 v52, v0

    invoke-static {}, Landroid/media/AudioManager;->semGetActiveStreamType()I

    move-result v52

    .line 2829
    const/16 v53, 0x0

    const/16 v54, 0x1

    .line 2828
    invoke-virtual/range {v51 .. v54}, Landroid/media/AudioManager;->adjustStreamVolume(III)V

    .line 2830
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2836
    :sswitch_19
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    if-nez v15, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2838
    :try_start_7
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSamsungWindowManager:Lcom/android/server/wm/IWindowManagerServiceBridge;

    move-object/from16 v51, v0

    invoke-interface/range {v51 .. v51}, Lcom/android/server/wm/IWindowManagerServiceBridge;->getFocusedTaskId()I

    move-result v23

    .line 2839
    .local v23, "focusedTaskId":I
    const/16 v51, -0x1

    move/from16 v0, v23

    move/from16 v1, v51

    if-eq v0, v1, :cond_6a

    .line 2840
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "finish focused window"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2841
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v51

    move-object/from16 v0, v51

    move/from16 v1, v23

    invoke-interface {v0, v1}, Landroid/app/IActivityManager;->removeTask(I)Z
    :try_end_7
    .catch Landroid/os/RemoteException; {:try_start_7 .. :try_end_7} :catch_b

    .line 2845
    .end local v23    # "focusedTaskId":I
    :cond_6a
    :goto_14
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2851
    :sswitch_1a
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    if-nez v15, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isAltPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2853
    :try_start_8
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSamsungWindowManager:Lcom/android/server/wm/IWindowManagerServiceBridge;

    move-object/from16 v51, v0

    invoke-interface/range {v51 .. v51}, Lcom/android/server/wm/IWindowManagerServiceBridge;->getFocusedTaskId()I

    move-result v23

    .line 2854
    .restart local v23    # "focusedTaskId":I
    const/16 v51, -0x1

    move/from16 v0, v23

    move/from16 v1, v51

    if-eq v0, v1, :cond_6b

    .line 2855
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "finish focused window"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 2856
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v51

    move-object/from16 v0, v51

    move/from16 v1, v23

    invoke-interface {v0, v1}, Landroid/app/IActivityManager;->removeTask(I)Z
    :try_end_8
    .catch Landroid/os/RemoteException; {:try_start_8 .. :try_end_8} :catch_a

    .line 2860
    .end local v23    # "focusedTaskId":I
    :cond_6b
    :goto_15
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2868
    :sswitch_1b
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    .line 2869
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    .line 2868
    if-eqz v51, :cond_b

    .line 2870
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mPendingMetaAction:Z

    move/from16 v51, v0

    .line 2868
    if-eqz v51, :cond_b

    .line 2870
    if-nez v15, :cond_b

    .line 2872
    :try_start_9
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->getStatusBarService()Lcom/android/internal/statusbar/IStatusBarService;

    move-result-object v42

    .line 2873
    .restart local v42    # "statusbar":Lcom/android/internal/statusbar/IStatusBarService;
    if-eqz v42, :cond_6c

    .line 2874
    move-object/from16 v0, v42

    move-object/from16 v1, p2

    invoke-interface {v0, v1}, Lcom/android/internal/statusbar/IStatusBarService;->sendKeyEventToKnoxDesktopTaskbar(Landroid/view/KeyEvent;)V
    :try_end_9
    .catch Landroid/os/RemoteException; {:try_start_9 .. :try_end_9} :catch_6

    .line 2879
    .end local v42    # "statusbar":Lcom/android/internal/statusbar/IStatusBarService;
    :cond_6c
    :goto_16
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2876
    :catch_6
    move-exception v17

    .line 2877
    .restart local v17    # "e":Landroid/os/RemoteException;
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "RemoteException when sendKeyEventToKnoxDesktopTaskbar"

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    move-object/from16 v2, v17

    invoke-static {v0, v1, v2}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_16

    .line 2886
    .end local v17    # "e":Landroid/os/RemoteException;
    :sswitch_1c
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2888
    :try_start_a
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->getStatusBarService()Lcom/android/internal/statusbar/IStatusBarService;

    move-result-object v42

    .line 2889
    .restart local v42    # "statusbar":Lcom/android/internal/statusbar/IStatusBarService;
    if-eqz v42, :cond_6d

    .line 2890
    move-object/from16 v0, v42

    move-object/from16 v1, p2

    invoke-interface {v0, v1}, Lcom/android/internal/statusbar/IStatusBarService;->sendKeyEventToKnoxDesktopTaskbar(Landroid/view/KeyEvent;)V
    :try_end_a
    .catch Landroid/os/RemoteException; {:try_start_a .. :try_end_a} :catch_7

    .line 2895
    .end local v42    # "statusbar":Lcom/android/internal/statusbar/IStatusBarService;
    :cond_6d
    :goto_17
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2892
    :catch_7
    move-exception v17

    .line 2893
    .restart local v17    # "e":Landroid/os/RemoteException;
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "RemoteException when sendKeyEventToKnoxDesktopTaskbar"

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    move-object/from16 v2, v17

    invoke-static {v0, v1, v2}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_17

    .line 2902
    .end local v17    # "e":Landroid/os/RemoteException;
    :sswitch_1d
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSideSyncPresentationRunning()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2903
    move-object/from16 v0, p0

    move-object/from16 v1, p2

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->sendSystemKeyToSideSync(Landroid/view/KeyEvent;)Z

    move-result v51

    if-eqz v51, :cond_b

    .line 2904
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2912
    :sswitch_1e
    sget-boolean v51, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v51, :cond_b

    .line 2913
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    .line 2912
    if-eqz v51, :cond_b

    .line 2914
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    .line 2915
    if-nez v15, :cond_70

    .line 2916
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    if-eqz v51, :cond_70

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move-object/from16 v1, p1

    invoke-interface {v0, v1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isFreeformWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v51

    if-eqz v51, :cond_70

    .line 2917
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v51

    invoke-interface/range {v51 .. v51}, Lcom/samsung/android/view/IWindowStateBridge;->isDexCompatMode()Z

    move-result v51

    if-eqz v51, :cond_6e

    .line 2918
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "This is dexCompatMode, win="

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, p1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_2

    .line 2922
    :cond_6e
    new-instance v7, Landroid/graphics/Rect;

    invoke-direct {v7}, Landroid/graphics/Rect;-><init>()V

    .line 2923
    .local v7, "bounds":Landroid/graphics/Rect;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    invoke-virtual {v0, v7}, Landroid/view/Display;->getRectSize(Landroid/graphics/Rect;)V

    .line 2924
    new-instance v10, Landroid/graphics/Rect;

    invoke-direct {v10, v7}, Landroid/graphics/Rect;-><init>(Landroid/graphics/Rect;)V

    .line 2926
    .local v10, "displayBounds":Landroid/graphics/Rect;
    invoke-virtual {v7}, Landroid/graphics/Rect;->centerX()I

    move-result v51

    move/from16 v0, v51

    iput v0, v7, Landroid/graphics/Rect;->right:I

    .line 2927
    new-instance v44, Landroid/graphics/Rect;

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getDisplayFrameLw()Landroid/graphics/Rect;

    move-result-object v51

    move-object/from16 v0, v44

    move-object/from16 v1, v51

    invoke-direct {v0, v1}, Landroid/graphics/Rect;-><init>(Landroid/graphics/Rect;)V

    .line 2928
    .local v44, "taskBounds":Landroid/graphics/Rect;
    move-object/from16 v0, v44

    invoke-virtual {v0, v7}, Landroid/graphics/Rect;->equals(Ljava/lang/Object;)Z

    move-result v51

    if-eqz v51, :cond_6f

    .line 2929
    invoke-virtual {v7, v10}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 2930
    invoke-virtual {v7}, Landroid/graphics/Rect;->centerX()I

    move-result v51

    move/from16 v0, v51

    iput v0, v7, Landroid/graphics/Rect;->left:I

    .line 2933
    :cond_6f
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiWindowManagerInternal:Lcom/android/server/wm/IMultiWindowManagerInternalBridge;

    move-object/from16 v51, v0

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v52

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    invoke-interface {v0, v1, v7}, Lcom/android/server/wm/IMultiWindowManagerInternalBridge;->resizeTaskWithRelaunchAnim(Landroid/view/IApplicationToken;Landroid/graphics/Rect;)V

    .line 2936
    .end local v7    # "bounds":Landroid/graphics/Rect;
    .end local v10    # "displayBounds":Landroid/graphics/Rect;
    .end local v44    # "taskBounds":Landroid/graphics/Rect;
    :cond_70
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2943
    :sswitch_1f
    sget-boolean v51, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v51, :cond_b

    .line 2944
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    .line 2943
    if-eqz v51, :cond_b

    .line 2945
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    .line 2946
    if-nez v15, :cond_73

    .line 2947
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    if-eqz v51, :cond_73

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move-object/from16 v1, p1

    invoke-interface {v0, v1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isFreeformWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v51

    if-eqz v51, :cond_73

    .line 2948
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v51

    invoke-interface/range {v51 .. v51}, Lcom/samsung/android/view/IWindowStateBridge;->isDexCompatMode()Z

    move-result v51

    if-eqz v51, :cond_71

    .line 2949
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "This is dexCompatMode, win="

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, p1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_2

    .line 2953
    :cond_71
    new-instance v7, Landroid/graphics/Rect;

    invoke-direct {v7}, Landroid/graphics/Rect;-><init>()V

    .line 2954
    .restart local v7    # "bounds":Landroid/graphics/Rect;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    invoke-virtual {v0, v7}, Landroid/view/Display;->getRectSize(Landroid/graphics/Rect;)V

    .line 2955
    new-instance v10, Landroid/graphics/Rect;

    invoke-direct {v10, v7}, Landroid/graphics/Rect;-><init>(Landroid/graphics/Rect;)V

    .line 2957
    .restart local v10    # "displayBounds":Landroid/graphics/Rect;
    invoke-virtual {v7}, Landroid/graphics/Rect;->centerX()I

    move-result v51

    move/from16 v0, v51

    iput v0, v7, Landroid/graphics/Rect;->left:I

    .line 2958
    new-instance v44, Landroid/graphics/Rect;

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getDisplayFrameLw()Landroid/graphics/Rect;

    move-result-object v51

    move-object/from16 v0, v44

    move-object/from16 v1, v51

    invoke-direct {v0, v1}, Landroid/graphics/Rect;-><init>(Landroid/graphics/Rect;)V

    .line 2959
    .restart local v44    # "taskBounds":Landroid/graphics/Rect;
    move-object/from16 v0, v44

    invoke-virtual {v0, v7}, Landroid/graphics/Rect;->equals(Ljava/lang/Object;)Z

    move-result v51

    if-eqz v51, :cond_72

    .line 2960
    invoke-virtual {v7, v10}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 2961
    invoke-virtual {v7}, Landroid/graphics/Rect;->centerX()I

    move-result v51

    move/from16 v0, v51

    iput v0, v7, Landroid/graphics/Rect;->right:I

    .line 2964
    :cond_72
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiWindowManagerInternal:Lcom/android/server/wm/IMultiWindowManagerInternalBridge;

    move-object/from16 v51, v0

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v52

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    invoke-interface {v0, v1, v7}, Lcom/android/server/wm/IMultiWindowManagerInternalBridge;->resizeTaskWithRelaunchAnim(Landroid/view/IApplicationToken;Landroid/graphics/Rect;)V

    .line 2967
    .end local v7    # "bounds":Landroid/graphics/Rect;
    .end local v10    # "displayBounds":Landroid/graphics/Rect;
    .end local v44    # "taskBounds":Landroid/graphics/Rect;
    :cond_73
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2974
    :sswitch_20
    sget-boolean v51, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v51, :cond_b

    .line 2975
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    .line 2974
    if-eqz v51, :cond_b

    .line 2976
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    .line 2977
    if-nez v15, :cond_75

    .line 2978
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    if-eqz v51, :cond_75

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move-object/from16 v1, p1

    invoke-interface {v0, v1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isFreeformWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v51

    if-eqz v51, :cond_75

    .line 2979
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v51

    invoke-interface/range {v51 .. v51}, Lcom/samsung/android/view/IWindowStateBridge;->isDexCompatMode()Z

    move-result v51

    if-eqz v51, :cond_74

    .line 2980
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "This is dexCompatMode, win="

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, p1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_2

    .line 2984
    :cond_74
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isShiftPressed()Z

    move-result v51

    if-eqz v51, :cond_76

    .line 2985
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getFrameLw()Landroid/graphics/Rect;

    move-result-object v50

    .line 2986
    .local v50, "winFrame":Landroid/graphics/Rect;
    new-instance v11, Landroid/graphics/Rect;

    invoke-direct {v11}, Landroid/graphics/Rect;-><init>()V

    .line 2987
    .local v11, "displaySize":Landroid/graphics/Rect;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    invoke-virtual {v0, v11}, Landroid/view/Display;->getRectSize(Landroid/graphics/Rect;)V

    .line 2989
    new-instance v7, Landroid/graphics/Rect;

    invoke-direct {v7}, Landroid/graphics/Rect;-><init>()V

    .line 2990
    .restart local v7    # "bounds":Landroid/graphics/Rect;
    move-object/from16 v0, v50

    iget v0, v0, Landroid/graphics/Rect;->left:I

    move/from16 v51, v0

    iget v0, v11, Landroid/graphics/Rect;->top:I

    move/from16 v52, v0

    move-object/from16 v0, v50

    iget v0, v0, Landroid/graphics/Rect;->right:I

    move/from16 v53, v0

    iget v0, v11, Landroid/graphics/Rect;->bottom:I

    move/from16 v54, v0

    move/from16 v0, v51

    move/from16 v1, v52

    move/from16 v2, v53

    move/from16 v3, v54

    invoke-virtual {v7, v0, v1, v2, v3}, Landroid/graphics/Rect;->set(IIII)V

    .line 2992
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiWindowManagerInternal:Lcom/android/server/wm/IMultiWindowManagerInternalBridge;

    move-object/from16 v51, v0

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v52

    move-object/from16 v0, v51

    move-object/from16 v1, v52

    invoke-interface {v0, v1, v7}, Lcom/android/server/wm/IMultiWindowManagerInternalBridge;->resizeTaskWithRelaunchAnim(Landroid/view/IApplicationToken;Landroid/graphics/Rect;)V

    .line 3002
    .end local v7    # "bounds":Landroid/graphics/Rect;
    .end local v11    # "displaySize":Landroid/graphics/Rect;
    .end local v50    # "winFrame":Landroid/graphics/Rect;
    :cond_75
    :goto_18
    const-wide/16 v52, -0x1

    return-wide v52

    .line 2993
    :cond_76
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->isInMultiWindowMode()Z

    move-result v51

    if-eqz v51, :cond_75

    .line 2995
    :try_start_b
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v52

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    check-cast v51, Landroid/os/IBinder;

    move-object/from16 v0, v52

    move-object/from16 v1, v51

    invoke-interface {v0, v1}, Landroid/app/IActivityManager;->exitFreeformMode(Landroid/os/IBinder;)V
    :try_end_b
    .catch Landroid/os/RemoteException; {:try_start_b .. :try_end_b} :catch_8

    goto :goto_18

    .line 2996
    :catch_8
    move-exception v17

    .line 2997
    .restart local v17    # "e":Landroid/os/RemoteException;
    invoke-virtual/range {v17 .. v17}, Landroid/os/RemoteException;->printStackTrace()V

    goto :goto_18

    .line 3009
    .end local v17    # "e":Landroid/os/RemoteException;
    :sswitch_21
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 3010
    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    .line 3011
    if-nez v15, :cond_78

    .line 3012
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    if-eqz v51, :cond_78

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    move-object/from16 v1, p1

    invoke-interface {v0, v1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isFreeformWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v51

    if-eqz v51, :cond_78

    .line 3013
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v51

    invoke-interface/range {v51 .. v51}, Lcom/samsung/android/view/IWindowStateBridge;->isDexCompatMode()Z

    move-result v51

    if-eqz v51, :cond_77

    .line 3014
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "This is dexCompatMode, win="

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, v52

    move-object/from16 v1, p1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_2

    .line 3018
    :cond_77
    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->isInMultiWindowMode()Z

    move-result v51

    if-eqz v51, :cond_79

    .line 3019
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    move-object/from16 v52, v0

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    check-cast v51, Landroid/os/IBinder;

    move-object/from16 v0, v52

    move-object/from16 v1, v51

    invoke-interface {v0, v1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->minimizeFreeform(Landroid/os/IBinder;)V

    .line 3029
    :cond_78
    :goto_19
    const-wide/16 v52, -0x1

    return-wide v52

    .line 3022
    :cond_79
    :try_start_c
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v52

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v51

    check-cast v51, Landroid/os/IBinder;

    move-object/from16 v0, v52

    move-object/from16 v1, v51

    invoke-interface {v0, v1}, Landroid/app/IActivityManager;->exitFreeformMode(Landroid/os/IBinder;)V
    :try_end_c
    .catch Landroid/os/RemoteException; {:try_start_c .. :try_end_c} :catch_9

    goto :goto_19

    .line 3023
    :catch_9
    move-exception v17

    .line 3024
    .restart local v17    # "e":Landroid/os/RemoteException;
    invoke-virtual/range {v17 .. v17}, Landroid/os/RemoteException;->printStackTrace()V

    goto :goto_19

    .line 3037
    .end local v17    # "e":Landroid/os/RemoteException;
    :sswitch_22
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMetaKeyEventRequested()Z

    move-result v51

    if-nez v51, :cond_b

    if-nez v15, :cond_b

    invoke-virtual/range {p2 .. p2}, Landroid/view/KeyEvent;->isMetaPressed()Z

    move-result v51

    if-eqz v51, :cond_b

    .line 3038
    const-string v51, "SamsungPhoneWindowManager"

    const-string v52, "toggle recentapp"

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3039
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->toggleRecentApps()V

    .line 3041
    const-wide/16 v52, -0x1

    return-wide v52

    .line 3052
    .restart local v31    # "isNeedKeyBlock":Z
    :cond_7a
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    invoke-virtual/range {v51 .. v51}, Lcom/android/server/policy/PhoneWindowManager;->cancelPreloadRecentApps()V

    .line 3053
    const-string v51, "SamsungPhoneWindowManager"

    new-instance v52, Ljava/lang/StringBuilder;

    invoke-direct/range {v52 .. v52}, Ljava/lang/StringBuilder;-><init>()V

    const-string v53, "mHomePressed = "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v53, v0

    move-object/from16 v0, v53

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mHomePressed:Z

    move/from16 v53, v0

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v52

    const-string v53, " mHomeConsumed = "

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v52

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v53, v0

    move-object/from16 v0, v53

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mHomeConsumed:Z

    move/from16 v53, v0

    invoke-virtual/range {v52 .. v53}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v52

    invoke-virtual/range {v52 .. v52}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v52

    invoke-static/range {v51 .. v52}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3054
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    const/16 v52, 0x0

    move/from16 v0, v52

    move-object/from16 v1, v51

    iput-boolean v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mHomePressed:Z

    .line 3055
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    move-object/from16 v0, v51

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mHomeConsumed:Z

    move/from16 v51, v0

    if-eqz v51, :cond_7b

    .line 3056
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v51, v0

    const/16 v52, 0x0

    move/from16 v0, v52

    move-object/from16 v1, v51

    iput-boolean v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mHomeConsumed:Z

    .line 3058
    :cond_7b
    const/16 v31, 0x1

    goto/16 :goto_3

    .line 3065
    :cond_7c
    const/4 v5, 0x0

    goto/16 :goto_4

    .line 3071
    .restart local v5    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :cond_7d
    const-wide/16 v52, 0x0

    return-wide v52

    .line 3074
    .end local v5    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :cond_7e
    const/16 v51, 0x6

    move/from16 v0, v33

    move/from16 v1, v51

    if-ne v0, v1, :cond_81

    .line 3075
    if-eqz p1, :cond_7f

    invoke-interface/range {p1 .. p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v5

    .line 3076
    .restart local v5    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :goto_1a
    if-eqz v5, :cond_80

    iget v0, v5, Landroid/view/WindowManager$LayoutParams;->privateFlags:I

    move/from16 v51, v0

    move/from16 v0, v51

    and-int/lit16 v0, v0, 0x400

    move/from16 v51, v0

    if-eqz v51, :cond_80

    .line 3077
    const-wide/16 v52, 0x0

    return-wide v52

    .line 3075
    .end local v5    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :cond_7f
    const/4 v5, 0x0

    goto :goto_1a

    .line 3079
    .restart local v5    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :cond_80
    const-wide/16 v52, -0x1

    return-wide v52

    .line 3083
    .end local v5    # "attrs":Landroid/view/WindowManager$LayoutParams;
    :cond_81
    if-eqz v31, :cond_82

    .line 3084
    const-wide/16 v52, -0x1

    return-wide v52

    .line 3087
    :cond_82
    const-wide/16 v52, -0x2

    return-wide v52

    .line 2858
    .end local v31    # "isNeedKeyBlock":Z
    :catch_a
    move-exception v17

    .restart local v17    # "e":Landroid/os/RemoteException;
    goto/16 :goto_15

    .line 2843
    .end local v17    # "e":Landroid/os/RemoteException;
    :catch_b
    move-exception v17

    .restart local v17    # "e":Landroid/os/RemoteException;
    goto/16 :goto_14

    .line 2508
    .end local v17    # "e":Landroid/os/RemoteException;
    :catch_c
    move-exception v21

    .restart local v21    # "ex":Landroid/os/RemoteException;
    goto/16 :goto_e

    .line 2070
    :sswitch_data_0
    .sparse-switch
        0x3 -> :sswitch_0
        0x4 -> :sswitch_2
        0x13 -> :sswitch_20
        0x14 -> :sswitch_21
        0x15 -> :sswitch_1e
        0x16 -> :sswitch_1f
        0x18 -> :sswitch_1d
        0x19 -> :sswitch_1d
        0x1a -> :sswitch_b
        0x1b -> :sswitch_10
        0x20 -> :sswitch_13
        0x22 -> :sswitch_14
        0x25 -> :sswitch_15
        0x28 -> :sswitch_16
        0x2d -> :sswitch_17
        0x32 -> :sswitch_18
        0x34 -> :sswitch_19
        0x3d -> :sswitch_22
        0x6f -> :sswitch_2
        0x75 -> :sswitch_1b
        0x76 -> :sswitch_1b
        0x78 -> :sswitch_12
        0x86 -> :sswitch_1a
        0xbb -> :sswitch_1
        0x3e9 -> :sswitch_1
        0x3ea -> :sswitch_1c
        0x3eb -> :sswitch_7
        0x3ec -> :sswitch_9
        0x3f7 -> :sswitch_c
        0x3f9 -> :sswitch_5
        0x3fa -> :sswitch_6
        0x40c -> :sswitch_f
        0x415 -> :sswitch_3
        0x416 -> :sswitch_4
        0x417 -> :sswitch_e
        0x41a -> :sswitch_b
        0x425 -> :sswitch_a
        0x428 -> :sswitch_8
        0x431 -> :sswitch_11
        0x43a -> :sswitch_d
    .end sparse-switch
.end method

.method public interceptKeyBeforeQueueing(Landroid/view/KeyEvent;I)I
    .locals 36
    .param p1, "event"    # Landroid/view/KeyEvent;
    .param p2, "policyFlags"    # I

    .prologue
    .line 3103
    const/high16 v31, 0x20000000

    and-int v31, v31, p2

    if-eqz v31, :cond_2

    const/16 v20, 0x1

    .line 3104
    .local v20, "interactive":Z
    :goto_0
    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v31

    if-nez v31, :cond_3

    const/4 v13, 0x1

    .line 3105
    .local v13, "down":Z
    :goto_1
    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v23

    .line 3107
    .local v23, "keyCode":I
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mRequestedSystemKey:Z

    move/from16 v31, v0

    if-eqz v31, :cond_0

    .line 3108
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    const/16 v32, 0x0

    move/from16 v0, v32

    move-object/from16 v1, v31

    iput-boolean v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mRequestedSystemKey:Z

    .line 3111
    :cond_0
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockTaskModeState:I

    move/from16 v31, v0

    const/16 v32, 0x1

    move/from16 v0, v31

    move/from16 v1, v32

    if-ne v0, v1, :cond_4

    .line 3112
    const/16 v31, 0x3

    move/from16 v0, v23

    move/from16 v1, v31

    if-eq v0, v1, :cond_1

    const/16 v31, 0xbb

    move/from16 v0, v23

    move/from16 v1, v31

    if-ne v0, v1, :cond_4

    .line 3113
    :cond_1
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Key was blocked by LOCK_TASK_MODE_LOCKED"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3114
    const/16 v31, 0x2

    return v31

    .line 3103
    .end local v13    # "down":Z
    .end local v20    # "interactive":Z
    .end local v23    # "keyCode":I
    :cond_2
    const/16 v20, 0x0

    .restart local v20    # "interactive":Z
    goto :goto_0

    .line 3104
    :cond_3
    const/4 v13, 0x0

    .restart local v13    # "down":Z
    goto :goto_1

    .line 3117
    .restart local v23    # "keyCode":I
    :cond_4
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMirrorLinkEnabled()Z

    move-result v31

    if-eqz v31, :cond_5

    .line 3118
    sparse-switch v23, :sswitch_data_0

    .line 3130
    :cond_5
    invoke-virtual/range {p0 .. p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->broadcastHardKeyIntent(Landroid/view/KeyEvent;)V

    .line 3136
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeys:Ljava/util/Map;

    move-object/from16 v31, v0

    if-eqz v31, :cond_6

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeys:Ljava/util/Map;

    move-object/from16 v31, v0

    invoke-interface/range {v31 .. v31}, Ljava/util/Map;->isEmpty()Z

    move-result v31

    if-eqz v31, :cond_9

    .line 3162
    :cond_6
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCombinationKeyManager:Lcom/android/server/policy/CombinationKeyManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    move-object/from16 v1, p1

    move/from16 v2, p2

    invoke-virtual {v0, v1, v2}, Lcom/android/server/policy/CombinationKeyManager;->interceptKeyCombinationBeforeQueueing(Landroid/view/KeyEvent;I)V

    .line 3165
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-static/range {v31 .. v31}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v31

    if-nez v31, :cond_7

    .line 3166
    move-object/from16 v0, p0

    move/from16 v1, v23

    move/from16 v2, v20

    invoke-virtual {v0, v1, v13, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->processTorchlight(IZZ)V

    .line 3170
    :cond_7
    const/16 v31, 0x3

    move/from16 v0, v23

    move/from16 v1, v31

    if-eq v0, v1, :cond_d

    move-object/from16 v0, p0

    move/from16 v1, v23

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isEnableAccessControl(I)Z

    move-result v31

    if-eqz v31, :cond_d

    .line 3171
    sget-boolean v31, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v31, :cond_8

    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "interceptKeyTq : Key was blocked by access control"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3172
    :cond_8
    const/16 v31, 0x2

    return v31

    .line 3122
    :sswitch_0
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Blocked by MirrorLink:"

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    move-object/from16 v1, p1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3123
    const/16 v31, 0x2

    return v31

    .line 3137
    :cond_9
    const/16 v21, 0x1

    .line 3138
    .local v21, "isAllowed":Z
    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v31

    if-nez v31, :cond_c

    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getRepeatCount()I

    move-result v31

    if-nez v31, :cond_c

    .line 3140
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v31, v0

    if-eqz v31, :cond_b

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v31

    if-eqz v31, :cond_b

    .line 3141
    const/16 v31, 0x0

    move-object/from16 v0, p0

    move/from16 v1, v23

    move/from16 v2, v31

    invoke-direct {v0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isHardwareKeyAllowed(IZ)Z

    move-result v21

    .line 3142
    .local v21, "isAllowed":Z
    const/16 v31, 0x18

    move/from16 v0, v23

    move/from16 v1, v31

    if-ne v0, v1, :cond_a

    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskReEnableVolumeUpKey:Z

    move/from16 v31, v0

    if-eqz v31, :cond_a

    .line 3143
    const/16 v21, 0x1

    .line 3154
    .end local v21    # "isAllowed":Z
    :cond_a
    :goto_2
    if-nez v21, :cond_6

    .line 3155
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "MDM: key is blocked"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3156
    const/16 v31, 0x2

    return v31

    .line 3146
    .local v21, "isAllowed":Z
    :cond_b
    const/16 v31, 0x1

    move-object/from16 v0, p0

    move/from16 v1, v23

    move/from16 v2, v31

    invoke-direct {v0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isHardwareKeyAllowed(IZ)Z

    move-result v21

    .local v21, "isAllowed":Z
    goto :goto_2

    .line 3152
    .local v21, "isAllowed":Z
    :cond_c
    const/16 v31, 0x0

    move-object/from16 v0, p0

    move/from16 v1, v23

    move/from16 v2, v31

    invoke-direct {v0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isHardwareKeyAllowed(IZ)Z

    move-result v21

    .local v21, "isAllowed":Z
    goto :goto_2

    .line 3178
    .end local v21    # "isAllowed":Z
    :cond_d
    const/16 v31, 0x4

    move/from16 v0, v23

    move/from16 v1, v31

    if-eq v0, v1, :cond_e

    const/16 v31, 0x7d

    move/from16 v0, v23

    move/from16 v1, v31

    if-ne v0, v1, :cond_10

    .line 3179
    :cond_e
    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v31

    if-eqz v31, :cond_10

    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v31

    invoke-virtual/range {v31 .. v31}, Landroid/view/InputDevice;->getProductId()I

    move-result v31

    const v32, 0xa500

    move/from16 v0, v31

    move/from16 v1, v32

    if-ne v0, v1, :cond_10

    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v31

    invoke-virtual/range {v31 .. v31}, Landroid/view/InputDevice;->getVendorId()I

    move-result v31

    const/16 v32, 0x4e8

    move/from16 v0, v31

    move/from16 v1, v32

    if-ne v0, v1, :cond_10

    .line 3180
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    move-object/from16 v31, v0

    if-eqz v31, :cond_f

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    move-object/from16 v31, v0

    invoke-interface/range {v31 .. v31}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v31

    move-object/from16 v0, v31

    iget v0, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    move/from16 v31, v0

    const/16 v32, 0x834

    move/from16 v0, v31

    move/from16 v1, v32

    if-eq v0, v1, :cond_10

    .line 3181
    :cond_f
    const-string v31, "sys.vs.mode"

    const/16 v32, 0x0

    invoke-static/range {v31 .. v32}, Landroid/os/SystemProperties;->getBoolean(Ljava/lang/String;Z)Z

    move-result v31

    .line 3177
    if-eqz v31, :cond_10

    .line 3181
    const-string v31, "sys.vs.visible"

    const/16 v32, 0x0

    invoke-static/range {v31 .. v32}, Landroid/os/SystemProperties;->getBoolean(Ljava/lang/String;Z)Z

    move-result v31

    .line 3177
    if-eqz v31, :cond_10

    .line 3183
    const/16 v31, 0x2

    return v31

    .line 3187
    :cond_10
    sparse-switch v23, :sswitch_data_1

    .line 3392
    :cond_11
    :goto_3
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v31, v0

    if-eqz v31, :cond_45

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v31

    if-eqz v31, :cond_45

    .line 3393
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/samsung/android/knox/custom/ProKioskManager;->getVolumeKeyAppState()Z

    move-result v31

    .line 3392
    if-eqz v31, :cond_45

    .line 3394
    if-eqz v13, :cond_45

    const/16 v31, 0x19

    move/from16 v0, v23

    move/from16 v1, v31

    if-eq v0, v1, :cond_12

    const/16 v31, 0x18

    move/from16 v0, v23

    move/from16 v1, v31

    if-ne v0, v1, :cond_45

    .line 3396
    :cond_12
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/android/server/policy/PhoneWindowManager;->isGlobalActionsDialogShowing()Z

    move-result v31

    if-eqz v31, :cond_36

    .line 3397
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Knox Custom: GlobalActions dialog showing; not doing Volume Key app switching"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3398
    const/16 v31, 0x18

    move/from16 v0, v23

    move/from16 v1, v31

    if-ne v0, v1, :cond_35

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/android/server/policy/PhoneWindowManager;->isGlobalActionsDialogPowerOptionHidden()Z

    move-result v31

    if-eqz v31, :cond_35

    .line 3399
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Knox Custom: GlobalActions dialog showing; forward the key for Power option display"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3400
    const/16 v31, 0x1

    return v31

    .line 3189
    :sswitch_1
    const/16 v26, 0x1

    .line 3190
    .local v26, "result":I
    sget-boolean v31, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v31, :cond_13

    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getFlags()I

    move-result v31

    const/high16 v32, 0x100000

    and-int v31, v31, v32

    if-eqz v31, :cond_13

    if-eqz v20, :cond_17

    .line 3196
    :cond_13
    :goto_4
    move-object/from16 v0, p0

    invoke-direct {v0, v13}, Lcom/android/server/policy/SamsungPhoneWindowManager;->checkTriggerQD(Z)Z

    move-result v31

    if-eqz v31, :cond_14

    .line 3197
    if-nez v20, :cond_19

    and-int/lit8 v31, p2, 0x1

    if-nez v31, :cond_18

    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->isWakeKey()Z

    move-result v31

    :goto_5
    move/from16 v0, v31

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakekey:Z

    .line 3198
    const/16 v26, 0x5

    .line 3202
    :cond_14
    if-nez v20, :cond_15

    if-eqz v13, :cond_15

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->hasCustomDoubleTapLaunchCommand()Z

    move-result v31

    if-eqz v31, :cond_15

    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNeedTriggerQD:Z

    move/from16 v31, v0

    if-eqz v31, :cond_1a

    .line 3208
    :cond_15
    :goto_6
    if-eqz v20, :cond_16

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/os/PowerManagerInternal;->isProximityPositive()Z

    move-result v31

    if-eqz v31, :cond_16

    if-eqz v13, :cond_16

    .line 3209
    const/16 v26, 0x12

    .line 3212
    :cond_16
    return v26

    .line 3190
    :cond_17
    if-eqz v13, :cond_13

    .line 3191
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "call onForcePressedSleep"

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3192
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/android/server/policy/NaviBarForceTouchManager;->onForcePressedSleep()V

    goto :goto_4

    .line 3197
    :cond_18
    const/16 v31, 0x1

    goto :goto_5

    :cond_19
    const/16 v31, 0x0

    goto :goto_5

    .line 3203
    :cond_1a
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mMultitapKeyManager:Lcom/android/server/policy/MultitapKeyPolicy;

    move-object/from16 v31, v0

    const/16 v32, 0x1

    move-object/from16 v0, v31

    move-object/from16 v1, p1

    move/from16 v2, v32

    invoke-interface {v0, v1, v2}, Lcom/android/server/policy/MultitapKeyPolicy;->dispatchMultitapKeyEvent(Landroid/view/KeyEvent;Z)Z

    move-result v31

    if-eqz v31, :cond_15

    .line 3204
    or-int/lit8 v26, v26, 0x8

    goto :goto_6

    .line 3217
    .end local v26    # "result":I
    :sswitch_2
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMirrorLinkEnabled()Z

    move-result v31

    if-eqz v31, :cond_1b

    .line 3218
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "isMirrorLinkEnabled() true"

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3219
    const/16 v31, 0x2

    return v31

    .line 3223
    :cond_1b
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsGearVrDocked:Z

    move/from16 v31, v0

    if-eqz v31, :cond_1c

    .line 3224
    const/16 v31, 0x2

    return v31

    .line 3228
    :cond_1c
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    move/from16 v1, v23

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SystemKeyManager;->isSystemKeyEventRequested(I)Z

    move-result v31

    if-nez v31, :cond_1d

    .line 3229
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSideSyncPresentationRunning()Z

    move-result v31

    if-eqz v31, :cond_1e

    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->semGetDisplayId()I

    move-result v31

    if-nez v31, :cond_1e

    .line 3230
    :cond_1d
    const/16 v31, 0x4

    return v31

    .line 3232
    :cond_1e
    const/16 v31, 0x8

    return v31

    .line 3237
    :sswitch_3
    if-nez v13, :cond_20

    .line 3238
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "launch voice LPSD"

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3239
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceWakeUpWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/os/PowerManager$WakeLock;->isHeld()Z

    move-result v31

    if-eqz v31, :cond_1f

    .line 3240
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceWakeUpWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/os/PowerManager$WakeLock;->release()V

    .line 3242
    :cond_1f
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceWakeUpWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v31, v0

    const-wide/16 v32, 0x1388

    invoke-virtual/range {v31 .. v33}, Landroid/os/PowerManager$WakeLock;->acquire(J)V

    .line 3243
    const-string v5, "com.samsung.android.app.sounddetector.VOICE_WAKEUP"

    .line 3244
    .local v5, "SOUND_DETECTOR_WAKEUP":Ljava/lang/String;
    new-instance v19, Landroid/content/Intent;

    move-object/from16 v0, v19

    invoke-direct {v0, v5}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 3245
    .local v19, "intent":Landroid/content/Intent;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    sget-object v32, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    move-object/from16 v0, v31

    move-object/from16 v1, v19

    move-object/from16 v2, v32

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 3247
    .end local v5    # "SOUND_DETECTOR_WAKEUP":Ljava/lang/String;
    .end local v19    # "intent":Landroid/content/Intent;
    :cond_20
    const/16 v31, 0x2

    return v31

    .line 3250
    :sswitch_4
    if-nez v13, :cond_22

    .line 3251
    invoke-static {}, Landroid/os/FactoryTest;->isFactoryMode()Z

    move-result v31

    if-nez v31, :cond_21

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-static/range {v31 .. v31}, Landroid/os/FactoryTest;->isAutomaticTestMode(Landroid/content/Context;)Z

    move-result v31

    if-eqz v31, :cond_23

    .line 3252
    :cond_21
    new-instance v19, Landroid/content/Intent;

    invoke-direct/range {v19 .. v19}, Landroid/content/Intent;-><init>()V

    .line 3253
    .restart local v19    # "intent":Landroid/content/Intent;
    const-string v31, "com.sec.android.intent.action.VOICE_WAKEUP_KEY"

    move-object/from16 v0, v19

    move-object/from16 v1, v31

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 3254
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    sget-object v32, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    .line 3255
    const-string v33, "com.sec.android.permission.HANDLE_VOICE_WAKEUP_KEY"

    .line 3254
    move-object/from16 v0, v31

    move-object/from16 v1, v19

    move-object/from16 v2, v32

    move-object/from16 v3, v33

    invoke-virtual {v0, v1, v2, v3}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V

    .line 3273
    .end local v19    # "intent":Landroid/content/Intent;
    :cond_22
    :goto_7
    const/16 v31, 0x2

    return v31

    .line 3257
    :cond_23
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsCheckDrivingMode:Z

    move/from16 v31, v0

    if-eqz v31, :cond_24

    .line 3259
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "launch drivelink"

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3260
    new-instance v19, Landroid/content/Intent;

    invoke-direct/range {v19 .. v19}, Landroid/content/Intent;-><init>()V

    .line 3261
    .restart local v19    # "intent":Landroid/content/Intent;
    const-string v31, "com.sec.android.automotive.drivelink.ACTION_VOICE_WAKEUP"

    move-object/from16 v0, v19

    move-object/from16 v1, v31

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 3262
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    sget-object v32, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v31

    move-object/from16 v1, v19

    move-object/from16 v2, v32

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    goto :goto_7

    .line 3266
    .end local v19    # "intent":Landroid/content/Intent;
    :cond_24
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "launch voice command"

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3267
    const-string v4, "com.samsung.alwaysmicon.alwaysmiconservice.ACTION_VOICE_WAKEUP"

    .line 3268
    .local v4, "LAUNCH_SVOICE_WAKEUP":Ljava/lang/String;
    new-instance v19, Landroid/content/Intent;

    move-object/from16 v0, v19

    invoke-direct {v0, v4}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 3269
    .restart local v19    # "intent":Landroid/content/Intent;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    sget-object v32, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v31

    move-object/from16 v1, v19

    move-object/from16 v2, v32

    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    goto :goto_7

    .line 3276
    .end local v4    # "LAUNCH_SVOICE_WAKEUP":Ljava/lang/String;
    .end local v19    # "intent":Landroid/content/Intent;
    :sswitch_5
    if-eqz v13, :cond_26

    .line 3277
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Press KEYCODE_DOUBLE_TAP"

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3278
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v31

    .line 3279
    const-string v32, "screen_off_memo"

    const/16 v33, 0x0

    const/16 v34, -0x2

    .line 3278
    invoke-static/range {v31 .. v34}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v31

    if-eqz v31, :cond_26

    .line 3280
    new-instance v27, Landroid/content/Intent;

    invoke-direct/range {v27 .. v27}, Landroid/content/Intent;-><init>()V

    .line 3281
    .local v27, "screenOffMemoIntent":Landroid/content/Intent;
    new-instance v31, Landroid/content/ComponentName;

    const-string v32, "com.samsung.android.app.notes"

    const-string v33, "com.samsung.android.app.notes.screenoffmemo.ScreenOffMemoService"

    invoke-direct/range {v31 .. v33}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    move-object/from16 v0, v27

    move-object/from16 v1, v31

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 3282
    const-string v31, "pen_intent_com"

    const-string v32, "pen_doubletab"

    move-object/from16 v0, v27

    move-object/from16 v1, v31

    move-object/from16 v2, v32

    invoke-virtual {v0, v1, v2}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;

    .line 3284
    sget-object v12, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    .line 3286
    .local v12, "curr":Landroid/os/UserHandle;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-static/range {v31 .. v31}, Lcom/samsung/android/knox/SemPersonaManager;->isKioskModeEnabled(Landroid/content/Context;)Z

    move-result v31

    if-eqz v31, :cond_25

    .line 3287
    new-instance v12, Landroid/os/UserHandle;

    .end local v12    # "curr":Landroid/os/UserHandle;
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v31

    invoke-virtual/range {v31 .. v31}, Lcom/samsung/android/knox/SemPersonaManager;->getKioskId()I

    move-result v31

    move/from16 v0, v31

    invoke-direct {v12, v0}, Landroid/os/UserHandle;-><init>(I)V

    .line 3291
    .restart local v12    # "curr":Landroid/os/UserHandle;
    :cond_25
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    move-object/from16 v1, v27

    invoke-virtual {v0, v1, v12}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;

    .line 3294
    .end local v12    # "curr":Landroid/os/UserHandle;
    .end local v27    # "screenOffMemoIntent":Landroid/content/Intent;
    :cond_26
    const/16 v31, 0x2

    return v31

    .line 3297
    :sswitch_6
    and-int/lit8 v31, p2, 0x1

    if-nez v31, :cond_28

    .line 3298
    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->isWakeKey()Z

    move-result v22

    .line 3299
    .local v22, "isWakeKey":Z
    :goto_8
    if-nez v22, :cond_27

    if-eqz v20, :cond_29

    .line 3303
    :cond_27
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportActiveDouble()Z

    move-result v31

    if-eqz v31, :cond_2c

    .line 3304
    invoke-virtual/range {p1 .. p1}, Landroid/view/KeyEvent;->getEventTime()J

    move-result-wide v32

    move-wide/from16 v0, v32

    move-object/from16 v2, p0

    iput-wide v0, v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyCurTime:J

    .line 3307
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyTriggered:Z

    move/from16 v31, v0

    if-nez v31, :cond_2b

    .line 3308
    if-nez v13, :cond_2a

    .line 3309
    const/16 v31, 0x1

    move/from16 v0, v31

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyTriggered:Z

    .line 3310
    move-object/from16 v0, p0

    iget-wide v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyCurTime:J

    move-wide/from16 v32, v0

    const-wide/16 v34, 0xaa

    add-long v32, v32, v34

    move-wide/from16 v0, v32

    move-object/from16 v2, p0

    iput-wide v0, v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyCurTime:J

    .line 3311
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v31, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyPress:Ljava/lang/Runnable;

    move-object/from16 v32, v0

    invoke-virtual/range {v31 .. v32}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 3312
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v31, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyPress:Ljava/lang/Runnable;

    move-object/from16 v32, v0

    const-wide/16 v34, 0xaa

    move-object/from16 v0, v31

    move-object/from16 v1, v32

    move-wide/from16 v2, v34

    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 3321
    :goto_9
    const/16 v31, 0x24

    return v31

    .line 3297
    .end local v22    # "isWakeKey":Z
    :cond_28
    const/16 v22, 0x1

    goto :goto_8

    .line 3300
    .restart local v22    # "isWakeKey":Z
    :cond_29
    const/16 v31, 0x2

    return v31

    .line 3314
    :cond_2a
    move-object/from16 v0, p0

    iget-wide v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyCurTime:J

    move-wide/from16 v32, v0

    const-wide/16 v34, 0x1f4

    add-long v32, v32, v34

    move-wide/from16 v0, v32

    move-object/from16 v2, p0

    iput-wide v0, v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyCurTime:J

    .line 3315
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v31, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyPress:Ljava/lang/Runnable;

    move-object/from16 v32, v0

    invoke-virtual/range {v31 .. v32}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 3316
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v31, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mActiveKeyPress:Ljava/lang/Runnable;

    move-object/from16 v32, v0

    const-wide/16 v34, 0x1f4

    move-object/from16 v0, v31

    move-object/from16 v1, v32

    move-wide/from16 v2, v34

    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    goto :goto_9

    .line 3319
    :cond_2b
    const/16 v31, 0x1

    move/from16 v0, v31

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDoublePressedUserKey:Z

    goto :goto_9

    .line 3323
    :cond_2c
    const/16 v31, 0x4

    return v31

    .line 3326
    .end local v22    # "isWakeKey":Z
    :sswitch_7
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-static/range {v31 .. v31}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v31

    const/16 v32, 0x1

    move/from16 v0, v31

    move/from16 v1, v32

    if-ne v0, v1, :cond_2d

    .line 3327
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I

    move/from16 v31, v0

    if-nez v31, :cond_2f

    if-eqz v13, :cond_2f

    .line 3328
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/os/PowerManager$WakeLock;->acquire()V

    .line 3329
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v31, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeDownLongPress:Ljava/lang/Runnable;

    move-object/from16 v32, v0

    invoke-virtual/range {v31 .. v32}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 3330
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v31, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeDownLongPress:Ljava/lang/Runnable;

    move-object/from16 v32, v0

    const-wide/16 v34, 0xbb8

    move-object/from16 v0, v31

    move-object/from16 v1, v32

    move-wide/from16 v2, v34

    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 3337
    :cond_2d
    :goto_a
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-static/range {v31 .. v31}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v31

    const/16 v32, 0x2

    move/from16 v0, v31

    move/from16 v1, v32

    if-ne v0, v1, :cond_11

    .line 3338
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "LidState="

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    move-object/from16 v0, v33

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I

    move/from16 v33, v0

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, "; isScreenOn="

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    invoke-virtual/range {v33 .. v33}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v33

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, "; mWatchLaunching="

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWatchLaunching:Z

    move/from16 v33, v0

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v32

    .line 3339
    const-string v33, "; isRingingOrOffhook="

    .line 3338
    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    .line 3339
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isRingingOrOffhook()Z

    move-result v33

    .line 3338
    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v32

    .line 3339
    const-string v33, "; isUsingSound="

    .line 3338
    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    .line 3339
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isUsingSound()Z

    move-result v33

    .line 3338
    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3340
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I

    move/from16 v31, v0

    if-nez v31, :cond_2e

    if-eqz v13, :cond_2e

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v31

    if-eqz v31, :cond_30

    .line 3349
    :cond_2e
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWatchLaunching:Z

    move/from16 v31, v0

    if-eqz v31, :cond_11

    .line 3351
    const/16 v31, 0x2

    return v31

    .line 3332
    :cond_2f
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v31, v0

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeDownLongPress:Ljava/lang/Runnable;

    move-object/from16 v32, v0

    invoke-virtual/range {v31 .. v32}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 3333
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/os/PowerManager$WakeLock;->isHeld()Z

    move-result v31

    if-eqz v31, :cond_2d

    .line 3334
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightWakeLock:Landroid/os/PowerManager$WakeLock;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/os/PowerManager$WakeLock;->release()V

    goto/16 :goto_a

    .line 3340
    :cond_30
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWatchLaunching:Z

    move/from16 v31, v0

    if-nez v31, :cond_2e

    .line 3341
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isRingingOrOffhook()Z

    move-result v31

    if-nez v31, :cond_2e

    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isUsingSound()Z

    move-result v31

    if-nez v31, :cond_2e

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v31

    .line 3340
    if-eqz v31, :cond_2e

    .line 3342
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v31

    .line 3343
    const-string v32, "premium_watch_switch_onoff"

    const/16 v33, 0x0

    .line 3342
    invoke-static/range {v31 .. v33}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v30

    .line 3344
    .local v30, "watchOn":I
    const/16 v31, 0x1

    move/from16 v0, v30

    move/from16 v1, v31

    if-ne v0, v1, :cond_11

    .line 3345
    const/16 v31, 0x1

    move/from16 v0, v31

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWatchLaunching:Z

    .line 3346
    const/16 v31, 0x1

    move-object/from16 v0, p0

    move/from16 v1, v31

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->launchPremiumWatch(Z)V

    .line 3347
    const/16 v31, 0x2

    return v31

    .line 3357
    .end local v30    # "watchOn":I
    :sswitch_8
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    move-object/from16 v0, v31

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mHasNavigationBar:Z

    move/from16 v31, v0

    if-eqz v31, :cond_11

    if-eqz v13, :cond_11

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isVoIPRinging()Z

    move-result v31

    if-eqz v31, :cond_11

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isVolumeKeyMode()Z

    move-result v31

    if-eqz v31, :cond_11

    .line 3359
    :try_start_0
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getVoIPInterfaceService()Landroid/os/IVoIPInterface;

    move-result-object v29

    .line 3360
    .local v29, "voipInterfaceService":Landroid/os/IVoIPInterface;
    if-eqz v29, :cond_31

    .line 3361
    invoke-interface/range {v29 .. v29}, Landroid/os/IVoIPInterface;->answerVoIPCall()Z

    .line 3362
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "VU; while ringing: Answer VoIPcall!"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3363
    const/16 v31, 0x2

    return v31

    .line 3365
    :cond_31
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Unable to find IVoIPInterface interface"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    goto/16 :goto_3

    .line 3367
    .end local v29    # "voipInterfaceService":Landroid/os/IVoIPInterface;
    :catch_0
    move-exception v15

    .line 3368
    .local v15, "ex":Landroid/os/RemoteException;
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "RemoteException from getVoIPInterfaceService()"

    move-object/from16 v0, v31

    move-object/from16 v1, v32

    invoke-static {v0, v1, v15}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto/16 :goto_3

    .line 3375
    .end local v15    # "ex":Landroid/os/RemoteException;
    :sswitch_9
    if-eqz v20, :cond_34

    .line 3376
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/os/PowerManagerInternal;->isProximityPositive()Z

    move-result v31

    if-eqz v31, :cond_33

    .line 3377
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    move-object/from16 v31, v0

    if-nez v31, :cond_32

    .line 3378
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    const-string v32, "phone"

    invoke-virtual/range {v31 .. v32}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v31

    check-cast v31, Landroid/telephony/TelephonyManager;

    move-object/from16 v0, v31

    move-object/from16 v1, p0

    iput-object v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    .line 3381
    :cond_32
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/telephony/TelephonyManager;->getCallState()I

    move-result v31

    const/16 v32, 0x2

    move/from16 v0, v31

    move/from16 v1, v32

    if-ne v0, v1, :cond_33

    .line 3382
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "no wakeup(prox and inCall)"

    invoke-static/range {v31 .. v32}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3383
    const/16 v31, 0x22

    return v31

    .line 3386
    :cond_33
    const/16 v31, 0x1

    return v31

    .line 3388
    :cond_34
    const/16 v31, 0x4

    return v31

    .line 3402
    :cond_35
    const/16 v31, 0x2

    return v31

    .line 3405
    :cond_36
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Knox Custom: Volume Key app switching starting"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3406
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Lcom/samsung/android/knox/custom/ProKioskManager;->getVolumeKeyAppsList()Ljava/util/List;

    move-result-object v7

    .line 3407
    .local v7, "appList":Ljava/util/List;, "Ljava/util/List<Ljava/lang/String;>;"
    if-eqz v7, :cond_37

    invoke-interface {v7}, Ljava/util/List;->size()I

    move-result v31

    if-nez v31, :cond_39

    .line 3408
    :cond_37
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Knox Custom: no apps in list"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3480
    :cond_38
    :goto_b
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Knox Custom: Volume Key app switching done"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3481
    const/16 v31, 0x2

    return v31

    .line 3410
    :cond_39
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-interface {v7}, Ljava/util/List;->size()I

    move-result v33

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, " apps in list"

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3411
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    const-string v32, "activity"

    invoke-virtual/range {v31 .. v32}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Landroid/app/ActivityManager;

    .line 3412
    .local v6, "activityManager":Landroid/app/ActivityManager;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v25

    .line 3415
    .local v25, "pm":Landroid/content/pm/PackageManager;
    new-instance v11, Ljava/util/ArrayList;

    invoke-direct {v11}, Ljava/util/ArrayList;-><init>()V

    .line 3416
    .local v11, "availableAppList":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Ljava/lang/String;>;"
    invoke-interface {v7}, Ljava/lang/Iterable;->iterator()Ljava/util/Iterator;

    move-result-object v9

    .local v9, "appListItem$iterator":Ljava/util/Iterator;
    :goto_c
    invoke-interface {v9}, Ljava/util/Iterator;->hasNext()Z

    move-result v31

    if-eqz v31, :cond_3b

    invoke-interface {v9}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Ljava/lang/String;

    .line 3417
    .local v8, "appListItem":Ljava/lang/String;
    move-object/from16 v0, v25

    invoke-virtual {v0, v8}, Landroid/content/pm/PackageManager;->getLaunchIntentForPackage(Ljava/lang/String;)Landroid/content/Intent;

    move-result-object v10

    .line 3418
    .local v10, "appStartIntent":Landroid/content/Intent;
    if-eqz v10, :cond_3a

    .line 3419
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    invoke-virtual {v0, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, " available"

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3420
    invoke-virtual {v11, v8}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    goto :goto_c

    .line 3422
    :cond_3a
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    invoke-virtual {v0, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, " not available"

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_c

    .line 3425
    .end local v8    # "appListItem":Ljava/lang/String;
    .end local v10    # "appStartIntent":Landroid/content/Intent;
    :cond_3b
    invoke-virtual {v11}, Ljava/util/ArrayList;->size()I

    move-result v31

    if-nez v31, :cond_3c

    .line 3426
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "Knox Custom: no available apps"

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_b

    .line 3430
    :cond_3c
    const v31, 0x7fffffff

    move/from16 v0, v31

    invoke-virtual {v6, v0}, Landroid/app/ActivityManager;->getRunningTasks(I)Ljava/util/List;

    move-result-object v28

    .line 3431
    .local v28, "services":Ljava/util/List;, "Ljava/util/List<Landroid/app/ActivityManager$RunningTaskInfo;>;"
    const/16 v31, 0x0

    move-object/from16 v0, v28

    move/from16 v1, v31

    invoke-interface {v0, v1}, Ljava/util/List;->get(I)Ljava/lang/Object;

    move-result-object v31

    check-cast v31, Landroid/app/ActivityManager$RunningTaskInfo;

    move-object/from16 v0, v31

    iget-object v0, v0, Landroid/app/ActivityManager$RunningTaskInfo;->topActivity:Landroid/content/ComponentName;

    move-object/from16 v31, v0

    invoke-virtual/range {v31 .. v31}, Landroid/content/ComponentName;->getPackageName()Ljava/lang/String;

    move-result-object v31

    invoke-virtual/range {v31 .. v31}, Ljava/lang/String;->toString()Ljava/lang/String;

    move-result-object v16

    .line 3432
    .local v16, "foregroundApp":Ljava/lang/String;
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    move-object/from16 v1, v16

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, " in foreground"

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3434
    const/16 v17, -0x1

    .line 3435
    .local v17, "foregroundAppIndex":I
    const/16 v18, 0x0

    .local v18, "i":I
    :goto_d
    invoke-virtual {v11}, Ljava/util/ArrayList;->size()I

    move-result v31

    move/from16 v0, v18

    move/from16 v1, v31

    if-ge v0, v1, :cond_3e

    .line 3436
    move/from16 v0, v18

    invoke-virtual {v11, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v31

    check-cast v31, Ljava/lang/String;

    move-object/from16 v0, v16

    move-object/from16 v1, v31

    invoke-virtual {v0, v1}, Ljava/lang/String;->equalsIgnoreCase(Ljava/lang/String;)Z

    move-result v31

    if-eqz v31, :cond_3d

    .line 3437
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    move-object/from16 v1, v16

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, " found at index "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    move/from16 v1, v18

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3438
    move/from16 v17, v18

    .line 3435
    :cond_3d
    add-int/lit8 v18, v18, 0x1

    goto :goto_d

    .line 3441
    :cond_3e
    const/16 v31, -0x1

    move/from16 v0, v17

    move/from16 v1, v31

    if-ne v0, v1, :cond_3f

    .line 3442
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    move-object/from16 v1, v16

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, " not found in list; use first"

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3445
    :cond_3f
    move-object/from16 v24, v16

    .line 3446
    .local v24, "newApp":Ljava/lang/String;
    const/16 v31, 0x19

    move/from16 v0, v23

    move/from16 v1, v31

    if-ne v0, v1, :cond_42

    .line 3447
    if-lez v17, :cond_41

    .line 3448
    add-int/lit8 v31, v17, -0x1

    move/from16 v0, v31

    invoke-virtual {v11, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v24

    .end local v24    # "newApp":Ljava/lang/String;
    check-cast v24, Ljava/lang/String;

    .line 3461
    .restart local v24    # "newApp":Ljava/lang/String;
    :cond_40
    :goto_e
    move-object/from16 v0, v24

    move-object/from16 v1, v16

    invoke-virtual {v0, v1}, Ljava/lang/String;->equalsIgnoreCase(Ljava/lang/String;)Z

    move-result v31

    if-eqz v31, :cond_44

    .line 3462
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    move-object/from16 v1, v16

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    const-string v33, " already in foreground"

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_b

    .line 3450
    :cond_41
    invoke-virtual {v11}, Ljava/util/ArrayList;->size()I

    move-result v31

    add-int/lit8 v31, v31, -0x1

    move/from16 v0, v31

    invoke-virtual {v11, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v24

    .end local v24    # "newApp":Ljava/lang/String;
    check-cast v24, Ljava/lang/String;

    .restart local v24    # "newApp":Ljava/lang/String;
    goto :goto_e

    .line 3452
    :cond_42
    const/16 v31, 0x18

    move/from16 v0, v23

    move/from16 v1, v31

    if-ne v0, v1, :cond_40

    .line 3453
    invoke-virtual {v11}, Ljava/util/ArrayList;->size()I

    move-result v31

    add-int/lit8 v31, v31, -0x1

    move/from16 v0, v17

    move/from16 v1, v31

    if-ge v0, v1, :cond_43

    .line 3454
    add-int/lit8 v31, v17, 0x1

    move/from16 v0, v31

    invoke-virtual {v11, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v24

    .end local v24    # "newApp":Ljava/lang/String;
    check-cast v24, Ljava/lang/String;

    .restart local v24    # "newApp":Ljava/lang/String;
    goto :goto_e

    .line 3456
    :cond_43
    const/16 v31, 0x0

    move/from16 v0, v31

    invoke-virtual {v11, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v24

    .end local v24    # "newApp":Ljava/lang/String;
    check-cast v24, Ljava/lang/String;

    .restart local v24    # "newApp":Ljava/lang/String;
    goto :goto_e

    .line 3464
    :cond_44
    move-object/from16 v0, v25

    move-object/from16 v1, v24

    invoke-virtual {v0, v1}, Landroid/content/pm/PackageManager;->getLaunchIntentForPackage(Ljava/lang/String;)Landroid/content/Intent;

    move-result-object v10

    .line 3465
    .restart local v10    # "appStartIntent":Landroid/content/Intent;
    const-string v31, "SamsungPhoneWindowManager"

    new-instance v32, Ljava/lang/StringBuilder;

    invoke-direct/range {v32 .. v32}, Ljava/lang/StringBuilder;-><init>()V

    const-string v33, "Knox Custom: switching to "

    invoke-virtual/range {v32 .. v33}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    move-object/from16 v0, v32

    move-object/from16 v1, v24

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v32

    invoke-virtual/range {v32 .. v32}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v32

    invoke-static/range {v31 .. v32}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3466
    if-eqz v10, :cond_38

    .line 3467
    const/high16 v31, 0x10400000

    move/from16 v0, v31

    invoke-virtual {v10, v0}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 3470
    :try_start_1
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v31, v0

    sget-object v32, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    move-object/from16 v0, v31

    move-object/from16 v1, v32

    invoke-virtual {v0, v10, v1}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_1
    .catch Landroid/content/ActivityNotFoundException; {:try_start_1 .. :try_end_1} :catch_1

    goto/16 :goto_b

    .line 3471
    :catch_1
    move-exception v14

    .line 3472
    .local v14, "e":Landroid/content/ActivityNotFoundException;
    const-string v31, "SamsungPhoneWindowManager"

    const-string v32, "No activity to launch Knox Custom switching."

    move-object/from16 v0, v31

    move-object/from16 v1, v32

    invoke-static {v0, v1, v14}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto/16 :goto_b

    .line 3486
    .end local v6    # "activityManager":Landroid/app/ActivityManager;
    .end local v7    # "appList":Ljava/util/List;, "Ljava/util/List<Ljava/lang/String;>;"
    .end local v9    # "appListItem$iterator":Ljava/util/Iterator;
    .end local v10    # "appStartIntent":Landroid/content/Intent;
    .end local v11    # "availableAppList":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Ljava/lang/String;>;"
    .end local v14    # "e":Landroid/content/ActivityNotFoundException;
    .end local v16    # "foregroundApp":Ljava/lang/String;
    .end local v17    # "foregroundAppIndex":I
    .end local v18    # "i":I
    .end local v24    # "newApp":Ljava/lang/String;
    .end local v25    # "pm":Landroid/content/pm/PackageManager;
    .end local v28    # "services":Ljava/util/List;, "Ljava/util/List<Landroid/app/ActivityManager$RunningTaskInfo;>;"
    :cond_45
    const/16 v31, 0x1

    return v31

    .line 3118
    :sswitch_data_0
    .sparse-switch
        0x18 -> :sswitch_0
        0x19 -> :sswitch_0
        0x3f7 -> :sswitch_0
    .end sparse-switch

    .line 3187
    :sswitch_data_1
    .sparse-switch
        0x3 -> :sswitch_1
        0x18 -> :sswitch_8
        0x19 -> :sswitch_7
        0x1a -> :sswitch_2
        0x3f7 -> :sswitch_6
        0x426 -> :sswitch_4
        0x427 -> :sswitch_3
        0x436 -> :sswitch_5
        0x43a -> :sswitch_9
    .end sparse-switch
.end method

.method public interceptPowerKeyDown()V
    .locals 3

    .prologue
    .line 8541
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    if-nez v1, :cond_1

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportFlipCover:Z

    if-nez v1, :cond_0

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    if-eqz v1, :cond_1

    .line 8542
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getCoverManager()Lcom/samsung/android/cover/ICoverManager;

    move-result-object v1

    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    .line 8544
    :cond_1
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    if-eqz v1, :cond_4

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v1, :cond_4

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportFlipCover:Z

    if-nez v1, :cond_2

    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    if-eqz v1, :cond_4

    .line 8545
    :cond_2
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v1, v1, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-nez v1, :cond_4

    .line 8546
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v1}, Lcom/samsung/android/cover/CoverState;->getType()I

    move-result v1

    const/4 v2, 0x7

    if-eq v1, v2, :cond_3

    .line 8547
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v1}, Lcom/samsung/android/cover/CoverState;->getType()I

    move-result v1

    if-nez v1, :cond_5

    .line 8551
    :cond_3
    :goto_0
    :try_start_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverManager:Lcom/samsung/android/cover/ICoverManager;

    invoke-interface {v1}, Lcom/samsung/android/cover/ICoverManager;->sendPowerKeyToCover()V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 8539
    :cond_4
    :goto_1
    return-void

    .line 8548
    :cond_5
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v1}, Lcom/samsung/android/cover/CoverState;->getType()I

    move-result v1

    const/16 v2, 0xb

    if-ne v1, v2, :cond_4

    goto :goto_0

    .line 8552
    :catch_0
    move-exception v0

    .line 8553
    .local v0, "ex":Landroid/os/RemoteException;
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "CoverManager threw RemoteException"

    invoke-static {v1, v2, v0}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_1
.end method

.method public isAccessiblityEnabled()Z
    .locals 1

    .prologue
    .line 5276
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mAccessibilityManager:Landroid/view/accessibility/AccessibilityManager;

    invoke-virtual {v0}, Landroid/view/accessibility/AccessibilityManager;->isEnabled()Z

    move-result v0

    return v0
.end method

.method public isActivitiesAvailable(Landroid/content/Intent;)Z
    .locals 4
    .param p1, "intent"    # Landroid/content/Intent;

    .prologue
    const/4 v3, 0x0

    .line 5086
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v1

    .line 5087
    .local v1, "pm":Landroid/content/pm/PackageManager;
    if-eqz v1, :cond_0

    .line 5089
    const/high16 v2, 0x50000

    .line 5088
    invoke-virtual {v1, p1, v2}, Landroid/content/pm/PackageManager;->queryIntentActivities(Landroid/content/Intent;I)Ljava/util/List;

    move-result-object v0

    .line 5090
    .local v0, "activities":Ljava/util/List;, "Ljava/util/List<Landroid/content/pm/ResolveInfo;>;"
    invoke-interface {v0}, Ljava/util/List;->size()I

    move-result v2

    if-lez v2, :cond_0

    .line 5091
    const/4 v2, 0x1

    return v2

    .line 5094
    .end local v0    # "activities":Ljava/util/List;, "Ljava/util/List<Landroid/content/pm/ResolveInfo;>;"
    :cond_0
    return v3
.end method

.method public isAnyKeyMode()Z
    .locals 4

    .prologue
    .line 6011
    const/4 v0, 0x0

    .line 6012
    .local v0, "isAnyKeyMode":Z
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    const-string v2, "anykey_mode"

    const/4 v3, 0x0

    invoke-static {v1, v2, v3}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v1

    const/4 v2, 0x1

    if-ge v1, v2, :cond_0

    .line 6013
    const/4 v0, 0x0

    .line 6017
    :goto_0
    return v0

    .line 6015
    :cond_0
    const/4 v0, 0x1

    goto :goto_0
.end method

.method public isAvailableOneTouchReport()Z
    .locals 3

    .prologue
    .line 4502
    const-string v0, "SamsungPhoneWindowManager"

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "isAvailableOneTouchReport = "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableOneTouchReport:Z

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4503
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableOneTouchReport:Z

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v0}, Lcom/android/server/policy/SamsungPolicyProperties;->isOneTouchReportChordEnabled(Landroid/content/Context;)Z

    move-result v0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public isBlockedKeyBySideSync(Landroid/view/KeyEvent;)Z
    .locals 2
    .param p1, "event"    # Landroid/view/KeyEvent;

    .prologue
    const/4 v1, 0x0

    .line 5776
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSideSyncSourcePresentationActived:Z

    if-eqz v0, :cond_1

    invoke-virtual {p1}, Landroid/view/KeyEvent;->semGetDisplayId()I

    move-result v0

    if-nez v0, :cond_1

    .line 5777
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v0

    sparse-switch v0, :sswitch_data_0

    .line 5785
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->hasNavigationBar()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 5786
    return v1

    .line 5782
    :sswitch_0
    return v1

    .line 5788
    :cond_0
    const/4 v0, 0x1

    return v0

    .line 5791
    :cond_1
    return v1

    .line 5777
    nop

    :sswitch_data_0
    .sparse-switch
        0x3 -> :sswitch_0
        0x18 -> :sswitch_0
        0x19 -> :sswitch_0
        0x1a -> :sswitch_0
    .end sparse-switch
.end method

.method public isBlockedPowerKeyByKeyTest()Z
    .locals 3

    .prologue
    .line 5836
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v1}, Lcom/android/server/policy/SystemKeyManager;->getCurrentTopActivity()Landroid/content/ComponentName;

    move-result-object v0

    .line 5837
    .local v0, "componentName":Landroid/content/ComponentName;
    invoke-static {}, Landroid/os/FactoryTest;->needBlockingPowerKey()Z

    move-result v1

    if-nez v1, :cond_0

    if-eqz v0, :cond_2

    .line 5838
    invoke-virtual {v0}, Landroid/content/ComponentName;->getClassName()Ljava/lang/String;

    move-result-object v1

    const-string v2, "com.sec.factory.app.ui.UIHardKey"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 5839
    invoke-virtual {v0}, Landroid/content/ComponentName;->getClassName()Ljava/lang/String;

    move-result-object v1

    const-string v2, "com.sec.OneJigBinary.testitem.KeyTest"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    .line 5838
    if-nez v1, :cond_0

    .line 5840
    invoke-virtual {v0}, Landroid/content/ComponentName;->getClassName()Ljava/lang/String;

    move-result-object v1

    const-string v2, "com.sec.android.app.simplefunctiontest.KeypadTest"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    .line 5838
    if-nez v1, :cond_0

    .line 5841
    invoke-virtual {v0}, Landroid/content/ComponentName;->getClassName()Ljava/lang/String;

    move-result-object v1

    const-string v2, "com.sec.factory.app.spcselftest.SpcSelfTestMain"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    .line 5838
    if-nez v1, :cond_0

    .line 5842
    invoke-virtual {v0}, Landroid/content/ComponentName;->getClassName()Ljava/lang/String;

    move-result-object v1

    const-string v2, "com.sec.android.app.latin.tdfnotifier"

    invoke-virtual {v1, v2}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v1

    .line 5837
    if-eqz v1, :cond_2

    .line 5844
    :cond_0
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_1

    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Skip power key behavior by FactoryTest application"

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 5845
    :cond_1
    const/4 v1, 0x1

    return v1

    .line 5847
    :cond_2
    const/4 v1, 0x0

    return v1
.end method

.method public isCarModeBarVisible()Z
    .locals 1

    .prologue
    .line 8363
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8364
    const/4 v0, 0x1

    return v0

    .line 8366
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public isCarModeEnabled()Z
    .locals 4

    .prologue
    const/4 v0, 0x1

    const/4 v1, 0x0

    .line 8374
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v2

    const-string v3, "car_mode_on"

    invoke-static {v2, v3, v1}, Landroid/provider/Settings$Secure;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v2

    if-ne v2, v0, :cond_0

    :goto_0
    return v0

    :cond_0
    move v0, v1

    goto :goto_0
.end method

.method public isCarModeNotSupportBixby()Z
    .locals 4

    .prologue
    const/4 v0, 0x1

    const/4 v1, 0x0

    .line 8378
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v2

    const-string v3, "car_mode_not_support_bixby"

    invoke-static {v2, v3, v1}, Landroid/provider/Settings$Secure;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v2

    if-ne v2, v0, :cond_0

    :goto_0
    return v0

    :cond_0
    move v0, v1

    goto :goto_0
.end method

.method public isCarrierLocked()Z
    .locals 2

    .prologue
    .line 6162
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockPatternUtils:Lcom/android/internal/widget/LockPatternUtils;

    invoke-static {}, Landroid/app/ActivityManager;->getCurrentUser()I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/android/internal/widget/LockPatternUtils;->isCarrierLockPlusEnabled(I)Z

    move-result v0

    if-nez v0, :cond_0

    .line 6163
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockPatternUtils:Lcom/android/internal/widget/LockPatternUtils;

    invoke-static {}, Landroid/app/ActivityManager;->getCurrentUser()I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/android/internal/widget/LockPatternUtils;->isFMMLockEnabled(I)Z

    move-result v0

    .line 6162
    if-nez v0, :cond_0

    .line 6164
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockPatternUtils:Lcom/android/internal/widget/LockPatternUtils;

    invoke-static {}, Landroid/app/ActivityManager;->getCurrentUser()I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/android/internal/widget/LockPatternUtils;->isRMMLockEnabled(I)Z

    move-result v0

    .line 6162
    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x1

    goto :goto_0
.end method

.method public isCombinationKeyTriggered()Z
    .locals 1

    .prologue
    .line 3495
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCombinationKeyManager:Lcom/android/server/policy/CombinationKeyManager;

    invoke-virtual {v0}, Lcom/android/server/policy/CombinationKeyManager;->isCombinationKeyTriggered()Z

    move-result v0

    return v0
.end method

.method public isComponentAvailable(Landroid/content/ComponentName;)Z
    .locals 4
    .param p1, "name"    # Landroid/content/ComponentName;

    .prologue
    const/4 v3, 0x0

    .line 5098
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v1

    .line 5100
    .local v1, "pm":Landroid/content/pm/PackageManager;
    if-eqz v1, :cond_0

    .line 5101
    const/16 v2, 0x80

    .line 5100
    :try_start_0
    invoke-virtual {v1, p1, v2}, Landroid/content/pm/PackageManager;->getActivityInfo(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;
    :try_end_0
    .catch Landroid/content/pm/PackageManager$NameNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    move-result-object v2

    if-eqz v2, :cond_0

    .line 5102
    const/4 v2, 0x1

    return v2

    .line 5104
    :cond_0
    return v3

    .line 5106
    :catch_0
    move-exception v0

    .line 5107
    .local v0, "e":Landroid/content/pm/PackageManager$NameNotFoundException;
    return v3
.end method

.method public isCurrentUserSetupComplete()Z
    .locals 1

    .prologue
    .line 1937
    sget v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentUser:I

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x1

    goto :goto_0
.end method

.method public isDesktopDockConnected()Z
    .locals 1

    .prologue
    .line 8639
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDesktopModeManager:Lcom/samsung/android/desktopmode/SemDesktopModeManager;

    if-eqz v0, :cond_0

    .line 8640
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDesktopModeManager:Lcom/samsung/android/desktopmode/SemDesktopModeManager;

    invoke-static {}, Lcom/samsung/android/desktopmode/SemDesktopModeManager;->isDesktopDockConnected()Z

    move-result v0

    return v0

    .line 8642
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public isDesktopModeForPreparing()Z
    .locals 2

    .prologue
    .line 8647
    invoke-static {}, Lcom/android/server/desktopmode/DesktopModeService$Lifecycle;->getService()Lcom/android/server/desktopmode/DesktopModeService;

    move-result-object v0

    .line 8648
    .local v0, "desktopService":Lcom/android/server/desktopmode/DesktopModeService;
    if-eqz v0, :cond_0

    .line 8649
    invoke-virtual {v0}, Lcom/android/server/desktopmode/DesktopModeService;->isDesktopModeForPreparing()Z

    move-result v1

    return v1

    .line 8652
    :cond_0
    const/4 v1, 0x0

    return v1
.end method

.method public isDesktopModeTi()Z
    .locals 1

    .prologue
    .line 9220
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDesktopMode:Z

    return v0
.end method

.method public isDeviceProvisioned()Z
    .locals 3

    .prologue
    const/4 v0, 0x0

    .line 5082
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    const-string v2, "device_provisioned"

    .line 5081
    invoke-static {v1, v2, v0}, Landroid/provider/Settings$Global;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v1

    if-eqz v1, :cond_0

    const/4 v0, 0x1

    :cond_0
    return v0
.end method

.method public isDirectAccessEnabled(Z)Z
    .locals 3
    .param p1, "isHomeTriple"    # Z

    .prologue
    const/4 v1, 0x0

    const/4 v0, 0x1

    .line 3638
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDeviceProvisioned()Z

    move-result v2

    invoke-static {v2}, Lcom/android/server/policy/SamsungPolicyProperties;->isVzwSetupWizardRunning(Z)Z

    move-result v2

    if-eqz v2, :cond_0

    .line 3639
    const-string v0, "SamsungPhoneWindowManager"

    const-string v2, "block to trigger accessiblity when Verizon Setup Wizard Running"

    invoke-static {v0, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3640
    return v1

    .line 3643
    :cond_0
    if-eqz p1, :cond_2

    .line 3645
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    if-ne v2, v0, :cond_1

    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandTriggerType:I

    if-ne v2, v0, :cond_1

    .line 3646
    return v0

    .line 3650
    :cond_1
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager;->hasNavigationBar()Z

    move-result v2

    if-eqz v2, :cond_2

    .line 3651
    return v1

    .line 3655
    :cond_2
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDirectAccessBehavior:I

    if-nez v2, :cond_3

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDeviceProvisioned()Z

    move-result v2

    if-eqz v2, :cond_3

    move v0, v1

    :cond_3
    return v0
.end method

.method public isDockHomeEnabled(Landroid/content/Intent;)Z
    .locals 3
    .param p1, "intent"    # Landroid/content/Intent;

    .prologue
    .line 1945
    const/4 v0, 0x1

    .line 1946
    .local v0, "resDeskHomeEnabled":Z
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsTablet:Z

    if-nez v1, :cond_1

    .line 1947
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsJapanModel:Z

    if-eqz v1, :cond_1

    const-string v1, "SC-04F"

    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mModelName:Ljava/lang/String;

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-nez v1, :cond_0

    const-string v1, "SCL23"

    sget-object v2, Lcom/android/server/policy/SamsungPhoneWindowManager;->mModelName:Ljava/lang/String;

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 1949
    :cond_0
    invoke-virtual {p1}, Landroid/content/Intent;->getCategories()Ljava/util/Set;

    move-result-object v1

    if-eqz v1, :cond_1

    invoke-virtual {p1}, Landroid/content/Intent;->getCategories()Ljava/util/Set;

    move-result-object v1

    const-string v2, "android.intent.category.DESK_DOCK"

    invoke-interface {v1, v2}, Ljava/util/Set;->contains(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 1950
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDockHomeEnabled:Z

    .line 1954
    .end local v0    # "resDeskHomeEnabled":Z
    :cond_1
    return v0
.end method

.method public isDoubleTapLaunchEnabled(Landroid/view/KeyEvent;)Z
    .locals 5
    .param p1, "event"    # Landroid/view/KeyEvent;

    .prologue
    const/4 v4, 0x1

    const/4 v1, 0x0

    .line 3502
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isVzwSetupRunning()Z

    move-result v2

    if-eqz v2, :cond_0

    .line 3503
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Home Double Tap block when Verizon Setup Wizard Running"

    invoke-static {v2, v3}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3504
    return v1

    .line 3507
    :cond_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager;->hasNavigationBar()Z

    move-result v2

    if-eqz v2, :cond_1

    if-eqz p1, :cond_1

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v2

    if-nez v2, :cond_1

    .line 3508
    iput-boolean v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapEnabled:Z

    .line 3511
    :cond_1
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager;->hasNavigationBar()Z

    move-result v2

    if-eqz v2, :cond_2

    if-eqz p1, :cond_2

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v2

    if-ne v2, v4, :cond_2

    .line 3512
    sget-boolean v2, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v2, :cond_6

    .line 3513
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getFlags()I

    move-result v2

    const/high16 v3, 0x100000

    and-int/2addr v2, v3

    if-eqz v2, :cond_5

    .line 3514
    iput-boolean v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapEnabled:Z

    .line 3522
    :cond_2
    :goto_0
    const-string v2, "service.camera.running"

    const-string v3, "0"

    invoke-static {v2, v3}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v2

    const-string v3, "1"

    invoke-virtual {v2, v3}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    .line 3524
    .local v0, "isCameraRunning":Z
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    if-eq v2, v4, :cond_3

    if-eqz v0, :cond_4

    :cond_3
    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapEnabled:Z

    :cond_4
    return v1

    .line 3516
    .end local v0    # "isCameraRunning":Z
    :cond_5
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapEnabled:Z

    goto :goto_0

    .line 3519
    :cond_6
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapEnabled:Z

    goto :goto_0
.end method

.method public isDoubleTapOnPowerEnabled()Z
    .locals 3

    .prologue
    .line 3718
    const-string v1, "service.camera.running"

    const-string v2, "0"

    invoke-static {v1, v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    const-string v2, "1"

    invoke-virtual {v1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    .line 3719
    .local v0, "isCameraRunning":Z
    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerDoubleBehavior:Z

    if-nez v1, :cond_0

    .end local v0    # "isCameraRunning":Z
    :goto_0
    return v0

    .restart local v0    # "isCameraRunning":Z
    :cond_0
    const/4 v0, 0x1

    goto :goto_0
.end method

.method public isDozeDream()Z
    .locals 6

    .prologue
    .line 9176
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    if-eqz v3, :cond_2

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    invoke-virtual {v3}, Landroid/view/Display;->getState()I

    move-result v3

    const/4 v4, 0x3

    if-eq v3, v4, :cond_0

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    invoke-virtual {v3}, Landroid/view/Display;->getState()I

    move-result v3

    const/4 v4, 0x4

    if-ne v3, v4, :cond_2

    :cond_0
    const/4 v0, 0x1

    .line 9177
    .local v0, "dozeMode":Z
    :goto_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-static {}, Lcom/android/server/policy/PhoneWindowManager;->getDreamManager()Landroid/service/dreams/IDreamManager;

    move-result-object v1

    .line 9179
    .local v1, "dreamManager":Landroid/service/dreams/IDreamManager;
    if-eqz v1, :cond_3

    :try_start_0
    invoke-interface {v1}, Landroid/service/dreams/IDreamManager;->isDreaming()Z

    move-result v3

    if-eqz v3, :cond_3

    if-eqz v0, :cond_3

    .line 9180
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-boolean v3, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_INPUT:Z

    if-eqz v3, :cond_1

    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "interceptKeyTi dozeMode = "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 9181
    :cond_1
    const/4 v3, 0x1

    return v3

    .line 9176
    .end local v0    # "dozeMode":Z
    .end local v1    # "dreamManager":Landroid/service/dreams/IDreamManager;
    :cond_2
    const/4 v0, 0x0

    .restart local v0    # "dozeMode":Z
    goto :goto_0

    .line 9183
    .restart local v1    # "dreamManager":Landroid/service/dreams/IDreamManager;
    :catch_0
    move-exception v2

    .line 9184
    .local v2, "e":Landroid/os/RemoteException;
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "RemoteException when checking if dreaming"

    invoke-static {v3, v4, v2}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 9187
    .end local v2    # "e":Landroid/os/RemoteException;
    :cond_3
    const/4 v3, 0x0

    return v3
.end method

.method public isEasyModeEnabled()Z
    .locals 1

    .prologue
    .line 1941
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEasyModeEnabled:Z

    return v0
.end method

.method public isEasyOneHandEnabled()Z
    .locals 2

    .prologue
    const/4 v0, 0x1

    .line 1886
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    if-ne v1, v0, :cond_0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public isEasyOneHandRunning()Z
    .locals 2

    .prologue
    const/4 v0, 0x1

    .line 1890
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandRunning:I

    if-ne v1, v0, :cond_0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public isEnableAccessControl(I)Z
    .locals 8
    .param p1, "event"    # I

    .prologue
    const/4 v7, -0x2

    const/4 v3, 0x1

    const/4 v4, 0x0

    .line 1911
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    .line 1912
    const-string v6, "access_control_power_button"

    .line 1911
    invoke-static {v5, v6, v3, v7}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v1

    .line 1913
    .local v1, "mAccessPower":I
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    .line 1914
    const-string v6, "access_control_volume_button"

    .line 1913
    invoke-static {v5, v6, v3, v7}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v2

    .line 1915
    .local v2, "mAccessVolume":I
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    .line 1916
    const-string v6, "access_control_keyboard_block"

    .line 1915
    invoke-static {v5, v6, v4, v7}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v0

    .line 1918
    .local v0, "mAccessKeyboard":I
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v5}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v5

    if-eqz v5, :cond_1

    .line 1919
    const/4 v5, 0x7

    if-lt p1, v5, :cond_1

    const/16 v5, 0x12

    if-gt p1, v5, :cond_1

    .line 1920
    iget-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    if-eqz v5, :cond_0

    if-eqz v0, :cond_0

    :goto_0
    return v3

    :cond_0
    move v3, v4

    goto :goto_0

    .line 1923
    :cond_1
    sparse-switch p1, :sswitch_data_0

    .line 1932
    iget-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    return v3

    .line 1925
    :sswitch_0
    iget-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    return v3

    .line 1927
    :sswitch_1
    iget-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    if-eqz v5, :cond_2

    if-eqz v1, :cond_2

    move v4, v3

    :cond_2
    return v4

    .line 1930
    :sswitch_2
    iget-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    if-eqz v5, :cond_3

    if-eqz v2, :cond_3

    move v4, v3

    :cond_3
    return v4

    .line 1923
    :sswitch_data_0
    .sparse-switch
        0x3 -> :sswitch_0
        0x18 -> :sswitch_2
        0x19 -> :sswitch_2
        0x1a -> :sswitch_1
    .end sparse-switch
.end method

.method public isForceHideBySViewCover()Z
    .locals 2

    .prologue
    const/4 v0, 0x0

    .line 5318
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportAndAttachedSViewCover()Z

    move-result v1

    if-eqz v1, :cond_1

    .line 5319
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v1, v1, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-eqz v1, :cond_0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x1

    goto :goto_0

    .line 5321
    :cond_1
    return v0
.end method

.method public isForceStatusBarFromSViewCover()Z
    .locals 1

    .prologue
    .line 7074
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceStatusBarFromSViewCover:Z

    return v0
.end method

.method public isGearVrDocked()Z
    .locals 1

    .prologue
    .line 761
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsGearVrDocked:Z

    return v0
.end method

.method public isGearVrSupport()Z
    .locals 2

    .prologue
    .line 765
    const-class v1, Lcom/android/server/vr/GearVrManagerInternal;

    invoke-static {v1}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/vr/GearVrManagerInternal;

    .line 766
    .local v0, "vrService":Lcom/android/server/vr/GearVrManagerInternal;
    if-eqz v0, :cond_0

    .line 767
    invoke-virtual {v0}, Lcom/android/server/vr/GearVrManagerInternal;->hasHmtFeature()Z

    move-result v1

    return v1

    .line 770
    :cond_0
    const/4 v1, 0x0

    return v1
.end method

.method public isKeyguardLocked()Z
    .locals 1

    .prologue
    .line 5618
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->keyguardOn()Z

    move-result v0

    return v0
.end method

.method public isKeyguardScrimWindow(Landroid/view/WindowManager$LayoutParams;)Z
    .locals 2
    .param p1, "attrs"    # Landroid/view/WindowManager$LayoutParams;

    .prologue
    .line 9136
    iget v0, p1, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v1, 0x7ed

    if-ne v0, v1, :cond_0

    const/4 v0, 0x1

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public isKeyguardShowingAndNotOccluded()Z
    .locals 1

    .prologue
    .line 8864
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v0

    return v0
.end method

.method public isKnoxDesktopMode()Z
    .locals 1

    .prologue
    .line 8632
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDesktopModeManager:Lcom/samsung/android/desktopmode/SemDesktopModeManager;

    if-eqz v0, :cond_0

    .line 8633
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDesktopModeManager:Lcom/samsung/android/desktopmode/SemDesktopModeManager;

    invoke-static {}, Lcom/samsung/android/desktopmode/SemDesktopModeManager;->isDesktopMode()Z

    move-result v0

    return v0

    .line 8635
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public isLockTaskModeEnabled()Z
    .locals 2

    .prologue
    const/4 v0, 0x0

    .line 5271
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockTaskModeState:I

    if-eqz v1, :cond_0

    const/4 v0, 0x1

    :cond_0
    return v0
.end method

.method public isMenuConsumed()Z
    .locals 2

    .prologue
    const/4 v1, 0x0

    .line 3875
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMenuConsumed:Z

    if-eqz v0, :cond_0

    .line 3876
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMenuConsumed:Z

    .line 3877
    const/4 v0, 0x1

    return v0

    .line 3879
    :cond_0
    return v1
.end method

.method public isMetaKeyEventRequested()Z
    .locals 1

    .prologue
    .line 7053
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v0}, Lcom/android/server/policy/SystemKeyManager;->isMetaKeyEventRequested()Z

    move-result v0

    return v0
.end method

.method public isMetaKeyEventRequested(Landroid/content/ComponentName;)Z
    .locals 1
    .param p1, "componentName"    # Landroid/content/ComponentName;

    .prologue
    .line 7049
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v0, p1}, Lcom/android/server/policy/SystemKeyManager;->isMetaKeyEventRequested(Landroid/content/ComponentName;)Z

    move-result v0

    return v0
.end method

.method public isMirrorLinkEnabled()Z
    .locals 2

    .prologue
    .line 5256
    const-string v0, "1"

    const-string v1, "net.mirrorlink.on"

    invoke-static {v1}, Landroid/os/SystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    return v0
.end method

.method public isMobileKeyboardEnabled()Z
    .locals 1

    .prologue
    .line 8955
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    return v0
.end method

.method public isNaviBarGestureLockedByGameTools()Z
    .locals 7

    .prologue
    .line 6248
    iget-boolean v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarLockedOnGameMode:Z

    if-nez v4, :cond_0

    .line 6249
    const/4 v4, 0x0

    return v4

    .line 6251
    :cond_0
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameManagerService:Lcom/samsung/android/game/IGameManagerService;

    if-nez v4, :cond_1

    .line 6253
    :try_start_0
    const-string v4, "gamemanager"

    invoke-static {v4}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v0

    .line 6254
    .local v0, "b":Landroid/os/IBinder;
    if-eqz v0, :cond_1

    .line 6255
    invoke-static {v0}, Lcom/samsung/android/game/IGameManagerService$Stub;->asInterface(Landroid/os/IBinder;)Lcom/samsung/android/game/IGameManagerService;

    move-result-object v4

    iput-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameManagerService:Lcom/samsung/android/game/IGameManagerService;
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    .line 6262
    .end local v0    # "b":Landroid/os/IBinder;
    :cond_1
    :goto_0
    const/4 v3, 0x0

    .line 6264
    .local v3, "isGameMode":Z
    :try_start_1
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameManagerService:Lcom/samsung/android/game/IGameManagerService;

    invoke-interface {v4}, Lcom/samsung/android/game/IGameManagerService;->identifyForegroundApp()I
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_1

    move-result v4

    const/4 v5, 0x1

    if-ne v4, v5, :cond_2

    const/4 v3, 0x1

    .line 6268
    :goto_1
    return v3

    .line 6257
    .end local v3    # "isGameMode":Z
    :catch_0
    move-exception v2

    .line 6258
    .local v2, "e":Ljava/lang/Exception;
    const-string v4, "SamsungPhoneWindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "failed to int GameModeService"

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v4, v5}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    .line 6264
    .end local v2    # "e":Ljava/lang/Exception;
    .restart local v3    # "isGameMode":Z
    :cond_2
    const/4 v3, 0x0

    goto :goto_1

    .line 6265
    :catch_1
    move-exception v1

    .line 6266
    .local v1, "e":Landroid/os/RemoteException;
    const-string v4, "SamsungPhoneWindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "failed while identifyForegroundApp()"

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v4, v5}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_1
.end method

.method public isNaviColorWin(Landroid/view/WindowManagerPolicy$WindowState;)Z
    .locals 3
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    .line 6764
    if-eqz p1, :cond_0

    .line 6765
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v1

    sparse-switch v1, :sswitch_data_0

    .line 6778
    :cond_0
    const/4 v1, 0x0

    return v1

    .line 6768
    :sswitch_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    invoke-virtual {v1, v2}, Lcom/android/server/policy/PhoneWindowManager;->isFullscreen(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v1

    if-eqz v1, :cond_0

    .line 6769
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getFrameLw()Landroid/graphics/Rect;

    move-result-object v0

    .line 6770
    .local v0, "frame":Landroid/graphics/Rect;
    invoke-virtual {v0}, Landroid/graphics/Rect;->width()I

    move-result v1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    if-ne v1, v2, :cond_0

    .line 6771
    invoke-virtual {v0}, Landroid/graphics/Rect;->height()I

    move-result v1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    if-ne v1, v2, :cond_0

    .line 6772
    const/4 v1, 0x1

    return v1

    .line 6765
    nop

    :sswitch_data_0
    .sparse-switch
        0x7ef -> :sswitch_0
        0x96b -> :sswitch_0
    .end sparse-switch
.end method

.method public isNavigationBarDisabled()Z
    .locals 1

    .prologue
    .line 8336
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMobileKeyboardEnabled()Z

    move-result v0

    if-nez v0, :cond_0

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMirrorLinkEnabled()Z

    move-result v0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x1

    goto :goto_0
.end method

.method public isNavigationBarVisible()Z
    .locals 1

    .prologue
    .line 8328
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8329
    const/4 v0, 0x1

    return v0

    .line 8332
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public isNeedLayoutCoverApplication(Landroid/view/WindowManagerPolicy$WindowState;)Z
    .locals 4
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v3, 0x0

    const/4 v2, 0x1

    .line 5369
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportAndAttachedSViewCover()Z

    move-result v1

    if-eqz v1, :cond_3

    .line 5370
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v1

    invoke-interface {v1}, Lcom/samsung/android/view/IWindowStateBridge;->getCoverMode()I

    move-result v0

    .line 5371
    .local v0, "coverMode":I
    const/4 v1, 0x2

    if-ne v0, v1, :cond_0

    .line 5372
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v1

    invoke-interface {v1}, Lcom/samsung/android/view/IWindowStateBridge;->willBeHideSViewCoverOnce()Z

    move-result v1

    if-eqz v1, :cond_3

    .line 5373
    return v2

    .line 5375
    :cond_0
    if-eq v0, v2, :cond_1

    const/16 v1, 0xa

    if-ne v0, v1, :cond_2

    .line 5376
    :cond_1
    return v2

    .line 5377
    :cond_2
    if-nez v0, :cond_3

    .line 5378
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    iget v1, v1, Landroid/view/WindowManager$LayoutParams;->type:I

    sparse-switch v1, :sswitch_data_0

    .line 5386
    .end local v0    # "coverMode":I
    :cond_3
    return v3

    .line 5382
    .restart local v0    # "coverMode":I
    :sswitch_0
    return v2

    .line 5378
    :sswitch_data_0
    .sparse-switch
        0x7d5 -> :sswitch_0
        0x7e4 -> :sswitch_0
        0x833 -> :sswitch_0
    .end sparse-switch
.end method

.method public isOneTouchReportEnabled()Z
    .locals 17

    .prologue
    .line 4509
    const-string v15, "go.police.report"

    .line 4510
    .local v15, "oneTouchReportPackageName":Ljava/lang/String;
    const-string v14, "com.android.vending"

    .line 4512
    .local v14, "oneTouchReportInstaller":Ljava/lang/String;
    const/4 v13, 0x0

    .line 4513
    .local v13, "installerPackage":Ljava/lang/String;
    const/4 v12, 0x0

    .line 4515
    .local v12, "enabled":Z
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v2}, Lcom/android/server/policy/SamsungPolicyProperties;->isOneTouchReportChordEnabled(Landroid/content/Context;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 4516
    const/4 v2, 0x0

    return v2

    .line 4520
    :cond_0
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v16

    .line 4522
    .local v16, "packageManager":Landroid/content/pm/PackageManager;
    :try_start_0
    const-string v2, "go.police.report"

    move-object/from16 v0, v16

    invoke-virtual {v0, v2}, Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v13

    .line 4524
    .local v13, "installerPackage":Ljava/lang/String;
    const-string v2, "com.android.vending"

    invoke-virtual {v2, v13}, Ljava/lang/String;->equalsIgnoreCase(Ljava/lang/String;)Z
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    move-result v2

    if-nez v2, :cond_1

    .line 4526
    const/4 v2, 0x0

    return v2

    .line 4528
    .end local v13    # "installerPackage":Ljava/lang/String;
    :catch_0
    move-exception v11

    .line 4530
    .local v11, "e":Ljava/lang/Exception;
    const/4 v2, 0x0

    return v2

    .line 4534
    .end local v11    # "e":Ljava/lang/Exception;
    .restart local v13    # "installerPackage":Ljava/lang/String;
    :cond_1
    const-string v9, "content://go.police.provider.report"

    .line 4535
    .local v9, "customerAgreementPath":Ljava/lang/String;
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    .line 4537
    .local v1, "cr":Landroid/content/ContentResolver;
    if-eqz v1, :cond_3

    .line 4538
    const-string v2, "content://go.police.provider.report"

    invoke-static {v2}, Landroid/net/Uri;->parse(Ljava/lang/String;)Landroid/net/Uri;

    move-result-object v2

    const/4 v3, 0x0

    const/4 v4, 0x0

    const/4 v5, 0x0

    const/4 v6, 0x0

    invoke-virtual/range {v1 .. v6}, Landroid/content/ContentResolver;->query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;

    move-result-object v7

    .line 4540
    .local v7, "c":Landroid/database/Cursor;
    if-eqz v7, :cond_2

    :try_start_1
    invoke-interface {v7}, Landroid/database/Cursor;->moveToFirst()Z

    move-result v2

    if-eqz v2, :cond_2

    .line 4541
    const-string v2, "customer_agreement"

    invoke-interface {v7, v2}, Landroid/database/Cursor;->getColumnIndex(Ljava/lang/String;)I

    move-result v8

    .line 4543
    .local v8, "customerAgreementColumn":I
    const/4 v2, -0x1

    if-eq v8, v2, :cond_2

    .line 4544
    invoke-interface {v7, v8}, Landroid/database/Cursor;->getInt(I)I
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result v10

    .line 4545
    .local v10, "customerAgreementValue":I
    const/4 v2, 0x1

    if-ne v2, v10, :cond_4

    const/4 v12, 0x1

    .line 4555
    .end local v8    # "customerAgreementColumn":I
    .end local v10    # "customerAgreementValue":I
    :cond_2
    :goto_0
    if-eqz v7, :cond_3

    .line 4556
    invoke-interface {v7}, Landroid/database/Cursor;->close()V

    .line 4561
    .end local v7    # "c":Landroid/database/Cursor;
    :cond_3
    :goto_1
    return v12

    .line 4545
    .restart local v7    # "c":Landroid/database/Cursor;
    .restart local v8    # "customerAgreementColumn":I
    .restart local v10    # "customerAgreementValue":I
    :cond_4
    const/4 v12, 0x0

    goto :goto_0

    .line 4552
    .end local v8    # "customerAgreementColumn":I
    .end local v10    # "customerAgreementValue":I
    :catch_1
    move-exception v11

    .line 4553
    .restart local v11    # "e":Ljava/lang/Exception;
    :try_start_2
    invoke-virtual {v11}, Ljava/lang/Exception;->printStackTrace()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    .line 4555
    if-eqz v7, :cond_3

    .line 4556
    invoke-interface {v7}, Landroid/database/Cursor;->close()V

    goto :goto_1

    .line 4554
    .end local v11    # "e":Ljava/lang/Exception;
    :catchall_0
    move-exception v2

    .line 4555
    if-eqz v7, :cond_5

    .line 4556
    invoke-interface {v7}, Landroid/database/Cursor;->close()V

    .line 4554
    :cond_5
    throw v2
.end method

.method public isOverrapedFreeformWithNaviBar()Z
    .locals 1

    .prologue
    .line 8893
    sget-boolean v0, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v0, :cond_0

    .line 8894
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOverrapedFreeformWithNaviBar:Z

    return v0

    .line 8896
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public isPackageAvailable(Ljava/lang/String;)Z
    .locals 4
    .param p1, "packageName"    # Ljava/lang/String;

    .prologue
    const/4 v3, 0x0

    .line 5112
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v1

    .line 5114
    .local v1, "pm":Landroid/content/pm/PackageManager;
    if-eqz v1, :cond_0

    const/4 v2, 0x0

    :try_start_0
    invoke-virtual {v1, p1, v2}, Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    :try_end_0
    .catch Landroid/content/pm/PackageManager$NameNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    move-result-object v2

    if-eqz v2, :cond_0

    .line 5115
    const/4 v2, 0x1

    return v2

    .line 5117
    :cond_0
    return v3

    .line 5119
    :catch_0
    move-exception v0

    .line 5120
    .local v0, "e":Landroid/content/pm/PackageManager$NameNotFoundException;
    return v3
.end method

.method public isPossibleEndCallByPowerKey()Z
    .locals 2

    .prologue
    .line 5639
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->hasNavigationBar()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 5640
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSleepReason:I

    const/4 v1, 0x3

    if-ne v0, v1, :cond_0

    .line 5641
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "skip endCall. screenoff by timeout during call"

    invoke-static {v0, v1}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 5642
    const/4 v0, 0x0

    return v0

    .line 5644
    :cond_0
    const/4 v0, 0x1

    return v0
.end method

.method public isPowerSave()Z
    .locals 1

    .prologue
    .line 931
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerSave:Z

    return v0
.end method

.method public isPreferredActivity(Ljava/lang/String;)Z
    .locals 4
    .param p1, "packageName"    # Ljava/lang/String;

    .prologue
    const/4 v3, 0x0

    .line 5125
    const/4 v2, 0x0

    .line 5127
    .local v2, "ret":Z
    if-nez p1, :cond_0

    .line 5128
    return v3

    .line 5130
    :cond_0
    new-instance v1, Ljava/util/ArrayList;

    invoke-direct {v1}, Ljava/util/ArrayList;-><init>()V

    .line 5131
    .local v1, "intentList":Ljava/util/List;, "Ljava/util/List<Landroid/content/IntentFilter;>;"
    new-instance v0, Ljava/util/ArrayList;

    invoke-direct {v0}, Ljava/util/ArrayList;-><init>()V

    .line 5132
    .local v0, "componentList":Ljava/util/List;, "Ljava/util/List<Landroid/content/ComponentName;>;"
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v3

    invoke-virtual {v3, v1, v0, p1}, Landroid/content/pm/PackageManager;->getPreferredActivities(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I

    .line 5134
    invoke-interface {v0}, Ljava/util/List;->size()I

    move-result v3

    if-eqz v3, :cond_1

    .line 5135
    const/4 v2, 0x1

    .line 5138
    :cond_1
    return v2
.end method

.method public isQuickPanelExpanded()Z
    .locals 4

    .prologue
    const/4 v2, 0x0

    .line 8923
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v3, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    .line 8925
    .local v1, "statusBar":Landroid/view/WindowManagerPolicy$WindowState;
    if-eqz v1, :cond_1

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v3

    .line 8924
    if-eqz v3, :cond_1

    .line 8926
    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getFrameLw()Landroid/graphics/Rect;

    move-result-object v3

    invoke-virtual {v3}, Landroid/graphics/Rect;->height()I

    move-result v0

    .line 8927
    .local v0, "currentStatusBarHeight":I
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mStatusBarHeight:I

    if-le v0, v3, :cond_0

    const/4 v2, 0x1

    :cond_0
    return v2

    .line 8929
    .end local v0    # "currentStatusBarHeight":I
    :cond_1
    return v2
.end method

.method public isRecentAppStart()Z
    .locals 2

    .prologue
    const/4 v1, 0x0

    .line 8671
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    invoke-virtual {v0}, Lcom/samsung/android/knox/custom/SystemManager;->getRecentLongPressMode()I

    move-result v0

    if-eqz v0, :cond_0

    .line 8672
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->startCustomApp()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8673
    const/4 v0, 0x1

    return v0

    .line 8676
    :cond_0
    return v1
.end method

.method public isRecentConsumed()Z
    .locals 2

    .prologue
    const/4 v1, 0x0

    .line 3988
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRecentConsumed:Z

    if-eqz v0, :cond_0

    .line 3989
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRecentConsumed:Z

    .line 3990
    const/4 v0, 0x1

    return v0

    .line 3992
    :cond_0
    return v1
.end method

.method public isRecentsTaskShowing()Z
    .locals 2

    .prologue
    .line 9231
    :try_start_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v1, :cond_0

    .line 9232
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v1

    if-eqz v1, :cond_0

    .line 9233
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v1

    invoke-interface {v1}, Landroid/view/IApplicationToken;->isRecentsTask()Z
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    move-result v1

    return v1

    .line 9235
    :catch_0
    move-exception v0

    .line 9237
    :cond_0
    const/4 v1, 0x0

    return v1
.end method

.method public isRecentsVisible()Z
    .locals 1

    .prologue
    .line 8938
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mRecentsVisible:Z

    return v0
.end method

.method public isRingingOrOffhook()Z
    .locals 1

    .prologue
    .line 5607
    const/4 v0, 0x0

    return v0
.end method

.method public isSafetyAssuranceEnabled()Z
    .locals 1

    .prologue
    .line 1873
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSafetyAssuranceEnabled:Z

    return v0
.end method

.method public isScreenOffOnLongPressHome()Z
    .locals 4

    .prologue
    .line 8745
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-virtual {v0}, Landroid/os/PowerManager;->isScreenOn()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8746
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKnoxCustomSystemManager:Lcom/samsung/android/knox/custom/SystemManager;

    invoke-virtual {v0}, Lcom/samsung/android/knox/custom/SystemManager;->getScreenOffOnHomeLongPressState()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8747
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v2

    invoke-virtual {v0, v2, v3}, Landroid/os/PowerManager;->goToSleep(J)V

    .line 8748
    const/4 v0, 0x1

    return v0

    .line 8751
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public isShowingSViewCover()Z
    .locals 1

    .prologue
    .line 7083
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowingSViewCover:Z

    return v0
.end method

.method public isSideSyncPresentationRunning()Z
    .locals 1

    .prologue
    .line 5812
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSideSyncSourcePresentationActived:Z

    return v0
.end method

.method public isSimLocked()Z
    .locals 1

    .prologue
    .line 6157
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    invoke-virtual {v0}, Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isSimLocked()Z

    move-result v0

    return v0
.end method

.method public isStatusBarKeyguard()Z
    .locals 1

    .prologue
    .line 8341
    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isStatusBarKeyguard(I)Z

    move-result v0

    return v0
.end method

.method isStatusBarKeyguard(I)Z
    .locals 2
    .param p1, "displayId"    # I

    .prologue
    const/4 v0, 0x0

    .line 8352
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v1, :cond_0

    .line 8353
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    iget v1, v1, Landroid/view/WindowManager$LayoutParams;->privateFlags:I

    and-int/lit16 v1, v1, 0x400

    if-eqz v1, :cond_0

    const/4 v0, 0x1

    .line 8352
    :cond_0
    return v0
.end method

.method public isStatusBarSViewCover()Z
    .locals 3

    .prologue
    const/4 v0, 0x0

    .line 8357
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v1, :cond_0

    .line 8358
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    iget v1, v1, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    const/high16 v2, 0x10000000

    and-int/2addr v1, v2

    if-eqz v1, :cond_0

    const/4 v0, 0x1

    .line 8357
    :cond_0
    return v0
.end method

.method public isStatusBarVisible()Z
    .locals 1

    .prologue
    .line 8321
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->isAnimatingLw()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 8324
    :cond_0
    const/4 v0, 0x0

    return v0

    .line 8322
    :cond_1
    const/4 v0, 0x1

    return v0
.end method

.method public isStatusColorWin(Landroid/view/WindowManagerPolicy$WindowState;)Z
    .locals 3
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v2, 0x0

    .line 6726
    if-nez p1, :cond_0

    .line 6727
    return v2

    .line 6729
    :cond_0
    sget-boolean v0, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v0, :cond_1

    .line 6730
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    invoke-interface {v0, p1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isFreeformWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v0

    if-eqz v0, :cond_1

    .line 6731
    return v2

    .line 6734
    :cond_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v1

    invoke-virtual {v0, v1}, Lcom/android/server/policy/PhoneWindowManager;->isFullscreen(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v0

    if-eqz v0, :cond_2

    .line 6735
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v0

    iget v0, v0, Landroid/view/WindowManager$LayoutParams;->flags:I

    and-int/lit16 v0, v0, 0x400

    if-nez v0, :cond_2

    .line 6736
    const/4 v0, 0x1

    return v0

    .line 6738
    :cond_2
    return v2
.end method

.method public isSupportActiveDouble()Z
    .locals 4

    .prologue
    .line 6538
    const/4 v1, 0x0

    .line 6539
    .local v1, "ret":Z
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v2

    const-string v3, "double_press_app"

    invoke-static {v2, v3}, Landroid/provider/Settings$System;->getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    .line 6541
    .local v0, "launch_app":Ljava/lang/String;
    if-nez v0, :cond_0

    .line 6542
    const/4 v1, 0x0

    .line 6546
    :goto_0
    return v1

    .line 6544
    :cond_0
    const/4 v1, 0x1

    goto :goto_0
.end method

.method public isSupportBCM()Z
    .locals 1

    .prologue
    .line 6531
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    if-nez v0, :cond_0

    .line 6532
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v0}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->getInstance(Landroid/content/Context;)Lcom/samsung/android/emergencymode/SemEmergencyManager;

    move-result-object v0

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    .line 6534
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    invoke-static {}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->isBatteryConversingModeSupported()Z

    move-result v0

    return v0
.end method

.method public isSupportPowerTriplePress()Z
    .locals 2

    .prologue
    const/4 v0, 0x0

    .line 8286
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mTriplePressOnPowerBehavior:I

    if-eqz v1, :cond_0

    const/4 v0, 0x1

    :cond_0
    return v0
.end method

.method public isSystemKeyEventRequested(ILandroid/content/ComponentName;)Z
    .locals 1
    .param p1, "keyCode"    # I
    .param p2, "componentName"    # Landroid/content/ComponentName;

    .prologue
    .line 7045
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v0, p1, p2}, Lcom/android/server/policy/SystemKeyManager;->isSystemKeyEventRequested(ILandroid/content/ComponentName;)Z

    move-result v0

    return v0
.end method

.method public isTphoneRelaxMode()Z
    .locals 4

    .prologue
    const/4 v3, 0x1

    const/4 v2, 0x0

    .line 5977
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isSktTphoneEnabled()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    const-string v1, "skt_phone20_relax_mode"

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v0

    if-ne v0, v3, :cond_0

    .line 5978
    return v3

    .line 5980
    :cond_0
    return v2
.end method

.method public isTripleTapOnHomeEnabled()Z
    .locals 1

    .prologue
    .line 3633
    const/4 v0, 0x1

    invoke-virtual {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDirectAccessEnabled(Z)Z

    move-result v0

    return v0
.end method

.method public isUseAccessControl()Z
    .locals 1

    .prologue
    .line 1877
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsUseAccessControl:Z

    return v0
.end method

.method isVoIPRinging()Z
    .locals 5

    .prologue
    .line 5995
    const/4 v1, 0x0

    .line 5997
    .local v1, "isVoIPRinging":Z
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getVoIPInterfaceService()Landroid/os/IVoIPInterface;

    move-result-object v2

    .line 5998
    .local v2, "voipInterfaceService":Landroid/os/IVoIPInterface;
    if-eqz v2, :cond_0

    .line 5999
    invoke-interface {v2}, Landroid/os/IVoIPInterface;->isVoIPRinging()Z

    move-result v1

    .line 6006
    .end local v1    # "isVoIPRinging":Z
    .end local v2    # "voipInterfaceService":Landroid/os/IVoIPInterface;
    :goto_0
    return v1

    .line 6001
    .restart local v1    # "isVoIPRinging":Z
    .restart local v2    # "voipInterfaceService":Landroid/os/IVoIPInterface;
    :cond_0
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "Unable to find IVoIPInterface interface"

    invoke-static {v3, v4}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    goto :goto_0

    .line 6003
    .end local v2    # "voipInterfaceService":Landroid/os/IVoIPInterface;
    :catch_0
    move-exception v0

    .line 6004
    .local v0, "ex":Landroid/os/RemoteException;
    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "RemoteException from getVoIPInterfaceService()"

    invoke-static {v3, v4, v0}, Landroid/util/Log;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_0
.end method

.method public isVolumeKeyAppsEnabled()Z
    .locals 1

    .prologue
    .line 8786
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    invoke-virtual {v0}, Lcom/samsung/android/knox/custom/ProKioskManager;->getProKioskState()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 8787
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskManager:Lcom/samsung/android/knox/custom/ProKioskManager;

    invoke-virtual {v0}, Lcom/samsung/android/knox/custom/ProKioskManager;->getVolumeKeyAppState()Z

    move-result v0

    .line 8786
    if-eqz v0, :cond_0

    .line 8788
    const/4 v0, 0x1

    return v0

    .line 8790
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public isVolumeKeyMode()Z
    .locals 4

    .prologue
    .line 6021
    const/4 v0, 0x0

    .line 6022
    .local v0, "isVolumeKeyMode":Z
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    const-string v2, "volumekey_mode"

    const/4 v3, 0x0

    invoke-static {v1, v2, v3}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v1

    const/4 v2, 0x1

    if-ge v1, v2, :cond_0

    .line 6023
    const/4 v0, 0x0

    .line 6027
    :goto_0
    return v0

    .line 6025
    :cond_0
    const/4 v0, 0x1

    goto :goto_0
.end method

.method public isWakeupPreventionPackage(Ljava/lang/String;I)Z
    .locals 6
    .param p1, "packageName"    # Ljava/lang/String;
    .param p2, "uid"    # I

    .prologue
    const/4 v5, 0x1

    const/4 v4, 0x0

    .line 8163
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Turning screen on : "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string v3, " uid = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8165
    const/4 v0, 0x0

    .line 8167
    .local v0, "edgeLighting":Z
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEdgeInternal:Lcom/samsung/android/edge/EdgeManagerInternal;

    if-nez v1, :cond_0

    .line 8168
    const-class v1, Lcom/samsung/android/edge/EdgeManagerInternal;

    invoke-static {v1}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/samsung/android/edge/EdgeManagerInternal;

    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEdgeInternal:Lcom/samsung/android/edge/EdgeManagerInternal;

    .line 8170
    :cond_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEdgeInternal:Lcom/samsung/android/edge/EdgeManagerInternal;

    if-eqz v1, :cond_1

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEdgeInternal:Lcom/samsung/android/edge/EdgeManagerInternal;

    invoke-virtual {v1, p1, v4, p2}, Lcom/samsung/android/edge/EdgeManagerInternal;->showForWakeUpByWindow(Ljava/lang/String;Ljava/lang/String;I)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 8171
    return v5

    .line 8176
    :cond_1
    iget-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakeupPrevention:Z

    if-eqz v1, :cond_2

    .line 8177
    if-eqz p1, :cond_2

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeupPreventionPackages:Ljava/util/HashSet;

    invoke-virtual {v1, p1}, Ljava/util/HashSet;->contains(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_2

    .line 8178
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Turning screen block by WakeupPreventionPackage : "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8179
    return v5

    .line 8183
    :cond_2
    const/4 v1, 0x0

    return v1
.end method

.method keyguardOn()Z
    .locals 1

    .prologue
    .line 5635
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v0

    if-nez v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0}, Lcom/android/server/policy/PhoneWindowManager;->inKeyguardRestrictedKeyInputMode()Z

    move-result v0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x1

    goto :goto_0
.end method

.method public launchDoubleTapCommand(I)V
    .locals 18
    .param p1, "keyCode"    # I

    .prologue
    .line 3550
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "launchDoubleTapCommand mDoubleTapLaunchBehavior = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    move-object/from16 v0, p0

    iget v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3551
    const/4 v1, 0x3

    move/from16 v0, p1

    if-ne v0, v1, :cond_1

    move-object/from16 v0, p0

    iget v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    const/4 v2, 0x1

    if-eq v1, v2, :cond_1

    .line 3553
    :cond_0
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "mDoubleTapLaunchBehavior is false : "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    move/from16 v0, p1

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3554
    return-void

    .line 3552
    :cond_1
    const/16 v1, 0x1a

    move/from16 v0, p1

    if-ne v0, v1, :cond_2

    move-object/from16 v0, p0

    iget v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    const/4 v2, 0x3

    if-ne v1, v2, :cond_0

    .line 3557
    :cond_2
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->hasCustomDoubleTapLaunchCommand()Z

    move-result v1

    if-nez v1, :cond_4

    .line 3558
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->launchVoiceCommand()V

    .line 3549
    :cond_3
    :goto_0
    return-void

    .line 3559
    :cond_4
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDeviceProvisioned()Z

    move-result v1

    if-eqz v1, :cond_c

    .line 3560
    move-object/from16 v0, p0

    iget-boolean v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableDoublTapLaunchCommand:Z

    if-eqz v1, :cond_b

    .line 3561
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "launch double tap command"

    invoke-static {v1, v2}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3563
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v1

    if-eqz v1, :cond_7

    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurrentUserId:I

    invoke-virtual {v1, v2}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardSecure(I)Z

    move-result v16

    .line 3564
    :goto_1
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const-string v2, "isSecure"

    move/from16 v0, v16

    invoke-virtual {v1, v2, v0}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 3565
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

    invoke-virtual {v1, v2}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 3566
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const/high16 v2, 0x10000000

    invoke-virtual {v1, v2}, Landroid/content/Intent;->setFlags(I)Landroid/content/Intent;

    .line 3567
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v2}, Lcom/android/server/policy/SystemKeyManager;->getCurrentTopActivity()Landroid/content/ComponentName;

    move-result-object v2

    invoke-virtual {v1, v2}, Landroid/content/ComponentName;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_8

    .line 3568
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v1

    .line 3567
    if-nez v1, :cond_8

    .line 3568
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v1

    if-eqz v1, :cond_8

    .line 3577
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const/high16 v2, 0x200000

    invoke-virtual {v1, v2}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 3581
    :goto_2
    :try_start_0
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    invoke-virtual {v1}, Landroid/content/Intent;->getFlags()I

    move-result v1

    const/high16 v2, 0x20000000

    and-int/2addr v1, v2

    if-eqz v1, :cond_5

    .line 3582
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v1

    invoke-interface {v1}, Landroid/app/IActivityManager;->keyguardWaitingForActivityDrawn()V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_2

    .line 3595
    :cond_5
    :goto_3
    :try_start_1
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v1

    if-eqz v1, :cond_a

    .line 3596
    invoke-static {}, Landroid/app/ActivityOptions;->makeBasic()Landroid/app/ActivityOptions;

    move-result-object v17

    .line 3597
    .local v17, "o":Landroid/app/ActivityOptions;
    if-eqz v16, :cond_6

    .line 3598
    const/4 v1, 0x1

    move-object/from16 v0, v17

    invoke-virtual {v0, v1}, Landroid/app/ActivityOptions;->setLaunchStackId(I)V

    .line 3601
    :cond_6
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v1

    .line 3602
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getBasePackageName()Ljava/lang/String;

    move-result-object v3

    .line 3603
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    .line 3604
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    invoke-virtual {v2, v5}, Landroid/content/Intent;->resolveTypeIfNeeded(Landroid/content/ContentResolver;)Ljava/lang/String;

    move-result-object v5

    .line 3605
    invoke-virtual/range {v17 .. v17}, Landroid/app/ActivityOptions;->toBundle()Landroid/os/Bundle;

    move-result-object v11

    .line 3606
    sget-object v2, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2}, Landroid/os/UserHandle;->getIdentifier()I

    move-result v12

    .line 3602
    const/4 v2, 0x0

    .line 3605
    const/4 v6, 0x0

    const/4 v7, 0x0

    const/4 v8, 0x0

    const/high16 v9, 0x10000000

    const/4 v10, 0x0

    .line 3601
    invoke-interface/range {v1 .. v12}, Landroid/app/IActivityManager;->startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
    :try_end_1
    .catch Landroid/content/ActivityNotFoundException; {:try_start_1 .. :try_end_1} :catch_0
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_1

    .line 3616
    .end local v17    # "o":Landroid/app/ActivityOptions;
    :goto_4
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const-string v2, "reason"

    invoke-virtual {v1, v2}, Lcom/android/server/policy/PhoneWindowManager;->sendCloseSystemWindows(Ljava/lang/String;)V

    .line 3618
    invoke-static {}, Landroid/view/inputmethod/InputMethodManager;->getInstance()Landroid/view/inputmethod/InputMethodManager;

    move-result-object v15

    .line 3619
    .local v15, "imm":Landroid/view/inputmethod/InputMethodManager;
    if-eqz v15, :cond_3

    .line 3620
    invoke-virtual {v15}, Landroid/view/inputmethod/InputMethodManager;->forceHideSoftInput()Z

    goto/16 :goto_0

    .line 3563
    .end local v15    # "imm":Landroid/view/inputmethod/InputMethodManager;
    :cond_7
    const/16 v16, 0x0

    .local v16, "isSecureLock":Z
    goto/16 :goto_1

    .line 3569
    .end local v16    # "isSecureLock":Z
    :cond_8
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_9

    .line 3570
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Add cleartask flag by policy: isShowing = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 3571
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v3}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v3

    .line 3570
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 3572
    const-string v3, ", isScreenOn = "

    .line 3570
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 3572
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v3}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v3

    .line 3570
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 3573
    const-string v3, " isSecureLock = "

    .line 3570
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    move/from16 v0, v16

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3575
    :cond_9
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    const/high16 v2, 0x24000000

    invoke-virtual {v1, v2}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    goto/16 :goto_2

    .line 3608
    :cond_a
    :try_start_2
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Not starting activity because user setup is in progress: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_2
    .catch Landroid/content/ActivityNotFoundException; {:try_start_2 .. :try_end_2} :catch_0
    .catch Landroid/os/RemoteException; {:try_start_2 .. :try_end_2} :catch_1

    goto/16 :goto_4

    .line 3610
    :catch_0
    move-exception v13

    .line 3611
    .local v13, "e":Landroid/content/ActivityNotFoundException;
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "No activity to launch double tap command."

    invoke-static {v1, v2, v13}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto/16 :goto_4

    .line 3612
    .end local v13    # "e":Landroid/content/ActivityNotFoundException;
    :catch_1
    move-exception v14

    .line 3613
    .local v14, "e":Landroid/os/RemoteException;
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Unable to start camera activity"

    invoke-static {v1, v2, v14}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto/16 :goto_4

    .line 3623
    .end local v14    # "e":Landroid/os/RemoteException;
    :cond_b
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Device is not available double tap command"

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_0

    .line 3626
    :cond_c
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Device is not provisioned"

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_0

    .line 3584
    :catch_2
    move-exception v14

    .restart local v14    # "e":Landroid/os/RemoteException;
    goto/16 :goto_3
.end method

.method public launchFingerPrint()V
    .locals 4

    .prologue
    .line 5143
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isSupportFingerPrint()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 5144
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "launch fingerprint"

    invoke-static {v1, v2}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 5146
    :try_start_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintIntent:Landroid/content/Intent;

    sget-object v3, Landroid/os/UserHandle;->OWNER:Landroid/os/UserHandle;

    invoke-virtual {v1, v2, v3}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 5142
    :goto_0
    return-void

    .line 5147
    :catch_0
    move-exception v0

    .line 5148
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "No activity to handle fingerprint."

    invoke-static {v1, v2, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_0

    .line 5151
    .end local v0    # "e":Landroid/content/ActivityNotFoundException;
    :cond_0
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Device is not supported, not launch fingerprint"

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method public launchHomeActivity(Z)V
    .locals 4
    .param p1, "fromHomeKey"    # Z

    .prologue
    .line 5047
    invoke-direct {p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->launchZeroPageIfNeeded(Z)I

    move-result v1

    .line 5048
    .local v1, "isZeroPageLaunched":I
    const/4 v2, 0x1

    if-ne v1, v2, :cond_1

    .line 5049
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-boolean v2, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_INPUT:Z

    if-eqz v2, :cond_0

    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "launch zeropage"

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 5050
    :cond_0
    return-void

    .line 5055
    :cond_1
    if-eqz p1, :cond_2

    .line 5056
    new-instance v0, Landroid/content/Intent;

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mHomeIntent:Landroid/content/Intent;

    invoke-direct {v0, v2}, Landroid/content/Intent;-><init>(Landroid/content/Intent;)V

    .line 5057
    .local v0, "intent":Landroid/content/Intent;
    const-string v2, "android.intent.extra.FROM_HOME_KEY"

    invoke-virtual {v0, v2, p1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 5062
    :goto_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-object v3, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2, v0, v3}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 5046
    return-void

    .line 5059
    .end local v0    # "intent":Landroid/content/Intent;
    :cond_2
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v2, Lcom/android/server/policy/PhoneWindowManager;->mHomeIntent:Landroid/content/Intent;

    .restart local v0    # "intent":Landroid/content/Intent;
    goto :goto_0
.end method

.method public launchHomeDuringVzwSetup()Z
    .locals 4

    .prologue
    const/4 v2, 0x0

    .line 3789
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isVzwSetupRunning()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 3790
    const-string v1, "persist.sys.enablehomekey"

    invoke-static {v1, v2}, Landroid/os/SystemProperties;->getBoolean(Ljava/lang/String;Z)Z

    move-result v0

    .line 3791
    .local v0, "isHomeKeyEnabled":Z
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, " Verizon Setup Wizard Running, launch home key "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 3792
    return v0

    .line 3794
    .end local v0    # "isHomeKeyEnabled":Z
    :cond_0
    return v2
.end method

.method public launchHomeForDesktopMode()V
    .locals 3

    .prologue
    .line 8664
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/4 v1, 0x1

    const/4 v2, 0x0

    invoke-virtual {v0, v1, v2}, Lcom/android/server/policy/PhoneWindowManager;->launchHomeFromHotKey(ZZ)V

    .line 8663
    return-void
.end method

.method public launchPremiumWatch(Z)V
    .locals 6
    .param p1, "resetLaunchingFlag"    # Z

    .prologue
    .line 6413
    :try_start_0
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Premium watch on"

    invoke-static {v2, v3}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 6415
    new-instance v1, Landroid/content/Intent;

    invoke-direct {v1}, Landroid/content/Intent;-><init>()V

    .line 6416
    .local v1, "intent":Landroid/content/Intent;
    const-string v2, "com.samsung.android.intent.action.START_WATCH"

    invoke-virtual {v1, v2}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 6417
    const/high16 v2, 0x10000000

    invoke-virtual {v1, v2}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 6418
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v3, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2, v1, v3}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 6423
    .end local v1    # "intent":Landroid/content/Intent;
    :goto_0
    if-eqz p1, :cond_0

    .line 6424
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCleanWatchLaunchingFlagRunnable:Ljava/lang/Runnable;

    invoke-virtual {v2, v3}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 6425
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCleanWatchLaunchingFlagRunnable:Ljava/lang/Runnable;

    const-wide/16 v4, 0x3e8

    invoke-virtual {v2, v3, v4, v5}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 6411
    :cond_0
    return-void

    .line 6419
    :catch_0
    move-exception v0

    .line 6420
    .local v0, "ex":Landroid/content/ActivityNotFoundException;
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Fail to launch premium watch"

    invoke-static {v2, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method public launchSFinderIfPossible()Z
    .locals 1

    .prologue
    .line 5970
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSFinderLaunchPolicy:Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSFinderLaunchPolicy:Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;

    invoke-static {v0}, Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;->-wrap0(Lcom/android/server/policy/SamsungPhoneWindowManager$SFinderLaunchPolicy;)Z

    move-result v0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public launchVoiceCommand()V
    .locals 5

    .prologue
    .line 3528
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDeviceProvisioned()Z

    move-result v2

    if-eqz v2, :cond_2

    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableVoiceCommand:Z

    if-eqz v2, :cond_2

    .line 3529
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "launch voicecommand"

    invoke-static {v2, v3}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3530
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const-string v3, "homekey"

    invoke-virtual {v2, v3}, Lcom/android/server/policy/PhoneWindowManager;->sendCloseSystemWindows(Ljava/lang/String;)V

    .line 3531
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v2

    if-eqz v2, :cond_0

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mCurrentUserId:I

    invoke-virtual {v2, v3}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardSecure(I)Z

    move-result v1

    .line 3532
    :goto_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    const-string v3, "isSecure"

    invoke-virtual {v2, v3, v1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 3533
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    const-string v4, "AUTO_LISTEN"

    if-eqz v1, :cond_1

    const/4 v2, 0x0

    :goto_1
    invoke-virtual {v3, v4, v2}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 3534
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    const/high16 v3, 0x10000000

    invoke-virtual {v2, v3}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 3536
    :try_start_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVoiceCommandIntent:Landroid/content/Intent;

    sget-object v4, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2, v3, v4}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 3527
    :goto_2
    return-void

    .line 3531
    :cond_0
    const/4 v1, 0x0

    .local v1, "isSecureLock":Z
    goto :goto_0

    .line 3533
    .end local v1    # "isSecureLock":Z
    :cond_1
    const/4 v2, 0x1

    goto :goto_1

    .line 3537
    :catch_0
    move-exception v0

    .line 3538
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "No activity to launch voicecommand."

    invoke-static {v2, v3, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_2

    .line 3541
    .end local v0    # "e":Landroid/content/ActivityNotFoundException;
    :cond_2
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Device is not provisioned or not available voice command."

    invoke-static {v2, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_2
.end method

.method public launchingGamekey(Z)Z
    .locals 9
    .param p1, "keyguardOn"    # Z

    .prologue
    const/4 v8, 0x0

    .line 6052
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->endCallByGamekey()Z

    move-result v5

    if-eqz v5, :cond_0

    .line 6053
    const/4 v5, 0x1

    return v5

    .line 6054
    :cond_0
    if-eqz p1, :cond_1

    .line 6055
    return v8

    .line 6059
    :cond_1
    const-string v1, "com.sec.game.sga"

    .line 6060
    .local v1, "gamePkg":Ljava/lang/String;
    const-string v4, "com.sec.android.app.samsungapps"

    .line 6061
    .local v4, "samsungAppsPkg":Ljava/lang/String;
    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "samsungapps://ProductDetail/"

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    .line 6063
    .local v3, "pkgUri":Ljava/lang/String;
    const/4 v2, 0x0

    .line 6066
    .local v2, "pkgInfo":Landroid/content/pm/PackageInfo;
    :try_start_0
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v5

    const/4 v6, 0x0

    invoke-virtual {v5, v1, v6}, Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    :try_end_0
    .catch Landroid/content/pm/PackageManager$NameNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    move-result-object v2

    .line 6071
    .end local v2    # "pkgInfo":Landroid/content/pm/PackageInfo;
    :cond_2
    :goto_0
    if-eqz v2, :cond_3

    .line 6072
    invoke-direct {p0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->startSGA(Ljava/lang/String;)V

    .line 6088
    :goto_1
    return v8

    .line 6067
    .restart local v2    # "pkgInfo":Landroid/content/pm/PackageInfo;
    :catch_0
    move-exception v0

    .line 6068
    .local v0, "e":Landroid/content/pm/PackageManager$NameNotFoundException;
    sget-boolean v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v5, :cond_2

    const-string v5, "SamsungPhoneWindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    invoke-virtual {v6, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v6

    const-string v7, " not exist. so try to download the SGA apps."

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    .line 6075
    .end local v0    # "e":Landroid/content/pm/PackageManager$NameNotFoundException;
    .end local v2    # "pkgInfo":Landroid/content/pm/PackageInfo;
    :cond_3
    :try_start_1
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v5

    const/4 v6, 0x0

    invoke-virtual {v5, v4, v6}, Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    :try_end_1
    .catch Landroid/content/pm/PackageManager$NameNotFoundException; {:try_start_1 .. :try_end_1} :catch_1

    move-result-object v2

    .line 6080
    :cond_4
    :goto_2
    if-eqz v2, :cond_6

    .line 6081
    sget-boolean v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v5, :cond_5

    const-string v5, "SamsungPhoneWindowManager"

    const-string v6, "SGA is not installed. so you are moving to Samsung apps."

    invoke-static {v5, v6}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6082
    :cond_5
    invoke-virtual {p0, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager;->downloadForSGA(Ljava/lang/String;)V

    goto :goto_1

    .line 6076
    :catch_1
    move-exception v0

    .line 6077
    .restart local v0    # "e":Landroid/content/pm/PackageManager$NameNotFoundException;
    sget-boolean v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v5, :cond_4

    const-string v5, "SamsungPhoneWindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    invoke-virtual {v6, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v6

    const-string v7, " not exist. so try to download the SGA apps."

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_2

    .line 6084
    .end local v0    # "e":Landroid/content/pm/PackageManager$NameNotFoundException;
    :cond_6
    sget-boolean v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v5, :cond_7

    const-string v5, "SamsungPhoneWindowManager"

    const-string v6, "Samsung apps is not installed. so you are moving to Samsung apps download page."

    invoke-static {v5, v6}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6085
    :cond_7
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->downloadForSamsungApps()V

    goto :goto_1
.end method

.method public layoutWindowLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
    .locals 8
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "pf"    # Landroid/graphics/Rect;
    .param p3, "df"    # Landroid/graphics/Rect;
    .param p4, "of"    # Landroid/graphics/Rect;
    .param p5, "cf"    # Landroid/graphics/Rect;
    .param p6, "vf"    # Landroid/graphics/Rect;
    .param p7, "dcf"    # Landroid/graphics/Rect;

    .prologue
    const/4 v1, 0x1

    const/4 v5, 0x0

    .line 7729
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v0

    .line 7730
    .local v0, "attrs":Landroid/view/WindowManager$LayoutParams;
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->isDefaultDisplay()Z

    move-result v2

    .line 7731
    .local v2, "isDefaultDisplay":Z
    if-eqz v2, :cond_6

    .line 7732
    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v6, 0x7db

    if-eq v4, v6, :cond_0

    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v6, 0x960

    if-ne v4, v6, :cond_7

    .line 7733
    :cond_0
    iget-boolean v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v4, :cond_1

    .line 7734
    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    and-int/lit16 v4, v4, 0x800

    if-eqz v4, :cond_1

    .line 7735
    iget v4, p2, Landroid/graphics/Rect;->bottom:I

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    sub-int/2addr v6, v7

    add-int/2addr v4, v6

    iput v4, p2, Landroid/graphics/Rect;->bottom:I

    .line 7736
    iget v4, p3, Landroid/graphics/Rect;->bottom:I

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    sub-int/2addr v6, v7

    add-int/2addr v4, v6

    iput v4, p3, Landroid/graphics/Rect;->bottom:I

    .line 7737
    iget v4, p4, Landroid/graphics/Rect;->bottom:I

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    sub-int/2addr v6, v7

    add-int/2addr v4, v6

    iput v4, p4, Landroid/graphics/Rect;->bottom:I

    .line 7738
    iget v4, p5, Landroid/graphics/Rect;->bottom:I

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    sub-int/2addr v6, v7

    add-int/2addr v4, v6

    iput v4, p5, Landroid/graphics/Rect;->bottom:I

    .line 7739
    iget v4, p6, Landroid/graphics/Rect;->bottom:I

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    iget v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    sub-int/2addr v6, v7

    add-int/2addr v4, v6

    iput v4, p6, Landroid/graphics/Rect;->bottom:I

    .line 7742
    :cond_1
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeEnabled()Z

    move-result v4

    if-eqz v4, :cond_2

    .line 7743
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenTop:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenHeight:I

    add-int/2addr v4, v6

    iput v4, p6, Landroid/graphics/Rect;->bottom:I

    iput v4, p5, Landroid/graphics/Rect;->bottom:I

    .line 7783
    :cond_2
    :goto_0
    sget-boolean v4, Lcom/samsung/android/framework/feature/MultiWindowFeatures;->SAMSUNG_MULTIWINDOW_DYNAMIC_ENABLED:Z

    if-eqz v4, :cond_3

    .line 7784
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->isDesktopModeLw()Z

    move-result v4

    if-eqz v4, :cond_e

    .line 7795
    :cond_3
    :goto_1
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethod:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v4, :cond_4

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethod:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v4

    if-nez v4, :cond_5

    :cond_4
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethodDlg:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v4, :cond_f

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethodDlg:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v1

    .line 7796
    .local v1, "imeVisible":Z
    :cond_5
    :goto_2
    invoke-static {v1}, Lcom/android/server/policy/PolicyControl;->setInputMethodVisible(Z)V

    .line 7728
    .end local v1    # "imeVisible":Z
    :cond_6
    return-void

    .line 7745
    :cond_7
    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v6, 0x8df

    if-ne v4, v6, :cond_c

    .line 7746
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mHasNavigationBar:Z

    if-eqz v4, :cond_b

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v4, :cond_b

    .line 7748
    iget v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    if-nez v4, :cond_8

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeBarVisible()Z

    move-result v4

    if-eqz v4, :cond_8

    .line 7749
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    sub-int/2addr v4, v6

    .line 7747
    :goto_3
    iput v4, p5, Landroid/graphics/Rect;->left:I

    iput v4, p4, Landroid/graphics/Rect;->left:I

    iput v4, p3, Landroid/graphics/Rect;->left:I

    iput v4, p2, Landroid/graphics/Rect;->left:I

    .line 7750
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenTop:I

    iput v4, p5, Landroid/graphics/Rect;->top:I

    iput v4, p4, Landroid/graphics/Rect;->top:I

    iput v4, p3, Landroid/graphics/Rect;->top:I

    iput v4, p2, Landroid/graphics/Rect;->top:I

    .line 7752
    iget v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    if-ne v4, v1, :cond_9

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeBarVisible()Z

    move-result v4

    if-eqz v4, :cond_9

    .line 7753
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenWidth:I

    add-int/2addr v4, v6

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    :goto_4
    add-int/2addr v4, v6

    .line 7751
    iput v4, p5, Landroid/graphics/Rect;->right:I

    iput v4, p4, Landroid/graphics/Rect;->right:I

    iput v4, p3, Landroid/graphics/Rect;->right:I

    iput v4, p2, Landroid/graphics/Rect;->right:I

    .line 7755
    iget v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    const/4 v6, 0x2

    if-ne v4, v6, :cond_a

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeBarVisible()Z

    move-result v4

    if-eqz v4, :cond_a

    .line 7756
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenTop:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenHeight:I

    add-int/2addr v4, v6

    iget v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    :goto_5
    add-int/2addr v4, v6

    .line 7754
    iput v4, p5, Landroid/graphics/Rect;->bottom:I

    iput v4, p4, Landroid/graphics/Rect;->bottom:I

    iput v4, p3, Landroid/graphics/Rect;->bottom:I

    iput v4, p2, Landroid/graphics/Rect;->bottom:I

    .line 7765
    :goto_6
    invoke-virtual {p7, p2}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    goto/16 :goto_0

    .line 7749
    :cond_8
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    goto :goto_3

    .line 7753
    :cond_9
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenWidth:I

    goto :goto_4

    .line 7756
    :cond_a
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenTop:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenHeight:I

    goto :goto_5

    .line 7758
    :cond_b
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenLeft:I

    iput v4, p5, Landroid/graphics/Rect;->left:I

    iput v4, p4, Landroid/graphics/Rect;->left:I

    iput v4, p3, Landroid/graphics/Rect;->left:I

    iput v4, p2, Landroid/graphics/Rect;->left:I

    .line 7759
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenTop:I

    iput v4, p5, Landroid/graphics/Rect;->top:I

    iput v4, p4, Landroid/graphics/Rect;->top:I

    iput v4, p3, Landroid/graphics/Rect;->top:I

    iput v4, p2, Landroid/graphics/Rect;->top:I

    .line 7761
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenLeft:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenWidth:I

    add-int/2addr v4, v6

    .line 7760
    iput v4, p5, Landroid/graphics/Rect;->right:I

    iput v4, p4, Landroid/graphics/Rect;->right:I

    iput v4, p3, Landroid/graphics/Rect;->right:I

    iput v4, p2, Landroid/graphics/Rect;->right:I

    .line 7763
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenTop:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mOverscanScreenHeight:I

    add-int/2addr v4, v6

    .line 7762
    iput v4, p5, Landroid/graphics/Rect;->bottom:I

    iput v4, p4, Landroid/graphics/Rect;->bottom:I

    iput v4, p3, Landroid/graphics/Rect;->bottom:I

    iput v4, p2, Landroid/graphics/Rect;->bottom:I

    goto :goto_6

    .line 7767
    :cond_c
    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v6, 0x7de

    if-ne v4, v6, :cond_d

    .line 7768
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isCarModeBarVisible()Z

    move-result v4

    if-eqz v4, :cond_2

    .line 7769
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iput v4, p4, Landroid/graphics/Rect;->left:I

    iput v4, p3, Landroid/graphics/Rect;->left:I

    iput v4, p2, Landroid/graphics/Rect;->left:I

    .line 7770
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iput v4, p4, Landroid/graphics/Rect;->top:I

    iput v4, p3, Landroid/graphics/Rect;->top:I

    iput v4, p2, Landroid/graphics/Rect;->top:I

    .line 7771
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    add-int/2addr v4, v6

    iput v4, p4, Landroid/graphics/Rect;->right:I

    iput v4, p3, Landroid/graphics/Rect;->right:I

    iput v4, p2, Landroid/graphics/Rect;->right:I

    .line 7772
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    add-int/2addr v4, v6

    iput v4, p4, Landroid/graphics/Rect;->bottom:I

    iput v4, p3, Landroid/graphics/Rect;->bottom:I

    iput v4, p2, Landroid/graphics/Rect;->bottom:I

    goto/16 :goto_0

    .line 7776
    :cond_d
    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v6, 0x8fd

    if-ne v4, v6, :cond_2

    .line 7777
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iput v4, p6, Landroid/graphics/Rect;->left:I

    iput v4, p5, Landroid/graphics/Rect;->left:I

    iput v4, p4, Landroid/graphics/Rect;->left:I

    iput v4, p3, Landroid/graphics/Rect;->left:I

    iput v4, p2, Landroid/graphics/Rect;->left:I

    .line 7778
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iput v4, p6, Landroid/graphics/Rect;->top:I

    iput v4, p5, Landroid/graphics/Rect;->top:I

    iput v4, p4, Landroid/graphics/Rect;->top:I

    iput v4, p3, Landroid/graphics/Rect;->top:I

    iput v4, p2, Landroid/graphics/Rect;->top:I

    .line 7779
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    add-int/2addr v4, v6

    iput v4, p6, Landroid/graphics/Rect;->right:I

    iput v4, p5, Landroid/graphics/Rect;->right:I

    iput v4, p4, Landroid/graphics/Rect;->right:I

    iput v4, p3, Landroid/graphics/Rect;->right:I

    iput v4, p2, Landroid/graphics/Rect;->right:I

    .line 7780
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    add-int/2addr v4, v6

    iput v4, p6, Landroid/graphics/Rect;->bottom:I

    iput v4, p5, Landroid/graphics/Rect;->bottom:I

    iput v4, p4, Landroid/graphics/Rect;->bottom:I

    iput v4, p3, Landroid/graphics/Rect;->bottom:I

    iput v4, p2, Landroid/graphics/Rect;->bottom:I

    goto/16 :goto_0

    .line 7785
    :cond_e
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    invoke-interface {v4, p1}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->isFreeformWindow(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v4

    if-eqz v4, :cond_3

    .line 7786
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mStatusBarHeight:I

    .line 7787
    .local v3, "statusBarHeight":I
    iget v4, p5, Landroid/graphics/Rect;->top:I

    if-ge v4, v3, :cond_3

    .line 7788
    iput v3, p5, Landroid/graphics/Rect;->top:I

    goto/16 :goto_1

    .end local v3    # "statusBarHeight":I
    :cond_f
    move v1, v5

    .line 7795
    goto/16 :goto_2
.end method

.method public needFullScreenDimBounds()Z
    .locals 4

    .prologue
    const/4 v0, 0x1

    const/4 v3, 0x0

    const/4 v1, 0x0

    .line 6719
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v2, :cond_0

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v2

    if-eqz v2, :cond_1

    .line 6720
    :cond_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v2, :cond_3

    .line 6721
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-static {v2, v3}, Lcom/android/server/policy/PolicyControl;->getSystemUiVisibility(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I

    move-result v2

    and-int/lit16 v2, v2, 0x1812

    if-eqz v2, :cond_2

    .line 6719
    :cond_1
    :goto_0
    return v0

    :cond_2
    move v0, v1

    .line 6721
    goto :goto_0

    :cond_3
    move v0, v1

    .line 6720
    goto :goto_0
.end method

.method public needLayoutForNavigationBar(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManagerPolicy$WindowState;)Z
    .locals 4
    .param p1, "oldFocus"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "newFocus"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v3, 0x0

    const/4 v2, 0x0

    .line 7023
    if-eqz p1, :cond_0

    if-nez p2, :cond_1

    .line 7024
    :cond_0
    return v3

    .line 7026
    :cond_1
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v0

    const/16 v1, 0x7d0

    if-lt v0, v1, :cond_3

    .line 7027
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v0

    const/16 v1, 0xbb7

    if-gt v0, v1, :cond_3

    .line 7029
    :cond_2
    invoke-static {p1, v2}, Lcom/android/server/policy/PolicyControl;->getSystemUiVisibility(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I

    move-result v0

    and-int/lit8 v0, v0, 0x2

    .line 7030
    invoke-static {p2, v2}, Lcom/android/server/policy/PolicyControl;->getSystemUiVisibility(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I

    move-result v1

    and-int/lit8 v1, v1, 0x2

    .line 7029
    if-eq v0, v1, :cond_4

    .line 7031
    const/4 v0, 0x1

    return v0

    .line 7028
    :cond_3
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v0

    const/4 v1, 0x2

    if-eq v0, v1, :cond_2

    .line 7033
    :cond_4
    return v3
.end method

.method public needSensorRunningLp()I
    .locals 5

    .prologue
    const/4 v4, 0x1

    .line 8211
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    monitor-enter v2

    .line 8212
    const/4 v0, 0x0

    .line 8214
    .local v0, "ret":I
    :try_start_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v1}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v1

    const/4 v3, 0x2

    if-ne v1, v3, :cond_0

    .line 8215
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mUserRotationMode:I

    if-ne v1, v4, :cond_1

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-nez v1, :cond_1

    .line 8217
    :goto_0
    const/4 v0, 0x2

    :cond_0
    monitor-exit v2

    .line 8221
    return v0

    .line 8216
    :cond_1
    :try_start_1
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdUserRotationMode:I

    if-ne v1, v4, :cond_0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    if-ne v1, v4, :cond_0

    goto :goto_0

    .line 8211
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public needUpdateSystemBarsForCoverLw()Z
    .locals 2

    .prologue
    const/4 v1, 0x0

    .line 7206
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isStatusBarSViewCover()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 7207
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    if-nez v0, :cond_0

    .line 7208
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-nez v0, :cond_0

    .line 7209
    const/4 v0, 0x1

    return v0

    .line 7211
    :cond_0
    return v1
.end method

.method public notifyBeforeQuickAccess(IFF)V
    .locals 8
    .param p1, "info"    # I
    .param p2, "x"    # F
    .param p3, "y"    # F

    .prologue
    const/4 v3, 0x0

    const/4 v4, 0x1

    .line 6170
    new-instance v0, Landroid/content/Intent;

    invoke-direct {v0}, Landroid/content/Intent;-><init>()V

    .line 6171
    .local v0, "intent":Landroid/content/Intent;
    const/4 v5, 0x2

    new-array v1, v5, [F

    aput p2, v1, v3

    aput p3, v1, v4

    .line 6172
    .local v1, "location":[F
    const/4 v2, 0x0

    .line 6174
    .local v2, "premission":Ljava/lang/String;
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-boolean v5, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_INPUT:Z

    if-eqz v5, :cond_0

    .line 6175
    const-string v5, "SamsungPhoneWindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string v7, "notifyBeforeQuickAccess info = "

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 6176
    const-string v7, " x = "

    .line 6175
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, p2}, Ljava/lang/StringBuilder;->append(F)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 6176
    const-string v7, " y = "

    .line 6175
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, p3}, Ljava/lang/StringBuilder;->append(F)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6179
    :cond_0
    packed-switch p1, :pswitch_data_0

    .line 6238
    .end local v2    # "premission":Ljava/lang/String;
    :goto_0
    const/16 v3, 0x20

    invoke-virtual {v0, v3}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    .line 6240
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_1

    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "sendbroadcast intent :"

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string v5, " premission="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6241
    :cond_1
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v4, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v3, v0, v4, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V

    .line 6168
    return-void

    .line 6181
    .restart local v2    # "premission":Ljava/lang/String;
    :pswitch_0
    const-string v3, "com.samsung.android.spay.quickpay"

    invoke-virtual {v0, v3}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 6182
    new-instance v2, Ljava/lang/String;

    .end local v2    # "premission":Ljava/lang/String;
    const-string v3, "com.samsung.android.spay.permission.SIMPLE_PAY"

    invoke-direct {v2, v3}, Ljava/lang/String;-><init>(Ljava/lang/String;)V

    .line 6183
    .local v2, "premission":Ljava/lang/String;
    goto :goto_0

    .line 6186
    .local v2, "premission":Ljava/lang/String;
    :pswitch_1
    sget-boolean v3, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v3, :cond_2

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v3}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v3

    if-eqz v3, :cond_2

    .line 6187
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

    float-to-int v4, p2

    float-to-int v5, p3

    invoke-virtual {v3, v4, v5}, Lcom/android/server/policy/NaviBarForceTouchManager;->onForcePressed(II)V

    .line 6189
    :cond_2
    return-void

    .line 6192
    :pswitch_2
    sget-boolean v3, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v3, :cond_3

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v3}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v3

    if-eqz v3, :cond_3

    .line 6193
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

    float-to-int v4, p2

    float-to-int v5, p3

    invoke-virtual {v3, v4, v5}, Lcom/android/server/policy/NaviBarForceTouchManager;->onForceReleased(II)V

    .line 6195
    :cond_3
    return-void

    .line 6198
    :pswitch_3
    sget-boolean v3, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v3, :cond_4

    .line 6199
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

    invoke-virtual {v3}, Lcom/android/server/policy/NaviBarForceTouchManager;->onForcePressedSleep()V

    .line 6201
    :cond_4
    return-void

    .line 6204
    :pswitch_4
    sget-boolean v5, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v5, :cond_6

    .line 6205
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

    const/16 v6, 0xd

    if-ne p1, v6, :cond_5

    move v3, v4

    :cond_5
    invoke-virtual {v5, v3}, Lcom/android/server/policy/NaviBarForceTouchManager;->onForceReleasedSleep(Z)V

    .line 6206
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    const-string v5, "aod_home_force_pressed"

    const/4 v6, -0x2

    invoke-static {v3, v5, v4, v6}, Landroid/provider/Settings$System;->putIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)Z

    .line 6208
    :cond_6
    return-void

    .line 6212
    :pswitch_5
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v3}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v3

    if-eqz v3, :cond_8

    .line 6213
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_7

    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "main screen wake up"

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 6220
    :cond_7
    :goto_1
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationForQuickAccess:Ljava/lang/Runnable;

    invoke-virtual {v3, v4}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 6221
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationForQuickAccess:Ljava/lang/Runnable;

    const-wide/16 v6, 0x1f4

    invoke-virtual {v3, v4, v6, v7}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    goto/16 :goto_0

    .line 6216
    :cond_8
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_7

    const-string v3, "SamsungPhoneWindowManager"

    const-string v4, "sub screen wake up"

    invoke-static {v3, v4}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_1

    .line 6230
    :pswitch_6
    const-string v3, "com.samsung.android.app.aodservice.intent.action.CHANGE_AOD_MODE"

    invoke-virtual {v0, v3}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 6231
    const-string v3, "info"

    invoke-virtual {v0, v3, p1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 6232
    const-string v3, "location"

    invoke-virtual {v0, v3, v1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;[F)Landroid/content/Intent;

    .line 6233
    new-instance v2, Ljava/lang/String;

    .end local v2    # "premission":Ljava/lang/String;
    const-string v3, "com.samsung.android.app.aodservice.permission.BROADCAST_RECEIVER"

    invoke-direct {v2, v3}, Ljava/lang/String;-><init>(Ljava/lang/String;)V

    .line 6234
    .local v2, "premission":Ljava/lang/String;
    goto/16 :goto_0

    .line 6179
    :pswitch_data_0
    .packed-switch 0x4
        :pswitch_0
        :pswitch_1
        :pswitch_2
        :pswitch_5
        :pswitch_6
        :pswitch_6
        :pswitch_6
        :pswitch_6
        :pswitch_3
        :pswitch_4
        :pswitch_4
    .end packed-switch
.end method

.method public notifyCoverSwitchStateChanged(JZ)V
    .locals 11
    .param p1, "whenNanos"    # J
    .param p3, "coverOpen"    # Z

    .prologue
    const/4 v3, 0x1

    const/4 v4, 0x0

    const-wide/16 v8, 0x0

    .line 4844
    invoke-static {}, Lcom/samsung/android/feature/SemCscFeature;->getInstance()Lcom/samsung/android/feature/SemCscFeature;

    move-result-object v2

    const-string v5, "CscFeature_Common_DisableNfcHwKeypad"

    invoke-virtual {v2, v5}, Lcom/samsung/android/feature/SemCscFeature;->getBoolean(Ljava/lang/String;)Z

    move-result v2

    if-eqz v2, :cond_0

    .line 4845
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Mobile Keyboard is disabled by SemCscFeature."

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4846
    return-void

    .line 4849
    :cond_0
    if-eqz p3, :cond_7

    const/4 v1, 0x0

    .line 4850
    .local v1, "mobileKeyboardEnabled":Z
    :goto_0
    cmp-long v2, p1, v8

    if-eqz v2, :cond_1

    .line 4851
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    const-string v6, "mobile_keyboard"

    if-eqz v1, :cond_8

    move v2, v3

    :goto_1
    invoke-static {v5, v6, v2, v4}, Landroid/provider/Settings$System;->putIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)Z

    .line 4854
    :cond_1
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isEasyModeEnabled()Z

    move-result v2

    if-eqz v2, :cond_9

    .line 4855
    cmp-long v2, p1, v8

    if-eqz v2, :cond_2

    if-eqz v1, :cond_2

    .line 4856
    new-instance v0, Landroid/os/Handler;

    invoke-static {}, Landroid/os/Looper;->getMainLooper()Landroid/os/Looper;

    move-result-object v2

    invoke-direct {v0, v2}, Landroid/os/Handler;-><init>(Landroid/os/Looper;)V

    .line 4857
    .local v0, "handler":Landroid/os/Handler;
    new-instance v2, Lcom/android/server/policy/SamsungPhoneWindowManager$33;

    invoke-direct {v2, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$33;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual {v0, v2, v8, v9}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 4873
    .end local v0    # "handler":Landroid/os/Handler;
    :cond_2
    const/4 v1, 0x0

    .line 4881
    :cond_3
    :goto_2
    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eq v2, v1, :cond_5

    .line 4882
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    .line 4885
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMultiPhoneWindowManager:Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;

    iget-boolean v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v5, :cond_b

    :goto_3
    const-string v3, "mobile_keyboard"

    invoke-interface {v2, v4, v3}, Lcom/android/server/policy/IMultiPhoneWindowManagerPolicy;->setMultiWindowEnabled(ZLjava/lang/String;)V

    .line 4888
    sget-boolean v2, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_NAVIGATION_BAR:Z

    if-eqz v2, :cond_4

    .line 4889
    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    invoke-static {v2}, Lcom/android/server/policy/PolicyControl;->setMobileKeyboardState(Z)V

    .line 4891
    :cond_4
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager;->updateOrientationListenerLp()V

    .line 4892
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    const/4 v3, 0x2

    invoke-virtual {v2, v3}, Landroid/os/Handler;->sendEmptyMessage(I)Z

    .line 4896
    :cond_5
    cmp-long v2, p1, v8

    if-eqz v2, :cond_6

    .line 4897
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    new-instance v3, Lcom/android/server/policy/SamsungPhoneWindowManager$34;

    invoke-direct {v3, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$34;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    .line 4904
    const-wide/16 v4, 0x64

    .line 4897
    invoke-virtual {v2, v3, v4, v5}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 4842
    :cond_6
    return-void

    .line 4849
    .end local v1    # "mobileKeyboardEnabled":Z
    :cond_7
    const/4 v1, 0x1

    .restart local v1    # "mobileKeyboardEnabled":Z
    goto :goto_0

    :cond_8
    move v2, v4

    .line 4851
    goto :goto_1

    .line 4874
    :cond_9
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSideSyncPresentationRunning()Z

    move-result v2

    if-eqz v2, :cond_a

    .line 4875
    const/4 v1, 0x0

    goto :goto_2

    .line 4876
    :cond_a
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v2

    if-nez v2, :cond_3

    .line 4877
    const/4 v1, 0x0

    goto :goto_2

    :cond_b
    move v4, v3

    .line 4885
    goto :goto_3
.end method

.method public notifyLidSwitchChanged(JZ)Z
    .locals 15
    .param p1, "whenNanos"    # J
    .param p3, "lidOpen"    # Z

    .prologue
    .line 4566
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performCPUBoost()V

    .line 4568
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v10}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v10

    const/4 v11, 0x1

    if-ne v10, v11, :cond_0

    .line 4569
    if-eqz p3, :cond_0

    .line 4570
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v11, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeDownLongPress:Ljava/lang/Runnable;

    invoke-virtual {v10, v11}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 4572
    iget-boolean v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->bIsTorchOn:Z

    if-eqz v10, :cond_0

    .line 4573
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->handleTorchKey()V

    .line 4578
    :cond_0
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v10}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v10

    const/4 v11, 0x2

    if-ne v10, v11, :cond_1

    if-eqz p3, :cond_1

    .line 4579
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    invoke-virtual {v10}, Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isShowing()Z

    move-result v10

    if-eqz v10, :cond_1

    .line 4580
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    iget-object v11, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v11, v11, Lcom/android/server/policy/PhoneWindowManager;->mCurrentUserId:I

    invoke-virtual {v10, v11}, Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isSecure(I)Z

    move-result v10

    if-nez v10, :cond_1

    .line 4581
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    const/4 v11, 0x0

    const/4 v12, 0x0

    invoke-virtual {v10, v11, v12}, Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;->keyguardDone(ZZ)V

    .line 4586
    :cond_1
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFlipFolderOpenedIntent:Landroid/content/Intent;

    const-string v11, "flipOpen"

    move/from16 v0, p3

    invoke-virtual {v10, v11, v0}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 4587
    sget-boolean v10, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v10, :cond_2

    .line 4588
    const-string v10, "SamsungPhoneWindowManager"

    new-instance v11, Ljava/lang/StringBuilder;

    invoke-direct {v11}, Ljava/lang/StringBuilder;-><init>()V

    const-string v12, "Flip Folder open = "

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    move/from16 v0, p3

    invoke-virtual {v11, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v11

    const-string v12, " , broadcasted."

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v11

    invoke-static {v10, v11}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4589
    :cond_2
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    iget-object v11, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFlipFolderOpenedIntent:Landroid/content/Intent;

    sget-object v12, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    invoke-virtual {v10, v11, v12}, Landroid/content/Context;->sendStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 4592
    iget-boolean v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderSoundEnable:Z

    if-eqz v10, :cond_4

    .line 4593
    if-eqz p3, :cond_9

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderOpenSound:Ljava/lang/String;

    .line 4594
    .local v6, "soundPath":Ljava/lang/String;
    :goto_0
    sget-boolean v10, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v10, :cond_3

    .line 4595
    const-string v10, "SamsungPhoneWindowManager"

    new-instance v11, Ljava/lang/StringBuilder;

    invoke-direct {v11}, Ljava/lang/StringBuilder;-><init>()V

    const-string v12, "Folder open/close soundPath = "

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v11

    invoke-static {v10, v11}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4596
    :cond_3
    if-eqz v6, :cond_4

    .line 4597
    invoke-direct {p0, v6}, Lcom/android/server/policy/SamsungPhoneWindowManager;->playSound(Ljava/lang/String;)V

    .line 4626
    .end local v6    # "soundPath":Ljava/lang/String;
    :cond_4
    if-nez p3, :cond_5

    .line 4627
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    const/4 v11, 0x1

    invoke-virtual {v10, v11}, Landroid/os/Handler;->sendEmptyMessage(I)Z

    .line 4631
    :cond_5
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v10, v10, Lcom/android/server/policy/PhoneWindowManager;->mLidControlsSleep:Z

    if-nez v10, :cond_6

    if-eqz p3, :cond_a

    .line 4677
    :cond_6
    :goto_1
    const/4 v8, 0x0

    .line 4678
    .local v8, "updateDelaytime":I
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v10}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v10

    const/4 v11, 0x2

    if-ne v10, v11, :cond_7

    .line 4679
    if-eqz p3, :cond_12

    const/4 v8, 0x0

    .line 4682
    :cond_7
    :goto_2
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    new-instance v11, Lcom/android/server/policy/SamsungPhoneWindowManager$32;

    invoke-direct {v11, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$32;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    .line 4689
    int-to-long v12, v8

    .line 4682
    invoke-virtual {v10, v11, v12, v13}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    .line 4691
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v10}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v10

    const/4 v11, 0x1

    if-ne v10, v11, :cond_8

    .line 4692
    if-eqz p3, :cond_13

    .line 4701
    :cond_8
    :goto_3
    if-nez p3, :cond_14

    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v10, v10, Lcom/android/server/policy/PhoneWindowManager;->mLidControlsSleep:Z

    if-eqz v10, :cond_14

    .line 4706
    :goto_4
    const/4 v10, 0x1

    return v10

    .line 4593
    .end local v8    # "updateDelaytime":I
    :cond_9
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderCloseSound:Ljava/lang/String;

    .restart local v6    # "soundPath":Ljava/lang/String;
    goto :goto_0

    .line 4632
    .end local v6    # "soundPath":Ljava/lang/String;
    :cond_a
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v10}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v10

    .line 4633
    const-string v11, "premium_watch_switch_onoff"

    const/4 v12, 0x0

    .line 4632
    invoke-static {v10, v11, v12}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v9

    .line 4634
    .local v9, "watchOn":I
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v10}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v10

    .line 4635
    const-string v11, "sub_lcd_auto_lock"

    const/4 v12, 0x0

    .line 4634
    invoke-static {v10, v11, v12}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v10

    .line 4635
    const/4 v11, 0x1

    .line 4634
    if-ne v10, v11, :cond_f

    const/4 v7, 0x1

    .line 4636
    .local v7, "subLCDAutoLock":Z
    :goto_5
    const/4 v4, 0x0

    .line 4637
    .local v4, "launchWatch":Z
    const-string v10, "service.camera.running"

    const-string v11, "0"

    invoke-static {v10, v11}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v10

    .line 4638
    const-string v11, "1"

    .line 4637
    invoke-virtual {v10, v11}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    .line 4639
    .local v2, "isCameraRunning":Z
    const/4 v3, 0x0

    .line 4641
    .local v3, "isOffhook":Z
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    if-nez v10, :cond_b

    .line 4642
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v11, "phone"

    invoke-virtual {v10, v11}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v10

    check-cast v10, Landroid/telephony/TelephonyManager;

    iput-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    .line 4645
    :cond_b
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    if-eqz v10, :cond_c

    .line 4646
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTelephonyManager:Landroid/telephony/TelephonyManager;

    invoke-virtual {v10}, Landroid/telephony/TelephonyManager;->isOffhook()Z

    move-result v3

    .line 4649
    .end local v3    # "isOffhook":Z
    :cond_c
    if-eqz v7, :cond_11

    .line 4655
    const/4 v10, 0x1

    if-ne v9, v10, :cond_d

    .line 4657
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockPatternUtils:Lcom/android/internal/widget/LockPatternUtils;

    const/4 v11, 0x0

    invoke-virtual {v10, v11}, Lcom/android/internal/widget/LockPatternUtils;->isLockScreenDisabled(I)Z

    move-result v5

    .line 4658
    .local v5, "lockTypeNone":Z
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    if-eqz v10, :cond_d

    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSEM:Lcom/samsung/android/emergencymode/SemEmergencyManager;

    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v10}, Lcom/samsung/android/emergencymode/SemEmergencyManager;->isEmergencyMode(Landroid/content/Context;)Z

    move-result v10

    if-eqz v10, :cond_10

    .line 4665
    .end local v5    # "lockTypeNone":Z
    :cond_d
    :goto_6
    const-string v10, "SamsungPhoneWindowManager"

    new-instance v11, Ljava/lang/StringBuilder;

    invoke-direct {v11}, Ljava/lang/StringBuilder;-><init>()V

    const-string v12, "isCameraRunning: "

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11, v2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v11

    const-string v12, ", isOffhook: "

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11, v3}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v11

    invoke-static {v10, v11}, Landroid/util/Log;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 4666
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    invoke-virtual {v10}, Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isShowing()Z

    move-result v10

    if-nez v10, :cond_6

    .line 4667
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v11, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v11, v11, Lcom/android/server/policy/PhoneWindowManager;->mCurrentUserId:I

    invoke-virtual {v10, v11}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardSecure(I)Z

    move-result v10

    if-nez v10, :cond_e

    if-nez v4, :cond_6

    if-nez v3, :cond_6

    if-nez v2, :cond_6

    .line 4668
    :cond_e
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/4 v11, 0x0

    invoke-virtual {v10, v11}, Lcom/android/server/policy/PhoneWindowManager;->lockNow(Landroid/os/Bundle;)V

    goto/16 :goto_1

    .line 4634
    .end local v2    # "isCameraRunning":Z
    .end local v4    # "launchWatch":Z
    .end local v7    # "subLCDAutoLock":Z
    :cond_f
    const/4 v7, 0x0

    .restart local v7    # "subLCDAutoLock":Z
    goto/16 :goto_5

    .line 4658
    .restart local v2    # "isCameraRunning":Z
    .restart local v4    # "launchWatch":Z
    .restart local v5    # "lockTypeNone":Z
    :cond_10
    if-nez v2, :cond_d

    if-nez v3, :cond_d

    .line 4659
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v10}, Lcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z

    move-result v10

    .line 4658
    if-eqz v10, :cond_d

    .line 4659
    if-nez v5, :cond_d

    .line 4660
    const/4 v10, 0x0

    invoke-virtual {p0, v10}, Lcom/android/server/policy/SamsungPhoneWindowManager;->launchPremiumWatch(Z)V

    .line 4661
    const/4 v4, 0x1

    goto :goto_6

    .line 4672
    .end local v5    # "lockTypeNone":Z
    :cond_11
    const-string v10, "SamsungPhoneWindowManager"

    const-string v11, "Auto lock is not enabled."

    invoke-static {v10, v11}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_1

    .line 4679
    .end local v2    # "isCameraRunning":Z
    .end local v4    # "launchWatch":Z
    .end local v7    # "subLCDAutoLock":Z
    .end local v9    # "watchOn":I
    .restart local v8    # "updateDelaytime":I
    :cond_12
    const/16 v8, 0x1f4

    goto/16 :goto_2

    .line 4693
    :cond_13
    invoke-static {}, Landroid/os/FactoryTest;->isRunningFactoryApp()Z

    move-result v10

    if-nez v10, :cond_8

    .line 4694
    invoke-static {}, Landroid/os/FactoryTest;->isFactoryBinary()Z

    move-result v10

    if-nez v10, :cond_8

    .line 4695
    invoke-static {}, Lcom/android/server/policy/SamsungPolicyProperties;->isDomesticOtaStart()Z

    move-result v10

    if-nez v10, :cond_8

    .line 4696
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v10}, Lcom/android/server/policy/SamsungPolicyProperties;->isBlockKey(Landroid/content/Context;)Z

    move-result v10

    if-nez v10, :cond_8

    .line 4697
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isPreloadInstallComplete()Z

    move-result v10

    .line 4691
    if-eqz v10, :cond_8

    .line 4698
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v10}, Lcom/android/server/policy/PhoneWindowManager;->launchHomeFromHotKey()V

    goto/16 :goto_3

    .line 4702
    :cond_14
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v12

    iget-object v11, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v11, v11, Lcom/android/server/policy/PhoneWindowManager;->mAllowTheaterModeWakeFromLidSwitch:Z

    const/4 v14, 0x5

    invoke-virtual {v10, v12, v13, v11, v14}, Lcom/android/server/policy/PhoneWindowManager;->wakeUp(JZI)Z

    .line 4703
    iget-object v10, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v12

    const/4 v11, 0x0

    invoke-virtual {v10, v12, v13, v11}, Landroid/os/PowerManager;->userActivity(JZ)V

    goto/16 :goto_4
.end method

.method public notifyPenSwitchChanged(JZ)V
    .locals 17
    .param p1, "whenNanos"    # J
    .param p3, "penInsert"    # Z

    .prologue
    .line 4711
    if-eqz p3, :cond_1

    const/4 v5, 0x1

    .line 4712
    .local v5, "newPenState":I
    :goto_0
    const/4 v6, 0x1

    .line 4713
    .local v6, "playSound":Z
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v11}, Lcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z

    move-result v8

    .line 4714
    .local v8, "screenOn":Z
    sget-boolean v11, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v11, :cond_0

    const-string v11, "SamsungPhoneWindowManager"

    new-instance v12, Ljava/lang/StringBuilder;

    invoke-direct {v12}, Ljava/lang/StringBuilder;-><init>()V

    const-string v13, "newPenState : "

    invoke-virtual {v12, v13}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v12

    invoke-virtual {v12, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v12

    const-string v13, ", mPenState : "

    invoke-virtual {v12, v13}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v12

    move-object/from16 v0, p0

    iget v13, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenState:I

    invoke-virtual {v12, v13}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v12

    invoke-virtual {v12}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v12

    invoke-static {v11, v12}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4715
    :cond_0
    move-object/from16 v0, p0

    iget v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenState:I

    if-ne v5, v11, :cond_2

    .line 4716
    return-void

    .line 4711
    .end local v5    # "newPenState":I
    .end local v6    # "playSound":Z
    .end local v8    # "screenOn":Z
    :cond_1
    const/4 v5, 0x0

    .restart local v5    # "newPenState":I
    goto :goto_0

    .line 4717
    .restart local v6    # "playSound":Z
    .restart local v8    # "screenOn":Z
    :cond_2
    move-object/from16 v0, p0

    iget v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenState:I

    const/4 v12, -0x1

    if-ne v11, v12, :cond_3

    .line 4718
    const/4 v6, 0x0

    .line 4720
    :cond_3
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v11}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v11

    const-string v12, "spen_feedback_sound"

    const/4 v13, 0x0

    const/4 v14, -0x2

    invoke-static {v11, v12, v13, v14}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v11

    if-nez v11, :cond_4

    .line 4721
    const/4 v6, 0x0

    .line 4724
    :cond_4
    sget-boolean v11, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v11, :cond_5

    const-string v11, "SamsungPhoneWindowManager"

    new-instance v12, Ljava/lang/StringBuilder;

    invoke-direct {v12}, Ljava/lang/StringBuilder;-><init>()V

    const-string v13, "playSound : "

    invoke-virtual {v12, v13}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v12

    invoke-virtual {v12, v6}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v12

    const-string v13, ", screenOn : "

    invoke-virtual {v12, v13}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v12

    invoke-virtual {v12, v8}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v12

    invoke-virtual {v12}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v12

    invoke-static {v11, v12}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4726
    :cond_5
    move-object/from16 v0, p0

    iput v5, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenState:I

    .line 4728
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v11}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v11

    .line 4729
    const-string v12, "pen_detachment_notification"

    const/4 v13, -0x2

    .line 4728
    invoke-static {v11, v12, v13}, Landroid/provider/Settings$System;->getStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;I)Ljava/lang/String;

    move-result-object v9

    .line 4731
    .local v9, "sound":Ljava/lang/String;
    if-eqz v9, :cond_c

    const-string v11, ","

    invoke-virtual {v9, v11}, Ljava/lang/String;->split(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object v10

    .line 4733
    :goto_1
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSounds:Landroid/media/SoundPool;

    if-nez v11, :cond_6

    if-eqz v9, :cond_6

    array-length v11, v10

    const/4 v12, 0x1

    if-le v11, v12, :cond_6

    .line 4735
    :try_start_0
    new-instance v11, Landroid/media/SoundPool;

    const/4 v12, 0x2

    const/4 v13, 0x1

    const/4 v14, 0x0

    invoke-direct {v11, v12, v13, v14}, Landroid/media/SoundPool;-><init>(III)V

    move-object/from16 v0, p0

    iput-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSounds:Landroid/media/SoundPool;

    .line 4736
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSounds:Landroid/media/SoundPool;

    const/4 v12, 0x0

    aget-object v12, v10, v12

    const/4 v13, 0x1

    invoke-virtual {v11, v12, v13}, Landroid/media/SoundPool;->load(Ljava/lang/String;I)I

    move-result v11

    move-object/from16 v0, p0

    iput v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertSoundId:I

    .line 4737
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSounds:Landroid/media/SoundPool;

    const/4 v12, 0x1

    aget-object v12, v10, v12

    const/4 v13, 0x1

    invoke-virtual {v11, v12, v13}, Landroid/media/SoundPool;->load(Ljava/lang/String;I)I

    move-result v11

    move-object/from16 v0, p0

    iput v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenDetachSoundId:I
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    .line 4744
    :cond_6
    :goto_2
    const/4 v4, 0x0

    .line 4745
    .local v4, "enableScreenOffMemo":Z
    new-instance v7, Landroid/content/Intent;

    invoke-direct {v7}, Landroid/content/Intent;-><init>()V

    .line 4746
    .local v7, "screenOffMemoIntent":Landroid/content/Intent;
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v11}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v11

    .line 4747
    const-string v12, "action_memo_on_off_screen"

    const/4 v13, 0x0

    const/4 v14, -0x2

    .line 4746
    invoke-static {v11, v12, v13, v14}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v11

    if-eqz v11, :cond_d

    .line 4748
    const/4 v4, 0x1

    .line 4749
    new-instance v11, Landroid/content/ComponentName;

    const-string v12, "com.samsung.android.snote"

    const-string v13, "com.samsung.android.snote.control.ui.quickmemo.service.InstantMemo_Service"

    invoke-direct {v11, v12, v13}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    invoke-virtual {v7, v11}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 4756
    :cond_7
    :goto_3
    if-eqz p3, :cond_e

    .line 4758
    if-eqz v6, :cond_8

    if-eqz v9, :cond_8

    :try_start_1
    array-length v11, v10

    const/4 v12, 0x1

    if-le v11, v12, :cond_8

    move-object/from16 v0, p0

    iget v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertSoundId:I

    move-object/from16 v0, p0

    invoke-direct {v0, v11}, Lcom/android/server/policy/SamsungPhoneWindowManager;->playPenSound(I)V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_2

    .line 4761
    :cond_8
    :goto_4
    move-object/from16 v0, p0

    iget-boolean v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenNotifyVibrationChecked:Z

    if-eqz v11, :cond_9

    .line 4762
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    sget-object v12, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_MAX:Landroid/os/Vibrator$SemMagnitudeTypes;

    const v13, 0xc36d

    const/4 v14, -0x1

    const/4 v15, 0x0

    invoke-virtual {v11, v13, v14, v15, v12}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4784
    :cond_9
    :goto_5
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertedIntent:Landroid/content/Intent;

    const-string v12, "penInsert"

    move/from16 v0, p3

    invoke-virtual {v11, v12, v0}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 4785
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertedIntent:Landroid/content/Intent;

    const-string v12, "isScreenOn"

    invoke-virtual {v11, v12, v8}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 4786
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertedIntent:Landroid/content/Intent;

    const-string v12, "isKeyguardLocked"

    move-object/from16 v0, p0

    iget-object v13, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v13}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v13

    invoke-virtual {v11, v12, v13}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 4788
    move-object/from16 v0, p0

    iget-object v12, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertedIntent:Landroid/content/Intent;

    const-string v13, "isBoot"

    const-wide/16 v14, 0x0

    cmp-long v11, p1, v14

    if-nez v11, :cond_13

    const/4 v11, 0x1

    :goto_6
    invoke-virtual {v12, v13, v11}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 4789
    sget-boolean v11, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v11, :cond_a

    const-string v11, "SamsungPhoneWindowManager"

    new-instance v12, Ljava/lang/StringBuilder;

    invoke-direct {v12}, Ljava/lang/StringBuilder;-><init>()V

    const-string v13, "pen = "

    invoke-virtual {v12, v13}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v12

    move/from16 v0, p3

    invoke-virtual {v12, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v12

    const-string v13, " , broadcasted."

    invoke-virtual {v12, v13}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v12

    invoke-virtual {v12}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v12

    invoke-static {v11, v12}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4790
    :cond_a
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v0, p0

    iget-object v12, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenInsertedIntent:Landroid/content/Intent;

    sget-object v13, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    invoke-virtual {v11, v12, v13}, Landroid/content/Context;->sendStickyBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 4792
    if-eqz v4, :cond_b

    const-wide/16 v12, 0x0

    cmp-long v11, p1, v12

    if-eqz v11, :cond_b

    if-eqz p3, :cond_14

    .line 4710
    :cond_b
    :goto_7
    return-void

    .line 4731
    .end local v4    # "enableScreenOffMemo":Z
    .end local v7    # "screenOffMemoIntent":Landroid/content/Intent;
    :cond_c
    const/4 v10, 0x0

    .local v10, "soundPath":[Ljava/lang/String;
    goto/16 :goto_1

    .line 4738
    .end local v10    # "soundPath":[Ljava/lang/String;
    :catch_0
    move-exception v3

    .line 4739
    .local v3, "e":Ljava/lang/Exception;
    const-string v11, "SamsungPhoneWindowManager"

    const-string v12, "cannot load pen sound"

    invoke-static {v11, v12}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4740
    const/4 v11, 0x0

    move-object/from16 v0, p0

    iput-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenSounds:Landroid/media/SoundPool;

    goto/16 :goto_2

    .line 4750
    .end local v3    # "e":Ljava/lang/Exception;
    .restart local v4    # "enableScreenOffMemo":Z
    .restart local v7    # "screenOffMemoIntent":Landroid/content/Intent;
    :cond_d
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v11}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v11

    .line 4751
    const-string v12, "screen_off_memo"

    const/4 v13, 0x0

    const/4 v14, -0x2

    .line 4750
    invoke-static {v11, v12, v13, v14}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v11

    if-eqz v11, :cond_7

    .line 4752
    const/4 v4, 0x1

    .line 4753
    new-instance v11, Landroid/content/ComponentName;

    const-string v12, "com.samsung.android.app.notes"

    const-string v13, "com.samsung.android.app.notes.screenoffmemo.ScreenOffMemoService"

    invoke-direct {v11, v12, v13}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    invoke-virtual {v7, v11}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    goto/16 :goto_3

    .line 4764
    :cond_e
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v11}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v11

    if-eqz v11, :cond_11

    .line 4765
    if-nez v4, :cond_f

    .line 4766
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v12

    const/4 v14, 0x4

    invoke-virtual {v11, v12, v13, v14}, Landroid/os/PowerManager;->wakeUp(JI)V

    .line 4777
    :cond_f
    :goto_8
    if-eqz v6, :cond_10

    if-eqz v9, :cond_10

    :try_start_2
    array-length v11, v10

    const/4 v12, 0x1

    if-le v11, v12, :cond_10

    move-object/from16 v0, p0

    iget v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenDetachSoundId:I

    move-object/from16 v0, p0

    invoke-direct {v0, v11}, Lcom/android/server/policy/SamsungPhoneWindowManager;->playPenSound(I)V
    :try_end_2
    .catch Ljava/lang/Exception; {:try_start_2 .. :try_end_2} :catch_1

    .line 4780
    :cond_10
    :goto_9
    move-object/from16 v0, p0

    iget-boolean v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenNotifyVibrationChecked:Z

    if-eqz v11, :cond_9

    .line 4781
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    sget-object v12, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_MAX:Landroid/os/Vibrator$SemMagnitudeTypes;

    const v13, 0xc369

    const/4 v14, -0x1

    const/4 v15, 0x0

    invoke-virtual {v11, v13, v14, v15, v12}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    goto/16 :goto_5

    .line 4769
    :cond_11
    if-eqz v8, :cond_12

    .line 4770
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v12

    const/4 v14, 0x0

    invoke-virtual {v11, v12, v13, v14}, Landroid/os/PowerManager;->userActivity(JZ)V

    goto :goto_8

    .line 4771
    :cond_12
    if-nez v4, :cond_f

    .line 4772
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManager:Landroid/os/PowerManager;

    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v12

    const/4 v14, 0x4

    invoke-virtual {v11, v12, v13, v14}, Landroid/os/PowerManager;->wakeUp(JI)V

    goto :goto_8

    .line 4788
    :cond_13
    const/4 v11, 0x0

    goto/16 :goto_6

    .line 4793
    :cond_14
    const-string v11, "pen_intent_com"

    const-string v12, "pen_detach"

    invoke-virtual {v7, v11, v12}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;

    .line 4795
    sget-object v2, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    .line 4797
    .local v2, "curr":Landroid/os/UserHandle;
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v11}, Lcom/samsung/android/knox/SemPersonaManager;->isKioskModeEnabled(Landroid/content/Context;)Z

    move-result v11

    if-eqz v11, :cond_15

    .line 4798
    new-instance v2, Landroid/os/UserHandle;

    .end local v2    # "curr":Landroid/os/UserHandle;
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v11

    invoke-virtual {v11}, Lcom/samsung/android/knox/SemPersonaManager;->getKioskId()I

    move-result v11

    invoke-direct {v2, v11}, Landroid/os/UserHandle;-><init>(I)V

    .line 4802
    .restart local v2    # "curr":Landroid/os/UserHandle;
    :cond_15
    move-object/from16 v0, p0

    iget-object v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v11, v7, v2}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;

    goto/16 :goto_7

    .line 4778
    .end local v2    # "curr":Landroid/os/UserHandle;
    :catch_1
    move-exception v3

    .restart local v3    # "e":Ljava/lang/Exception;
    goto :goto_9

    .line 4759
    .end local v3    # "e":Ljava/lang/Exception;
    :catch_2
    move-exception v3

    .restart local v3    # "e":Ljava/lang/Exception;
    goto/16 :goto_4
.end method

.method public onConfigurationChanged()V
    .locals 3

    .prologue
    const/4 v2, 0x0

    .line 9197
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDesktopMode:Z

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->isDesktopModeLw()Z

    move-result v1

    if-eq v0, v1, :cond_0

    .line 9198
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v0, v2}, Lcom/android/server/policy/PhoneWindowManager;->setRecentsVisibilityLw(Z)V

    .line 9201
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->isDesktopModeLw()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 9202
    const/4 v0, 0x1

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDesktopMode:Z

    .line 9204
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updateTaskBarHeightInDesktopMode()V

    .line 9195
    :goto_0
    return-void

    .line 9207
    :cond_1
    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDesktopMode:Z

    goto :goto_0
.end method

.method public onLockTaskModeChanged(I)V
    .locals 1
    .param p1, "lockTaskModeState"    # I

    .prologue
    .line 5264
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockTaskModeState:I

    if-eq v0, p1, :cond_0

    .line 5265
    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLockTaskModeState:I

    .line 5263
    :cond_0
    return-void
.end method

.method public performCPUBoost()V
    .locals 6

    .prologue
    .line 4952
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    monitor-enter v2

    .line 4953
    :try_start_0
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeUpBooster:Lcom/samsung/android/os/SemDvfsManager;

    if-nez v1, :cond_0

    .line 4954
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v3, "DEVICE_WAKEUP"

    const/16 v4, 0x15

    const/4 v5, 0x1

    invoke-static {v1, v3, v4, v5}, Lcom/samsung/android/os/SemDvfsManager;->createInstance(Landroid/content/Context;Ljava/lang/String;II)Lcom/samsung/android/os/SemDvfsManager;

    move-result-object v1

    sput-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeUpBooster:Lcom/samsung/android/os/SemDvfsManager;

    .line 4957
    :cond_0
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeUpBooster:Lcom/samsung/android/os/SemDvfsManager;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v1, :cond_1

    .line 4959
    :try_start_1
    const-string v1, "SamsungPhoneWindowManager"

    const-string v3, "mWakeUpBooster.acquire()"

    invoke-static {v1, v3}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4960
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeUpBooster:Lcom/samsung/android/os/SemDvfsManager;

    invoke-virtual {v1}, Lcom/samsung/android/os/SemDvfsManager;->acquire()V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_1
    :goto_0
    monitor-exit v2

    .line 4951
    return-void

    .line 4961
    :catch_0
    move-exception v0

    .line 4962
    .local v0, "e":Ljava/lang/Exception;
    :try_start_2
    const-string v1, "SamsungPhoneWindowManager"

    const-string v3, "HINT_DEVICE_WAKEUP.acquire is failed"

    invoke-static {v1, v3}, Landroid/util/Log;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 4963
    invoke-virtual {v0}, Ljava/lang/Exception;->printStackTrace()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto :goto_0

    .line 4952
    .end local v0    # "e":Ljava/lang/Exception;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z
    .locals 12
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "effectId"    # I
    .param p3, "always"    # Z

    .prologue
    const/4 v7, -0x2

    const/4 v11, 0x0

    const/4 v10, -0x1

    const/4 v9, 0x0

    const/4 v8, 0x1

    .line 4374
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    invoke-virtual {v5}, Landroid/os/Vibrator;->hasVibrator()Z

    move-result v5

    if-nez v5, :cond_0

    .line 4375
    return v11

    .line 4379
    :cond_0
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    .line 4380
    const-string v6, "haptic_feedback_enabled"

    .line 4378
    invoke-static {v5, v6, v11, v7}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v5

    if-nez v5, :cond_3

    const/4 v2, 0x1

    .line 4384
    .local v2, "hapticsDisabled":Z
    :goto_0
    invoke-static {}, Lcom/samsung/android/feature/SemFloatingFeature;->getInstance()Lcom/samsung/android/feature/SemFloatingFeature;

    move-result-object v5

    const-string v6, "SEC_FLOATING_FEATURE_COMMON_SUPPORT_SAFETYCARE"

    invoke-virtual {v5, v6}, Lcom/samsung/android/feature/SemFloatingFeature;->getBoolean(Ljava/lang/String;)Z

    move-result v5

    if-nez v5, :cond_1

    invoke-static {}, Lcom/samsung/android/feature/SemFloatingFeature;->getInstance()Lcom/samsung/android/feature/SemFloatingFeature;

    move-result-object v5

    const-string v6, "SEC_FLOATING_FEATURE_COMMON_SUPPORT_ULTRA_POWER_SAVING"

    invoke-virtual {v5, v6}, Lcom/samsung/android/feature/SemFloatingFeature;->getBoolean(Ljava/lang/String;)Z

    move-result v5

    if-nez v5, :cond_1

    .line 4385
    invoke-static {}, Lcom/samsung/android/feature/SemFloatingFeature;->getInstance()Lcom/samsung/android/feature/SemFloatingFeature;

    move-result-object v5

    const-string v6, "SEC_FLOATING_FEATURE_COMMON_SUPPORT_BATTERY_CONVERSING"

    invoke-virtual {v5, v6}, Lcom/samsung/android/feature/SemFloatingFeature;->getBoolean(Ljava/lang/String;)Z

    move-result v5

    .line 4384
    if-eqz v5, :cond_5

    .line 4387
    :cond_1
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    .line 4388
    const-string v6, "emergency_mode"

    .line 4386
    invoke-static {v5, v6, v11, v7}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v5

    if-ne v5, v8, :cond_4

    const/4 v1, 0x1

    .line 4394
    .local v1, "emergencyModeEnabled":Z
    :goto_1
    if-eqz p1, :cond_6

    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getOwningUid()I

    move-result v4

    .line 4395
    .local v4, "req_uid":I
    :goto_2
    const-string v5, "SamsungPhoneWindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string v7, "f.b. a = "

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, p3}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v6

    const-string v7, " hd = "

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v6

    const-string v7, " eme = "

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v1}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 4396
    const-string v7, " ksno = "

    .line 4395
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 4396
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v7}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v7

    .line 4395
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 4396
    const-string v7, " id = "

    .line 4395
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v4}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 4397
    const-string v7, " isDM = "

    .line 4395
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 4397
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isKnoxDesktopMode()Z

    move-result v7

    .line 4395
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4399
    if-nez p3, :cond_7

    if-nez v2, :cond_2

    if-nez v1, :cond_2

    .line 4400
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v5}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z

    move-result v5

    .line 4399
    if-nez v5, :cond_2

    .line 4401
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v5

    .line 4399
    if-eqz v5, :cond_7

    .line 4402
    :cond_2
    const-string v5, "SamsungPhoneWindowManager"

    const-string v6, "haptic disabled by policy"

    invoke-static {v5, v6}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4403
    return v11

    .line 4378
    .end local v1    # "emergencyModeEnabled":Z
    .end local v2    # "hapticsDisabled":Z
    .end local v4    # "req_uid":I
    :cond_3
    const/4 v2, 0x0

    .restart local v2    # "hapticsDisabled":Z
    goto/16 :goto_0

    .line 4386
    :cond_4
    const/4 v1, 0x0

    .restart local v1    # "emergencyModeEnabled":Z
    goto/16 :goto_1

    .line 4390
    .end local v1    # "emergencyModeEnabled":Z
    :cond_5
    const/4 v1, 0x0

    .restart local v1    # "emergencyModeEnabled":Z
    goto/16 :goto_1

    .line 4394
    :cond_6
    const/4 v4, -0x1

    .restart local v4    # "req_uid":I
    goto/16 :goto_2

    .line 4406
    :cond_7
    sget-boolean v5, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v5, :cond_8

    .line 4407
    if-eqz p1, :cond_8

    .line 4408
    const-string v5, "SamsungPhoneWindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string v7, "haptic feedback for : "

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4412
    :cond_8
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    invoke-virtual {v5}, Landroid/os/Vibrator;->semIsHapticSupported()Z

    move-result v5

    if-eqz v5, :cond_a

    .line 4413
    sparse-switch p2, :sswitch_data_0

    .line 4449
    invoke-static {p2}, Landroid/view/HapticFeedbackConstants;->isValidatedVibeIndex(I)Z

    move-result v5

    if-eqz v5, :cond_9

    .line 4450
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 4451
    sget-object v6, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_TOUCH:Landroid/os/Vibrator$SemMagnitudeTypes;

    .line 4450
    invoke-virtual {v5, p2, v10, v9, v6}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4452
    return v8

    .line 4415
    :sswitch_0
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 4416
    sget-object v6, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_TOUCH:Landroid/os/Vibrator$SemMagnitudeTypes;

    .line 4415
    const v7, 0xc369

    invoke-virtual {v5, v7, v10, v9, v6}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4417
    return v8

    .line 4422
    :sswitch_1
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 4423
    sget-object v6, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_TOUCH:Landroid/os/Vibrator$SemMagnitudeTypes;

    .line 4422
    const v7, 0xc36a

    invoke-virtual {v5, v7, v10, v9, v6}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4424
    return v8

    .line 4427
    :sswitch_2
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 4428
    sget-object v6, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_TOUCH:Landroid/os/Vibrator$SemMagnitudeTypes;

    .line 4427
    const v7, 0xc36b

    invoke-virtual {v5, v7, v10, v9, v6}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4429
    return v8

    .line 4433
    :sswitch_3
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 4434
    sget-object v6, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_TOUCH:Landroid/os/Vibrator$SemMagnitudeTypes;

    .line 4433
    const v7, 0xc376

    invoke-virtual {v5, v7, v10, v9, v6}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4435
    return v8

    .line 4438
    :sswitch_4
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 4439
    sget-object v6, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_TOUCH:Landroid/os/Vibrator$SemMagnitudeTypes;

    .line 4438
    const v7, 0xc377

    invoke-virtual {v5, v7, v10, v9, v6}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4440
    return v8

    .line 4443
    :sswitch_5
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    .line 4444
    sget-object v6, Landroid/os/Vibrator$SemMagnitudeTypes;->TYPE_TOUCH:Landroid/os/Vibrator$SemMagnitudeTypes;

    .line 4443
    const v7, 0xc378

    invoke-virtual {v5, v7, v10, v9, v6}, Landroid/os/Vibrator;->semVibrate(IILandroid/media/AudioAttributes;Landroid/os/Vibrator$SemMagnitudeTypes;)V

    .line 4445
    return v8

    .line 4455
    :cond_9
    return v11

    .line 4457
    :cond_a
    const/4 v0, 0x0

    .line 4458
    .local v0, "duration":I
    sparse-switch p2, :sswitch_data_1

    .line 4492
    return v11

    .line 4462
    :sswitch_6
    const/16 v0, 0x32

    .line 4494
    :goto_3
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    int-to-long v6, v0

    invoke-virtual {v5, v6, v7}, Landroid/os/Vibrator;->vibrate(J)V

    .line 4496
    return v8

    .line 4467
    :sswitch_7
    const/16 v0, 0x32

    .line 4468
    goto :goto_3

    .line 4471
    :sswitch_8
    const/16 v0, 0x64

    .line 4472
    goto :goto_3

    .line 4475
    :sswitch_9
    const/16 v0, 0x1f4

    .line 4476
    goto :goto_3

    .line 4478
    :sswitch_a
    const/16 v0, 0x5dc

    .line 4479
    goto :goto_3

    .line 4481
    :sswitch_b
    const/16 v0, 0xfa

    .line 4482
    goto :goto_3

    .line 4484
    :sswitch_c
    const/4 v5, 0x4

    new-array v3, v5, [J

    .local v3, "pattern":[J
    fill-array-data v3, :array_0

    .line 4485
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    invoke-virtual {v5, v3, v10}, Landroid/os/Vibrator;->vibrate([JI)V

    .line 4486
    return v8

    .line 4489
    .end local v3    # "pattern":[J
    :sswitch_d
    const/16 v0, 0x32

    .line 4490
    goto :goto_3

    .line 4413
    :sswitch_data_0
    .sparse-switch
        0x0 -> :sswitch_0
        0x1 -> :sswitch_1
        0x3 -> :sswitch_1
        0xc36a -> :sswitch_1
        0xc36b -> :sswitch_2
        0xc376 -> :sswitch_3
        0xc377 -> :sswitch_4
        0xc378 -> :sswitch_5
    .end sparse-switch

    .line 4458
    :sswitch_data_1
    .sparse-switch
        0x0 -> :sswitch_6
        0x1 -> :sswitch_6
        0x3 -> :sswitch_6
        0xc369 -> :sswitch_7
        0xc36a -> :sswitch_d
        0xc36b -> :sswitch_8
        0xc370 -> :sswitch_9
        0xc371 -> :sswitch_b
        0xc372 -> :sswitch_c
        0xc373 -> :sswitch_a
    .end sparse-switch

    .line 4484
    :array_0
    .array-data 8
        0x0
        0xfa
        0xfa
        0xfa
    .end array-data
.end method

.method public performHome()V
    .locals 2

    .prologue
    .line 4982
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "performHome"

    invoke-static {v0, v1}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4983
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performHomeBoost()V

    .line 4984
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performHomeBroadcast()V

    .line 4981
    return-void
.end method

.method performHomeBoost()V
    .locals 4

    .prologue
    .line 4988
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    monitor-enter v2

    .line 4989
    :try_start_0
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSupportedCPUFreqTable:[I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v1, :cond_0

    .line 4991
    :try_start_1
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHomeBooster:Lcom/samsung/android/os/SemDvfsManager;

    const/16 v3, 0x64

    invoke-virtual {v1, v3}, Lcom/samsung/android/os/SemDvfsManager;->acquire(I)V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_0
    :goto_0
    monitor-exit v2

    .line 4987
    return-void

    .line 4992
    :catch_0
    move-exception v0

    .line 4993
    .local v0, "e":Ljava/lang/Exception;
    :try_start_2
    const-string v1, "SamsungPhoneWindowManager"

    const-string v3, "mHomeBooster is failed"

    invoke-static {v1, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4994
    invoke-virtual {v0}, Ljava/lang/Exception;->printStackTrace()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto :goto_0

    .line 4988
    .end local v0    # "e":Ljava/lang/Exception;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method performHomeBroadcast()V
    .locals 2

    .prologue
    .line 5001
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    new-instance v1, Lcom/android/server/policy/SamsungPhoneWindowManager$35;

    invoke-direct {v1, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$35;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual {v0, v1}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 5000
    return-void
.end method

.method public performSystemKeyFeedback(Landroid/view/KeyEvent;)V
    .locals 5
    .param p1, "event"    # Landroid/view/KeyEvent;

    .prologue
    const v4, 0xc36a

    const/4 v3, 0x0

    const/4 v2, 0x0

    .line 4307
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getDeviceId()I

    move-result v0

    const/4 v1, -0x1

    if-eq v0, v1, :cond_0

    .line 4308
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v0

    if-eqz v0, :cond_1

    const-string v0, "SPC_Remote_Controller"

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v1

    invoke-virtual {v1}, Landroid/view/InputDevice;->getName()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    .line 4307
    if-eqz v0, :cond_1

    .line 4309
    :cond_0
    return-void

    .line 4313
    :cond_1
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v0

    sparse-switch v0, :sswitch_data_0

    .line 4305
    :cond_2
    :goto_0
    return-void

    .line 4319
    :sswitch_0
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v0

    if-eqz v0, :cond_2

    .line 4320
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v0

    invoke-virtual {v0}, Landroid/view/InputDevice;->getName()Ljava/lang/String;

    move-result-object v0

    if-eqz v0, :cond_2

    .line 4321
    invoke-virtual {p1}, Landroid/view/KeyEvent;->getDevice()Landroid/view/InputDevice;

    move-result-object v0

    invoke-virtual {v0}, Landroid/view/InputDevice;->getName()Ljava/lang/String;

    move-result-object v0

    const-string v1, "gpio"

    invoke-virtual {v0, v1}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v0

    if-nez v0, :cond_2

    .line 4322
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsGearVrDocked:Z

    if-nez v0, :cond_2

    .line 4324
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    invoke-virtual {v0}, Landroid/os/Vibrator;->semIsHapticSupported()Z

    move-result v0

    if-eqz v0, :cond_3

    .line 4325
    invoke-virtual {p0, v2, v4, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z

    .line 4327
    :cond_3
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->playSoundEffect()V

    goto :goto_0

    .line 4331
    :sswitch_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v0}, Lcom/android/server/policy/SamsungPolicyProperties;->hasQwertyKeyboard(Landroid/content/Context;)Z

    move-result v0

    if-nez v0, :cond_2

    .line 4332
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    invoke-virtual {v0}, Landroid/os/Vibrator;->semIsHapticSupported()Z

    move-result v0

    if-eqz v0, :cond_4

    .line 4333
    invoke-virtual {p0, v2, v4, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z

    .line 4335
    :cond_4
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->playSoundEffect()V

    goto :goto_0

    .line 4339
    :sswitch_2
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v0}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v0

    const/4 v1, 0x2

    if-ne v0, v1, :cond_2

    .line 4340
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I

    const/4 v1, 0x1

    if-eq v0, v1, :cond_2

    .line 4341
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVibrator:Landroid/os/Vibrator;

    invoke-virtual {v0}, Landroid/os/Vibrator;->semIsHapticSupported()Z

    move-result v0

    if-eqz v0, :cond_5

    .line 4342
    invoke-virtual {p0, v2, v4, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager;->performHapticFeedbackLw(Landroid/view/WindowManagerPolicy$WindowState;IZ)Z

    .line 4344
    :cond_5
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->playSoundEffect()V

    goto :goto_0

    .line 4351
    :sswitch_3
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->playSoundEffect()V

    goto :goto_0

    .line 4313
    :sswitch_data_0
    .sparse-switch
        0x3 -> :sswitch_2
        0x4 -> :sswitch_0
        0x1b -> :sswitch_3
        0x52 -> :sswitch_0
        0x54 -> :sswitch_1
        0xbb -> :sswitch_0
        0xcf -> :sswitch_3
        0x3e9 -> :sswitch_0
        0x430 -> :sswitch_3
        0x431 -> :sswitch_3
    .end sparse-switch
.end method

.method public powerMultiPressAction(I)Z
    .locals 3
    .param p1, "behavior"    # I

    .prologue
    .line 3668
    const/4 v0, 0x0

    .line 3669
    .local v0, "result":Z
    packed-switch p1, :pswitch_data_0

    .line 3713
    :goto_0
    return v0

    .line 3671
    :pswitch_0
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Launch camera power double"

    invoke-static {v1, v2}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3672
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDoubleTapOnPowerEnabled()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 3673
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mMultitapKeyManager:Lcom/android/server/policy/MultitapKeyPolicy;

    const/16 v2, 0x1a

    invoke-interface {v1, v2}, Lcom/android/server/policy/MultitapKeyPolicy;->handleDoubleTapLaunch(I)V

    .line 3675
    :cond_0
    const/4 v0, 0x1

    .line 3676
    goto :goto_0

    .line 3678
    :pswitch_1
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Screen Curtain mode toggle."

    invoke-static {v1, v2}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3679
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDoubleTapOnPowerEnabled()Z

    move-result v1

    if-eqz v1, :cond_1

    .line 3680
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->callAccessibilityScreenCurtain()V

    .line 3682
    :cond_1
    const/4 v0, 0x1

    .line 3683
    goto :goto_0

    .line 3686
    :pswitch_2
    const/4 v0, 0x1

    .line 3687
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->callOneTouchReport()V

    goto :goto_0

    .line 3691
    :pswitch_3
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v1

    if-eqz v1, :cond_2

    .line 3692
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v1

    .line 3691
    if-eqz v1, :cond_2

    .line 3693
    const/4 v0, 0x1

    .line 3694
    goto :goto_0

    .line 3696
    :cond_2
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->triggerPanicCall()V

    .line 3700
    :pswitch_4
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeTi()Z

    move-result v1

    if-eqz v1, :cond_3

    .line 3701
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z

    move-result v1

    .line 3700
    if-eqz v1, :cond_3

    .line 3702
    const/4 v0, 0x1

    .line 3703
    goto :goto_0

    .line 3706
    :cond_3
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "SOS Message mode toggle."

    invoke-static {v1, v2}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3707
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSafetyAssuranceEnabled()Z

    move-result v1

    if-eqz v1, :cond_4

    .line 3708
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->sendBroadcastForSafetyAssurance()V

    .line 3710
    :cond_4
    const/4 v0, 0x1

    .line 3711
    goto :goto_0

    .line 3669
    nop

    :pswitch_data_0
    .packed-switch 0x65
        :pswitch_1
        :pswitch_4
        :pswitch_0
        :pswitch_3
        :pswitch_2
    .end packed-switch
.end method

.method public prepareAddWindowLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I
    .locals 7
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "attrs"    # Landroid/view/WindowManager$LayoutParams;

    .prologue
    const/4 v4, -0x1

    const/4 v6, 0x0

    .line 7300
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->type:I

    sparse-switch v3, :sswitch_data_0

    .line 7354
    :cond_0
    :goto_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mScreenOnFully:Z

    if-nez v3, :cond_1

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceUserActivityTimeoutWin:Ljava/util/ArrayList;

    invoke-virtual {v3, p1}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v3

    if-eqz v3, :cond_3

    .line 7359
    :cond_1
    :goto_1
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getReduceScreenPolicy()Lcom/android/server/policy/ReduceScreenPolicy;

    move-result-object v3

    invoke-interface {v3, p1, p2}, Lcom/android/server/policy/ReduceScreenPolicy;->prepareAddWindowLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I

    .line 7362
    return v6

    .line 7303
    :sswitch_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    .line 7304
    const-string v4, "android.permission.STATUS_BAR_SERVICE"

    .line 7305
    const-string v5, "SamsungPhoneWindowManager"

    .line 7303
    invoke-virtual {v3, v4, v5}, Landroid/content/Context;->enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V

    .line 7306
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v3, :cond_2

    .line 7307
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v3}, Landroid/view/WindowManagerPolicy$WindowState;->isAlive()Z

    move-result v3

    if-eqz v3, :cond_2

    .line 7308
    const/4 v3, -0x7

    return v3

    .line 7311
    :cond_2
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7315
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v2

    .line 7316
    .local v2, "res":Landroid/content/res/Resources;
    invoke-static {}, Landroid/hardware/display/DisplayManagerGlobal;->getInstance()Landroid/hardware/display/DisplayManagerGlobal;

    move-result-object v3

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v4

    invoke-interface {v4}, Lcom/samsung/android/view/IWindowStateBridge;->getDisplayId()I

    move-result v4

    invoke-virtual {v3, v4}, Landroid/hardware/display/DisplayManagerGlobal;->getRealDisplay(I)Landroid/view/Display;

    move-result-object v0

    .line 7317
    .local v0, "display":Landroid/view/Display;
    if-eqz v0, :cond_0

    .line 7320
    new-instance v1, Landroid/util/DisplayMetrics;

    invoke-direct {v1}, Landroid/util/DisplayMetrics;-><init>()V

    .line 7321
    .local v1, "metrics":Landroid/util/DisplayMetrics;
    invoke-virtual {v0, v1}, Landroid/view/Display;->getMetrics(Landroid/util/DisplayMetrics;)V

    .line 7322
    const v3, 0x10500c5

    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v3

    iget v4, v1, Landroid/util/DisplayMetrics;->densityDpi:I

    mul-int/2addr v3, v4

    invoke-virtual {v2}, Landroid/content/res/Resources;->getConfiguration()Landroid/content/res/Configuration;

    move-result-object v4

    iget v4, v4, Landroid/content/res/Configuration;->densityDpi:I

    div-int/2addr v3, v4

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeSize:I

    goto :goto_0

    .line 7328
    .end local v0    # "display":Landroid/view/Display;
    .end local v1    # "metrics":Landroid/util/DisplayMetrics;
    .end local v2    # "res":Landroid/content/res/Resources;
    :sswitch_1
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethod:Landroid/view/WindowManagerPolicy$WindowState;

    goto :goto_0

    .line 7331
    :sswitch_2
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethodDlg:Landroid/view/WindowManagerPolicy$WindowState;

    goto :goto_0

    .line 7334
    :sswitch_3
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

    goto :goto_0

    .line 7337
    :sswitch_4
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolOverlayWindow:Landroid/view/WindowManagerPolicy$WindowState;

    goto :goto_0

    .line 7340
    :sswitch_5
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalRatioWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7341
    const/4 v3, 0x1

    invoke-static {v3}, Lcom/android/server/policy/PolicyControl;->setConventionalRatioWinVisible(Z)V

    goto :goto_0

    .line 7344
    :sswitch_6
    iput v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastNavigationBarIconColor:I

    goto :goto_0

    .line 7347
    :sswitch_7
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-nez v3, :cond_0

    .line 7348
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->height:I

    if-ne v3, v4, :cond_0

    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->width:I

    if-ne v3, v4, :cond_0

    .line 7349
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

    goto/16 :goto_0

    .line 7354
    :cond_3
    iget v3, p2, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v4, 0x200000

    and-int/2addr v3, v4

    if-eqz v3, :cond_1

    .line 7355
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceUserActivityTimeoutWin:Ljava/util/ArrayList;

    invoke-virtual {v3, p1}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    goto/16 :goto_1

    .line 7300
    :sswitch_data_0
    .sparse-switch
        0x7db -> :sswitch_1
        0x7dc -> :sswitch_2
        0x7e3 -> :sswitch_6
        0x8de -> :sswitch_0
        0x8e0 -> :sswitch_5
        0x96e -> :sswitch_7
        0x97e -> :sswitch_3
        0x97f -> :sswitch_4
    .end sparse-switch
.end method

.method public prepareDesktopTaskBar(Z)V
    .locals 11
    .param p1, "enable"    # Z

    .prologue
    const/4 v5, 0x1

    const/4 v6, 0x0

    .line 8582
    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v7}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->getWindowManagerLock()Ljava/lang/Object;

    move-result-object v7

    monitor-enter v7

    .line 8583
    if-eqz p1, :cond_0

    .line 8585
    :try_start_0
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/4 v6, 0x1

    iput-boolean v6, v5, Lcom/android/server/policy/PhoneWindowManager;->mHasNavigationBar:Z

    .line 8586
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/4 v6, 0x0

    iput-boolean v6, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarCanMove:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :goto_0
    monitor-exit v7

    .line 8581
    return-void

    .line 8588
    :cond_0
    :try_start_1
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    .line 8589
    const v10, 0x112006b

    .line 8588
    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v9

    iput-boolean v9, v8, Lcom/android/server/policy/PhoneWindowManager;->mHasNavigationBar:Z

    .line 8591
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v8}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v8

    invoke-virtual {v8}, Landroid/content/res/Resources;->getDisplayMetrics()Landroid/util/DisplayMetrics;

    move-result-object v0

    .line 8593
    .local v0, "display":Landroid/util/DisplayMetrics;
    iget v4, v0, Landroid/util/DisplayMetrics;->widthPixels:I

    .line 8594
    .local v4, "width":I
    iget v1, v0, Landroid/util/DisplayMetrics;->heightPixels:I

    .line 8595
    .local v1, "height":I
    if-ge v4, v1, :cond_1

    move v2, v4

    .line 8596
    .local v2, "shortSize":I
    :goto_1
    mul-int/lit16 v8, v2, 0xa0

    iget v9, v0, Landroid/util/DisplayMetrics;->densityDpi:I

    div-int v3, v8, v9

    .line 8597
    .local v3, "shortSizeDp":I
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    if-eq v4, v1, :cond_2

    const/16 v9, 0x258

    if-ge v3, v9, :cond_2

    :goto_2
    iput-boolean v5, v8, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarCanMove:Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    goto :goto_0

    .line 8582
    .end local v0    # "display":Landroid/util/DisplayMetrics;
    .end local v1    # "height":I
    .end local v2    # "shortSize":I
    .end local v3    # "shortSizeDp":I
    .end local v4    # "width":I
    :catchall_0
    move-exception v5

    monitor-exit v7

    throw v5

    .line 8595
    .restart local v0    # "display":Landroid/util/DisplayMetrics;
    .restart local v1    # "height":I
    .restart local v4    # "width":I
    :cond_1
    move v2, v1

    .restart local v2    # "shortSize":I
    goto :goto_1

    .restart local v3    # "shortSizeDp":I
    :cond_2
    move v5, v6

    .line 8597
    goto :goto_2
.end method

.method public prepareSViewCoverLayout(IIIIIIIIIIIIIIIIIIIIIIIII)V
    .locals 6
    .param p1, "displayRotation"    # I
    .param p2, "displayWidth"    # I
    .param p3, "displayHeight"    # I
    .param p4, "systemLeft"    # I
    .param p5, "systemTop"    # I
    .param p6, "systemRight"    # I
    .param p7, "systemBottom"    # I
    .param p8, "unrestrictedScreenLeft"    # I
    .param p9, "unrestrictedScreenTop"    # I
    .param p10, "unrestrictedScreenWidth"    # I
    .param p11, "unrestrictedScreenHeight"    # I
    .param p12, "stableFullscreenLeft"    # I
    .param p13, "stableFullscreenTop"    # I
    .param p14, "stableFullscreenRight"    # I
    .param p15, "stableFullscreenBottom"    # I
    .param p16, "stableLeft"    # I
    .param p17, "stableTop"    # I
    .param p18, "stableRight"    # I
    .param p19, "stableBottom"    # I
    .param p20, "dockLeft"    # I
    .param p21, "dockTop"    # I
    .param p22, "dockRight"    # I
    .param p23, "dockBottom"    # I
    .param p24, "coverHeight"    # I
    .param p25, "coverWidth"    # I

    .prologue
    .line 5479
    iput p4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemLeft:I

    iput p4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemLeft:I

    .line 5480
    iput p5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemTop:I

    iput p5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemTop:I

    .line 5481
    iput p6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemRight:I

    iput p6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemRight:I

    .line 5482
    iput p7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemBottom:I

    iput p7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemBottom:I

    .line 5484
    iput p8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenLeft:I

    iput p8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenLeft:I

    .line 5485
    iput p9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenTop:I

    iput p9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenTop:I

    .line 5486
    move/from16 v0, p10

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenWidth:I

    move/from16 v0, p10

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenWidth:I

    .line 5487
    move/from16 v0, p11

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenHeight:I

    move/from16 v0, p11

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenHeight:I

    .line 5489
    move/from16 v0, p12

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenLeft:I

    move/from16 v0, p12

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenLeft:I

    .line 5490
    move/from16 v0, p13

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenTop:I

    move/from16 v0, p13

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenTop:I

    .line 5491
    move/from16 v0, p14

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenRight:I

    move/from16 v0, p14

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenRight:I

    .line 5492
    move/from16 v0, p15

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenBottom:I

    move/from16 v0, p15

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenBottom:I

    .line 5494
    move/from16 v0, p16

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableLeft:I

    move/from16 v0, p16

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableLeft:I

    .line 5495
    move/from16 v0, p17

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableTop:I

    move/from16 v0, p17

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableTop:I

    .line 5496
    move/from16 v0, p18

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableRight:I

    move/from16 v0, p18

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableRight:I

    .line 5497
    move/from16 v0, p19

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableBottom:I

    move/from16 v0, p19

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableBottom:I

    .line 5499
    move/from16 v0, p20

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockLeft:I

    move/from16 v0, p20

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockLeft:I

    .line 5500
    move/from16 v0, p21

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockTop:I

    move/from16 v0, p21

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockTop:I

    .line 5501
    move/from16 v0, p22

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockRight:I

    move/from16 v0, p22

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockRight:I

    .line 5502
    move/from16 v0, p23

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockBottom:I

    move/from16 v0, p23

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockBottom:I

    .line 5505
    if-eqz p24, :cond_0

    if-eqz p25, :cond_0

    .line 5506
    packed-switch p1, :pswitch_data_0

    .line 5523
    const/4 v3, 0x0

    .local v3, "coverRight":I
    const/4 v2, 0x0

    .line 5524
    .local v2, "coverLeft":I
    const/4 v4, 0x0

    .line 5525
    .local v4, "coverTop":I
    sub-int v1, p3, p24

    .line 5529
    .local v1, "coverBottom":I
    :goto_0
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemLeft:I

    add-int/2addr v5, v2

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemLeft:I

    .line 5530
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemTop:I

    add-int/2addr v5, v4

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemTop:I

    .line 5531
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemRight:I

    sub-int/2addr v5, v3

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemRight:I

    .line 5532
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemBottom:I

    sub-int/2addr v5, v1

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemBottom:I

    .line 5534
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenLeft:I

    add-int/2addr v5, v2

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenLeft:I

    .line 5535
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenTop:I

    add-int/2addr v5, v4

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenTop:I

    .line 5536
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenWidth:I

    sub-int/2addr v5, v2

    sub-int/2addr v5, v3

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenWidth:I

    .line 5538
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenHeight:I

    sub-int/2addr v5, v4

    sub-int/2addr v5, v1

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenHeight:I

    .line 5541
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenRight:I

    sub-int/2addr v5, v3

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenRight:I

    .line 5542
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenBottom:I

    sub-int/2addr v5, v1

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenBottom:I

    .line 5544
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableRight:I

    sub-int/2addr v5, v3

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableRight:I

    .line 5545
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableBottom:I

    sub-int/2addr v5, v1

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableBottom:I

    .line 5547
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockRight:I

    sub-int/2addr v5, v3

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockRight:I

    .line 5548
    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockBottom:I

    sub-int/2addr v5, v1

    iput v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockBottom:I

    .line 5478
    .end local v1    # "coverBottom":I
    .end local v2    # "coverLeft":I
    .end local v3    # "coverRight":I
    .end local v4    # "coverTop":I
    :cond_0
    return-void

    .line 5508
    :pswitch_0
    const/4 v2, 0x0

    .line 5509
    .restart local v2    # "coverLeft":I
    const/4 v1, 0x0

    .restart local v1    # "coverBottom":I
    const/4 v4, 0x0

    .line 5510
    .restart local v4    # "coverTop":I
    sub-int v3, p2, p24

    .line 5511
    .restart local v3    # "coverRight":I
    goto :goto_0

    .line 5513
    .end local v1    # "coverBottom":I
    .end local v2    # "coverLeft":I
    .end local v3    # "coverRight":I
    .end local v4    # "coverTop":I
    :pswitch_1
    const/4 v3, 0x0

    .restart local v3    # "coverRight":I
    const/4 v2, 0x0

    .line 5514
    .restart local v2    # "coverLeft":I
    sub-int v4, p3, p24

    .line 5515
    .restart local v4    # "coverTop":I
    const/4 v1, 0x0

    .line 5516
    .restart local v1    # "coverBottom":I
    goto :goto_0

    .line 5518
    .end local v1    # "coverBottom":I
    .end local v2    # "coverLeft":I
    .end local v3    # "coverRight":I
    .end local v4    # "coverTop":I
    :pswitch_2
    sub-int v2, p2, p24

    .line 5519
    .restart local v2    # "coverLeft":I
    const/4 v1, 0x0

    .restart local v1    # "coverBottom":I
    const/4 v4, 0x0

    .line 5520
    .restart local v4    # "coverTop":I
    const/4 v3, 0x0

    .line 5521
    .restart local v3    # "coverRight":I
    goto :goto_0

    .line 5506
    nop

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_0
        :pswitch_1
        :pswitch_2
    .end packed-switch
.end method

.method public processSViewCoverSetHiddenResultLw(I)Z
    .locals 4
    .param p1, "setHiddenResult"    # I

    .prologue
    const/4 v3, 0x1

    const/4 v1, 0x0

    .line 5458
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_0

    and-int/lit8 v0, p1, 0x1

    if-eqz v0, :cond_0

    .line 5459
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v0

    iget v1, v0, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    const/high16 v2, 0x10000000

    or-int/2addr v1, v2

    iput v1, v0, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    .line 5460
    return v3

    .line 5461
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_1

    and-int/lit8 v0, p1, 0x2

    if-eqz v0, :cond_1

    .line 5462
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v0

    iget v1, v0, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    const v2, -0x10000001

    and-int/2addr v1, v2

    iput v1, v0, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    .line 5463
    return v3

    .line 5465
    :cond_1
    return v1
.end method

.method public processTorchlight(IZZ)V
    .locals 4
    .param p1, "keyCode"    # I
    .param p2, "down"    # Z
    .param p3, "interactive"    # Z

    .prologue
    .line 5172
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightEnabled:Z

    if-eqz v0, :cond_0

    if-eqz p3, :cond_1

    .line 5170
    :cond_0
    :goto_0
    return-void

    .line 5173
    :cond_1
    const/16 v0, 0x18

    if-ne p1, v0, :cond_3

    .line 5174
    if-eqz p2, :cond_2

    .line 5175
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeUpLongPress:Ljava/lang/Runnable;

    invoke-virtual {v0, v1}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 5176
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeUpLongPress:Ljava/lang/Runnable;

    invoke-static {}, Landroid/view/ViewConfiguration;->getGlobalActionKeyTimeout()J

    move-result-wide v2

    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z

    goto :goto_0

    .line 5178
    :cond_2
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeUpLongPress:Ljava/lang/Runnable;

    invoke-virtual {v0, v1}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    goto :goto_0

    .line 5181
    :cond_3
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mVolumeUpLongPress:Ljava/lang/Runnable;

    invoke-virtual {v0, v1}, Landroid/os/Handler;->removeCallbacks(Ljava/lang/Runnable;)V

    .line 5182
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightOn:Z

    if-eqz v0, :cond_0

    .line 5183
    const/4 v0, 0x0

    invoke-direct {p0, v0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->TorchModeFlashSet(I)V

    .line 5184
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightWakeLock:Landroid/os/PowerManager$WakeLock;

    invoke-virtual {v0}, Landroid/os/PowerManager$WakeLock;->release()V

    goto :goto_0
.end method

.method public removeWindowLw(Landroid/view/WindowManagerPolicy$WindowState;)V
    .locals 2
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v1, 0x0

    .line 7367
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne v0, p1, :cond_0

    .line 7368
    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7372
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethod:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne v0, p1, :cond_1

    .line 7373
    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethod:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7376
    :cond_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethodDlg:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne v0, p1, :cond_2

    .line 7377
    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethodDlg:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7380
    :cond_2
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne v0, p1, :cond_3

    .line 7381
    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7384
    :cond_3
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolOverlayWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne v0, p1, :cond_4

    .line 7385
    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolOverlayWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7388
    :cond_4
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalRatioWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne v0, p1, :cond_5

    .line 7389
    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalRatioWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7390
    const/4 v0, 0x0

    invoke-static {v0}, Lcom/android/server/policy/PolicyControl;->setConventionalRatioWinVisible(Z)V

    .line 7393
    :cond_5
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne v0, p1, :cond_6

    .line 7394
    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBixbyWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7398
    :cond_6
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getReduceScreenPolicy()Lcom/android/server/policy/ReduceScreenPolicy;

    move-result-object v0

    invoke-interface {v0, p1}, Lcom/android/server/policy/ReduceScreenPolicy;->removeWindowLw(Landroid/view/WindowManagerPolicy$WindowState;)V

    .line 7365
    return-void
.end method

.method public requestMetaKeyEvent(Landroid/content/ComponentName;Z)V
    .locals 1
    .param p1, "componentName"    # Landroid/content/ComponentName;
    .param p2, "request"    # Z

    .prologue
    .line 7041
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v0, p1, p2}, Lcom/android/server/policy/SystemKeyManager;->requestMetaKeyEvent(Landroid/content/ComponentName;Z)V

    .line 7040
    return-void
.end method

.method public requestSystemKeyEvent(ILandroid/content/ComponentName;Z)Z
    .locals 1
    .param p1, "keyCode"    # I
    .param p2, "componentName"    # Landroid/content/ComponentName;
    .param p3, "request"    # Z

    .prologue
    .line 7037
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v0, p1, p2, p3}, Lcom/android/server/policy/SystemKeyManager;->requestSystemKeyEvent(ILandroid/content/ComponentName;Z)Z

    move-result v0

    return v0
.end method

.method public requestTraversalForCoverView()V
    .locals 2

    .prologue
    .line 5600
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v0, v0, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-nez v0, :cond_0

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastCoverAppCovered:Z

    if-eqz v0, :cond_0

    .line 5601
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    const/16 v1, 0x3c

    invoke-virtual {v0, v1}, Landroid/os/Handler;->sendEmptyMessage(I)Z

    .line 5598
    :cond_0
    return-void
.end method

.method public rotationForOrientationLw(II)I
    .locals 2
    .param p1, "orientation"    # I
    .param p2, "lastRotation"    # I

    .prologue
    .line 7107
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportAndAttachedSViewCover()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 7108
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v0, v0, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-eqz v0, :cond_1

    .line 7111
    :cond_0
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardEnabled:Z

    if-eqz v0, :cond_2

    .line 7112
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    return v0

    .line 7108
    :cond_1
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverCloseRotation:I

    if-ltz v0, :cond_0

    .line 7109
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "prefer rotation is set by cover"

    invoke-static {v0, v1}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 7110
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverCloseRotation:I

    return v0

    .line 7113
    :cond_2
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v0}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v0

    const/4 v1, 0x2

    if-ne v0, v1, :cond_3

    .line 7114
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I

    const/4 v1, 0x1

    if-ne v0, v1, :cond_3

    .line 7115
    invoke-direct {p0, p1, p2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->rotationForSecondLcdOrientationLw(II)I

    move-result v0

    return v0

    .line 7118
    :cond_3
    const/4 v0, -0x1

    return v0
.end method

.method public screenTurnedOff()V
    .locals 3

    .prologue
    const/4 v1, 0x0

    .line 6689
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceUserActivityTimeoutWin:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->clear()V

    .line 6692
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getReduceScreenPolicy()Lcom/android/server/policy/ReduceScreenPolicy;

    move-result-object v2

    invoke-interface {v2}, Lcom/android/server/policy/ReduceScreenPolicy;->screenTurnedOff()V

    .line 6695
    sget-boolean v2, Lcom/samsung/android/config/SamsungCoreConfig;->FEATURE_AOD:Z

    if-eqz v2, :cond_0

    .line 6696
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getAODWindowPolicy()Lcom/android/server/policy/AODWindowPolicy;

    move-result-object v2

    invoke-interface {v2}, Lcom/android/server/policy/AODWindowPolicy;->screenTurnedOff()V

    .line 6700
    :cond_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    if-eqz v2, :cond_1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v1

    .line 6701
    .local v1, "pm":Landroid/content/pm/PackageManager;
    :cond_1
    if-eqz v1, :cond_2

    const-string v2, "com.sec.feature.cover.nfc_authentication"

    invoke-virtual {v1, v2}, Landroid/content/pm/PackageManager;->hasSystemFeature(Ljava/lang/String;)Z

    move-result v2

    if-eqz v2, :cond_2

    .line 6702
    const-class v2, Lcom/android/server/mate/MateServiceLocal;

    invoke-static {v2}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/mate/MateServiceLocal;

    .line 6703
    .local v0, "mateServiceLocal":Lcom/android/server/mate/MateServiceLocal;
    if-eqz v0, :cond_2

    .line 6704
    invoke-virtual {v0}, Lcom/android/server/mate/MateServiceLocal;->screenTurnedOff()V

    .line 6688
    .end local v0    # "mateServiceLocal":Lcom/android/server/mate/MateServiceLocal;
    :cond_2
    return-void
.end method

.method public selectAnimationLw(Landroid/view/WindowManagerPolicy$WindowState;I)I
    .locals 8
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "transit"    # I

    .prologue
    const/4 v7, 0x3

    const/4 v6, 0x2

    const/4 v3, 0x1

    const/4 v5, 0x0

    const/4 v4, -0x1

    .line 7404
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p1, v2, :cond_0

    .line 7405
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarPosition:I

    packed-switch v2, :pswitch_data_0

    .line 7440
    :cond_0
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p1, v2, :cond_e

    .line 7441
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    iget v2, v2, Landroid/view/WindowManager$LayoutParams;->samsungFlags:I

    const/high16 v3, 0x10000000

    and-int/2addr v2, v3

    if-eqz v2, :cond_b

    const/4 v0, 0x1

    .line 7442
    .local v0, "isSViewCover":Z
    :goto_0
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isForceHideBySViewCover()Z

    move-result v2

    if-eqz v2, :cond_d

    .line 7443
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    if-nez v2, :cond_c

    const/4 v1, 0x1

    .line 7444
    .local v1, "needShowSViewCover":Z
    :goto_1
    if-nez v0, :cond_1

    if-eqz v1, :cond_10

    .line 7445
    :cond_1
    return v4

    .line 7407
    .end local v0    # "isSViewCover":Z
    .end local v1    # "needShowSViewCover":Z
    :pswitch_0
    if-eq p2, v6, :cond_2

    .line 7408
    const/4 v2, 0x4

    if-ne p2, v2, :cond_3

    .line 7409
    :cond_2
    const v2, 0x10a002b

    return v2

    .line 7410
    :cond_3
    if-eq p2, v3, :cond_4

    .line 7411
    if-ne p2, v7, :cond_0

    .line 7412
    :cond_4
    const v2, 0x10a002a

    return v2

    .line 7416
    :pswitch_1
    if-eq p2, v6, :cond_5

    .line 7417
    const/4 v2, 0x4

    if-ne p2, v2, :cond_6

    .line 7418
    :cond_5
    const v2, 0x10a002e

    return v2

    .line 7419
    :cond_6
    if-eq p2, v3, :cond_7

    .line 7420
    if-ne p2, v7, :cond_0

    .line 7421
    :cond_7
    const v2, 0x10a002d

    return v2

    .line 7425
    :pswitch_2
    if-eq p2, v6, :cond_8

    .line 7426
    const/4 v2, 0x4

    if-ne p2, v2, :cond_9

    .line 7427
    :cond_8
    const v2, 0x10a0030

    return v2

    .line 7428
    :cond_9
    if-eq p2, v3, :cond_a

    .line 7429
    if-ne p2, v7, :cond_0

    .line 7430
    :cond_a
    const v2, 0x10a002f

    return v2

    .line 7441
    :cond_b
    const/4 v0, 0x0

    .restart local v0    # "isSViewCover":Z
    goto :goto_0

    .line 7443
    :cond_c
    const/4 v1, 0x0

    .restart local v1    # "needShowSViewCover":Z
    goto :goto_1

    .line 7442
    .end local v1    # "needShowSViewCover":Z
    :cond_d
    const/4 v1, 0x0

    .restart local v1    # "needShowSViewCover":Z
    goto :goto_1

    .line 7447
    .end local v0    # "isSViewCover":Z
    .end local v1    # "needShowSViewCover":Z
    :cond_e
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p1, v2, :cond_10

    .line 7448
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    if-eqz v2, :cond_10

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v2, v2, Lcom/samsung/android/cover/CoverState;->type:I

    const/16 v3, 0x8

    if-ne v2, v3, :cond_10

    .line 7449
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v2}, Lcom/samsung/android/cover/CoverState;->getSwitchState()Z

    move-result v2

    if-eqz v2, :cond_f

    .line 7450
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v2}, Lcom/samsung/android/cover/CoverState;->getSwitchState()Z

    move-result v2

    if-eqz v2, :cond_10

    iget-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastClearCoverState:Z

    if-nez v2, :cond_10

    .line 7451
    :cond_f
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v2}, Lcom/samsung/android/cover/CoverState;->getSwitchState()Z

    move-result v2

    iput-boolean v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastClearCoverState:Z

    .line 7452
    return v4

    .line 7457
    :cond_10
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBar:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p1, v2, :cond_11

    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDeviceProvisioned()Z

    move-result v2

    if-eqz v2, :cond_12

    .line 7461
    :cond_11
    return v5

    .line 7458
    :cond_12
    return v4

    .line 7405
    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_1
        :pswitch_2
        :pswitch_0
    .end packed-switch
.end method

.method public selectRotationAnimationLw([I)V
    .locals 2
    .param p1, "anim"    # [I

    .prologue
    .line 7465
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isForceHideBySViewCover()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 7466
    const v0, 0x10a0087

    const/4 v1, 0x0

    aput v0, p1, v1

    .line 7467
    const v0, 0x10a0086

    const/4 v1, 0x1

    aput v0, p1, v1

    .line 7464
    :cond_0
    return-void
.end method

.method public sendBroadcastForAccessibility()V
    .locals 4

    .prologue
    .line 3659
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "sendBroadcastForAccessibility() is called"

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3661
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.samsung.action.HOME_TRIPLE_CLICK"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 3662
    .local v0, "intent":Landroid/content/Intent;
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v2, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    .line 3663
    const-string v3, "com.samsung.permission.HOME_TRIPLE_CLICK"

    .line 3662
    invoke-virtual {v1, v0, v2, v3}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V

    .line 3658
    return-void
.end method

.method public sendBroadcastForSafetyAssurance()V
    .locals 3

    .prologue
    .line 3745
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "sendBroadcastForSafetyAssurance() is called"

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3747
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSafetyAssuranceEnabled()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 3748
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.sec.android.app.safetyassurance.action.SAFETY_MESSAGE_TRIGGER"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 3749
    .local v0, "safetyMessage":Landroid/content/Intent;
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v2, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v1, v0, v2}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 3750
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Safety mesage broadcasted"

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3744
    .end local v0    # "safetyMessage":Landroid/content/Intent;
    :cond_0
    return-void
.end method

.method public sendDoubleClickBR(I)V
    .locals 4
    .param p1, "keyCode"    # I

    .prologue
    .line 8226
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-boolean v1, Lcom/android/server/policy/PhoneWindowManager;->DEBUG_INPUT:Z

    if-eqz v1, :cond_0

    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "send DoubleClickBR keyCode = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8227
    :cond_0
    new-instance v0, Landroid/content/Intent;

    const-string v1, "com.samsung.android.action.DOUBLE_CLICK"

    invoke-direct {v0, v1}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    .line 8228
    .local v0, "i":Landroid/content/Intent;
    const-string v1, "KEYCODE"

    invoke-virtual {v0, v1, p1}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 8229
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v2, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    const-string v3, "com.samsung.android.permisson.DOUBLE_CLICK"

    invoke-virtual {v1, v0, v2, v3}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V

    .line 8225
    return-void
.end method

.method public sendSystemKeyToSideSync(Landroid/view/KeyEvent;)Z
    .locals 4
    .param p1, "event"    # Landroid/view/KeyEvent;

    .prologue
    const/4 v3, 0x0

    .line 5795
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v1}, Lcom/android/server/policy/PhoneWindowManager;->hasNavigationBar()Z

    move-result v1

    if-eqz v1, :cond_0

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v1

    const/16 v2, 0x1a

    if-ne v1, v2, :cond_2

    .line 5796
    :cond_0
    invoke-virtual {p1}, Landroid/view/KeyEvent;->semGetDisplayId()I

    move-result v1

    if-nez v1, :cond_2

    .line 5798
    sget-boolean v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v1, :cond_1

    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "System key send to sidesync.source keycode = "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v3

    invoke-static {v3}, Landroid/view/KeyEvent;->keyCodeToString(I)Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 5799
    :cond_1
    new-instance v0, Landroid/content/Intent;

    invoke-direct {v0}, Landroid/content/Intent;-><init>()V

    .line 5800
    .local v0, "intent":Landroid/content/Intent;
    const-string v1, "com.sec.android.sidesync30"

    const-string v2, "com.sec.android.sidesync.source.WimpService"

    invoke-virtual {v0, v1, v2}, Landroid/content/Intent;->setClassName(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;

    .line 5801
    const-string v1, "com.sec.android.intent.action.SYSTEM_KEY"

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 5802
    const-string v1, "KEYCODE"

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getKeyCode()I

    move-result v2

    invoke-virtual {v0, v1, v2}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 5803
    const-string v1, "ACTION"

    invoke-virtual {p1}, Landroid/view/KeyEvent;->getAction()I

    move-result v2

    invoke-virtual {v0, v1, v2}, Landroid/content/Intent;->putExtra(Ljava/lang/String;I)Landroid/content/Intent;

    .line 5804
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v2, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v1, v0, v2}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;

    .line 5805
    const/4 v1, 0x1

    return v1

    .line 5808
    .end local v0    # "intent":Landroid/content/Intent;
    :cond_2
    return v3
.end method

.method public setBendedPendingIntent(Landroid/app/PendingIntent;Landroid/content/Intent;)V
    .locals 1
    .param p1, "p"    # Landroid/app/PendingIntent;
    .param p2, "fillInIntent"    # Landroid/content/Intent;

    .prologue
    .line 8851
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    if-eqz v0, :cond_0

    .line 8852
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    invoke-virtual {v0, p1, p2}, Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;->setBendedPendingIntent(Landroid/app/PendingIntent;Landroid/content/Intent;)V

    .line 8850
    :cond_0
    return-void
.end method

.method public setCoverSwitchState(Lcom/samsung/android/cover/CoverState;)Z
    .locals 5
    .param p1, "coverState"    # Lcom/samsung/android/cover/CoverState;

    .prologue
    const/4 v4, 0x0

    const/4 v3, 0x1

    .line 5391
    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportFlipCover:Z

    if-nez v0, :cond_0

    iget-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSupportSViewCover:Z

    if-eqz v0, :cond_5

    .line 5395
    :cond_0
    if-eqz p1, :cond_3

    iget-boolean v0, p1, Lcom/samsung/android/cover/CoverState;->switchState:Z

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v1, v1, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-ne v0, v1, :cond_1

    .line 5396
    iget v0, p1, Lcom/samsung/android/cover/CoverState;->heightPixel:I

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v1, v1, Lcom/samsung/android/cover/CoverState;->heightPixel:I

    if-eq v0, v1, :cond_6

    .line 5398
    :cond_1
    :goto_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    invoke-virtual {v0, p1}, Lcom/samsung/android/cover/CoverState;->copyFrom(Lcom/samsung/android/cover/CoverState;)V

    .line 5399
    const-string v0, "SamsungPhoneWindowManager"

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "setCoverSwitchState : "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v2, v2, Lcom/samsung/android/cover/CoverState;->switchState:Z

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, " "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v2, v2, Lcom/samsung/android/cover/CoverState;->widthPixel:I

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, "x"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v2, v2, Lcom/samsung/android/cover/CoverState;->heightPixel:I

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 5401
    iget-boolean v0, p1, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-eqz v0, :cond_2

    .line 5402
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isStatusBarSViewCover()Z

    move-result v0

    .line 5401
    if-eqz v0, :cond_2

    .line 5402
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isStatusBarKeyguard()Z

    move-result v0

    if-eqz v0, :cond_7

    .line 5408
    :cond_2
    :goto_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v0, v0, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-nez v0, :cond_3

    .line 5409
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getEdgeWindowPolicy()Lcom/android/server/policy/EdgeWindowPolicy;

    move-result-object v0

    invoke-interface {v0}, Lcom/android/server/policy/EdgeWindowPolicy;->isEdgeWakeupPending()Z

    move-result v0

    if-eqz v0, :cond_3

    .line 5410
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getEdgeWindowPolicy()Lcom/android/server/policy/EdgeWindowPolicy;

    move-result-object v0

    invoke-interface {v0, v4, v3}, Lcom/android/server/policy/EdgeWindowPolicy;->requestEdgeScreenWakeup(ZI)V

    .line 5416
    :cond_3
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isSupportAndAttachedSViewCover()Z

    move-result v0

    if-eqz v0, :cond_4

    .line 5417
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget-boolean v0, v0, Lcom/samsung/android/cover/CoverState;->switchState:Z

    if-eqz v0, :cond_4

    .line 5418
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_4

    .line 5419
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v0

    invoke-interface {v0, v3}, Lcom/samsung/android/view/IWindowStateBridge;->disableHideSViewCoverOnce(Z)V

    .line 5423
    :cond_4
    return v3

    .line 5392
    :cond_5
    return v4

    .line 5397
    :cond_6
    iget v0, p1, Lcom/samsung/android/cover/CoverState;->widthPixel:I

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverState:Lcom/samsung/android/cover/CoverState;

    iget v1, v1, Lcom/samsung/android/cover/CoverState;->widthPixel:I

    if-eq v0, v1, :cond_3

    goto/16 :goto_0

    .line 5405
    :cond_7
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mStatusBar:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v0

    const/4 v1, -0x1

    iput v1, v0, Landroid/view/WindowManager$LayoutParams;->screenOrientation:I

    goto :goto_1
.end method

.method public setDesktopTaskBar(Z)V
    .locals 0
    .param p1, "enable"    # Z

    .prologue
    .line 8613
    if-eqz p1, :cond_0

    .line 8614
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updateTaskBarHeightInDesktopMode()V

    .line 8626
    :cond_0
    invoke-static {p1}, Lcom/android/server/policy/PolicyControl;->setDesktopTaskBar(Z)V

    .line 8612
    return-void
.end method

.method public setFingerPrintPending()V
    .locals 1

    .prologue
    .line 5156
    const/4 v0, 0x0

    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFingerPrintPending:Z

    .line 5155
    return-void
.end method

.method public setForceStatusBarFromSViewCover(Z)V
    .locals 0
    .param p1, "forceStatusBarFromSViewCover"    # Z

    .prologue
    .line 7079
    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceStatusBarFromSViewCover:Z

    .line 7078
    return-void
.end method

.method public setHideSViewCover(I)V
    .locals 0
    .param p1, "hideSViewCover"    # I

    .prologue
    .line 7103
    iput p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCover:I

    .line 7102
    return-void
.end method

.method public setHideSViewCoverWindowState(Landroid/view/WindowManagerPolicy$WindowState;)V
    .locals 0
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    .line 7095
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHideSViewCoverWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    .line 7094
    return-void
.end method

.method public setInitialDisplaySize(IIIIII)V
    .locals 8
    .param p1, "initWidth"    # I
    .param p2, "initHeight"    # I
    .param p3, "initDensity"    # I
    .param p4, "width"    # I
    .param p5, "height"    # I
    .param p6, "density"    # I

    .prologue
    .line 1179
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v2

    .line 1181
    .local v2, "res":Landroid/content/res/Resources;
    sget-boolean v3, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v3, :cond_0

    .line 1182
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "setInitialDisplaySize() initWidth="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string v5, ", initHeight="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string v5, ", width="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p4}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string v5, ", height="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string v5, ", density="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p6}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 1184
    :cond_0
    invoke-virtual {v2}, Landroid/content/res/Resources;->getConfiguration()Landroid/content/res/Configuration;

    move-result-object v3

    iget v3, v3, Landroid/content/res/Configuration;->densityDpi:I

    if-eqz v3, :cond_8

    .line 1185
    invoke-virtual {v2}, Landroid/content/res/Resources;->getConfiguration()Landroid/content/res/Configuration;

    move-result-object v3

    iget v3, v3, Landroid/content/res/Configuration;->densityDpi:I

    .line 1184
    :goto_0
    int-to-float v0, v3

    .line 1186
    .local v0, "baseDensity":F
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    .line 1187
    const v4, 0x1050019

    invoke-virtual {v2, v4}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v4

    mul-int/2addr v4, p6

    int-to-float v4, v4

    div-float/2addr v4, v0

    const/high16 v5, 0x3f000000    # 0.5f

    add-float/2addr v4, v5

    float-to-int v4, v4

    .line 1186
    iput v4, v3, Lcom/android/server/policy/PhoneWindowManager;->mStatusBarHeight:I

    .line 1190
    const v3, 0x10500c6

    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v3

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    .line 1191
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "setInitialDisplaySize - mMobileKeyboardHeight : "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 1192
    if-eqz p2, :cond_1

    if-eq p2, p5, :cond_1

    .line 1193
    iget v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    int-to-float v3, v3

    int-to-float v4, p5

    int-to-float v5, p2

    div-float/2addr v4, v5

    mul-float/2addr v3, v4

    float-to-int v3, v3

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    .line 1194
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "setInitialDisplaySize - mMobileKeyboardHeight Changed: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mMobileKeyboardHeight:I

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 1198
    :cond_1
    const/4 v1, 0x0

    .line 1199
    .local v1, "naviHeight":I
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMobileKeyboardEnabled()Z

    move-result v3

    if-eqz v3, :cond_9

    .line 1200
    const v3, 0x10500c7

    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v1

    .line 1201
    if-eqz p2, :cond_2

    if-eq p2, p5, :cond_2

    .line 1202
    int-to-float v3, v1

    int-to-float v4, p5

    int-to-float v5, p2

    div-float/2addr v4, v5

    mul-float/2addr v3, v4

    float-to-int v1, v3

    .line 1203
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "setInitialDisplaySize - naviHeight Changed by mobile keyboard: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 1205
    :cond_2
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 1208
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput v1, v5, v6

    .line 1207
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    aput v1, v5, v6

    .line 1206
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput v1, v5, v6

    .line 1205
    aput v1, v3, v4

    .line 1210
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 1213
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput v1, v5, v6

    .line 1212
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    aput v1, v5, v6

    .line 1211
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput v1, v5, v6

    .line 1210
    aput v1, v3, v4

    .line 1230
    :goto_1
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationInCarMode:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 1232
    const v5, 0x105001d

    invoke-virtual {v2, v5}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v5

    mul-int/2addr v5, p6

    int-to-float v5, v5

    div-float/2addr v5, v0

    const/high16 v6, 0x3f000000    # 0.5f

    add-float/2addr v5, v6

    float-to-int v5, v5

    .line 1231
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationInCarMode:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput v5, v6, v7

    .line 1230
    aput v5, v3, v4

    .line 1233
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationInCarMode:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    .line 1235
    const v5, 0x105001e

    invoke-virtual {v2, v5}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v5

    mul-int/2addr v5, p6

    int-to-float v5, v5

    div-float/2addr v5, v0

    const/high16 v6, 0x3f000000    # 0.5f

    add-float/2addr v5, v6

    float-to-int v5, v5

    .line 1234
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationInCarMode:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput v5, v6, v7

    .line 1233
    aput v5, v3, v4

    .line 1238
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationInCarMode:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 1242
    const v5, 0x105001f

    invoke-virtual {v2, v5}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v5

    mul-int/2addr v5, p6

    int-to-float v5, v5

    div-float/2addr v5, v0

    const/high16 v6, 0x3f000000    # 0.5f

    add-float/2addr v5, v6

    float-to-int v5, v5

    .line 1241
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationInCarMode:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput v5, v6, v7

    .line 1240
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationInCarMode:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    aput v5, v6, v7

    .line 1239
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationInCarMode:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput v5, v6, v7

    .line 1238
    aput v5, v3, v4

    .line 1245
    sget-boolean v3, Lcom/android/server/policy/TspStateManagerPolicy;->FEATURE_ENABLED:Z

    if-eqz v3, :cond_3

    .line 1246
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getTspStateManagerPolicy()Lcom/android/server/policy/TspStateManagerPolicy;

    move-result-object v3

    invoke-interface {v3, p1, p2, p4, p5}, Lcom/android/server/policy/TspStateManagerPolicy;->setInitialDisplaySize(IIII)V

    .line 1249
    :cond_3
    sget-boolean v3, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_IMMERSIVE_FORCE_TOUCH:Z

    if-eqz v3, :cond_4

    .line 1250
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarForceTouchManager:Lcom/android/server/policy/NaviBarForceTouchManager;

    invoke-virtual {v3, p1, p2, p4, p5}, Lcom/android/server/policy/NaviBarForceTouchManager;->setInitialDisplaySize(IIII)V

    .line 1255
    :cond_4
    sget v3, Lcom/samsung/android/framework/res/R$dimen;->task_bar_height:I

    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v3

    mul-int/2addr v3, p6

    int-to-float v3, v3

    div-float/2addr v3, v0

    const/high16 v4, 0x3f000000    # 0.5f

    add-float/2addr v3, v4

    float-to-int v3, v3

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTaskBarHeightInDesktopMode:I

    .line 1259
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeForPreparing()Z

    move-result v3

    if-nez v3, :cond_5

    .line 1260
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    if-eq p1, p2, :cond_a

    invoke-static {p1, p2}, Ljava/lang/Math;->min(II)I

    move-result v3

    mul-int/lit16 v3, v3, 0xa0

    div-int/2addr v3, p3

    const/16 v5, 0x258

    if-ge v3, v5, :cond_a

    const/4 v3, 0x1

    :goto_2
    iput-boolean v3, v4, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarCanMove:Z

    .line 1264
    :cond_5
    const v3, 0x3fee147b    # 1.86f

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDefaultMaxAspect:F

    .line 1265
    iget v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDefaultMaxAspect:F

    const v4, 0x461c4000    # 10000.0f

    mul-float/2addr v3, v4

    invoke-static {v3}, Ljava/lang/Math;->round(F)I

    move-result v3

    int-to-float v3, v3

    const v4, 0x461c4000    # 10000.0f

    div-float/2addr v3, v4

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDefaultMaxAspect:F

    .line 1266
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "setInitialDisplaySize() mDefaultMaxAspect="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDefaultMaxAspect:F

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(F)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 1268
    invoke-static {p4, p5}, Ljava/lang/Math;->max(II)I

    move-result v3

    int-to-float v3, v3

    invoke-static {p4, p5}, Ljava/lang/Math;->min(II)I

    move-result v4

    int-to-float v4, v4

    div-float/2addr v3, v4

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentAspect:F

    .line 1269
    iget v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentAspect:F

    const v4, 0x461c4000    # 10000.0f

    mul-float/2addr v3, v4

    invoke-static {v3}, Ljava/lang/Math;->round(F)I

    move-result v3

    int-to-float v3, v3

    const v4, 0x461c4000    # 10000.0f

    div-float/2addr v3, v4

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentAspect:F

    .line 1270
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "setInitialDisplaySize() mCurrentAspect="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCurrentAspect:F

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(F)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 1272
    const v3, 0x10500c8

    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v3

    mul-int/2addr v3, p6

    int-to-float v3, v3

    div-float/2addr v3, v0

    const/high16 v4, 0x3f000000    # 0.5f

    add-float/2addr v3, v4

    float-to-int v3, v3

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMargin:I

    .line 1273
    const v3, 0x10500c9

    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v3

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMarginForGameApp:I

    .line 1274
    if-eqz p2, :cond_6

    if-eq p2, p5, :cond_6

    .line 1275
    iget v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMarginForGameApp:I

    int-to-float v3, v3

    int-to-float v4, p5

    int-to-float v5, p2

    div-float/2addr v4, v5

    mul-float/2addr v3, v4

    float-to-int v3, v3

    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMarginForGameApp:I

    .line 1276
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "setInitialDisplaySize - mConventionalModeMarginForGameApp Changed: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    iget v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalModeMarginForGameApp:I

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 1280
    :cond_6
    sget-boolean v3, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_NAVIGATION_BAR:Z

    if-eqz v3, :cond_7

    .line 1281
    iput v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarHeight:I

    .line 1282
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    if-eqz v3, :cond_b

    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    invoke-virtual {v3}, Landroid/view/Display;->getRotation()I

    move-result v3

    :goto_3
    invoke-direct {p0, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updateBackRect(I)V

    .line 1178
    :cond_7
    return-void

    .line 1185
    .end local v0    # "baseDensity":F
    .end local v1    # "naviHeight":I
    :cond_8
    const/16 v3, 0xa0

    goto/16 :goto_0

    .line 1215
    .restart local v0    # "baseDensity":F
    .restart local v1    # "naviHeight":I
    :cond_9
    const v3, 0x105001a

    invoke-virtual {v2, v3}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v3

    mul-int/2addr v3, p6

    int-to-float v3, v3

    div-float/2addr v3, v0

    const/high16 v4, 0x3f000000    # 0.5f

    add-float/2addr v3, v4

    float-to-int v1, v3

    .line 1216
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 1217
    iget-object v5, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v5, v5, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput v1, v5, v6

    .line 1216
    aput v1, v3, v4

    .line 1218
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    .line 1220
    const v5, 0x105001b

    invoke-virtual {v2, v5}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v5

    mul-int/2addr v5, p6

    int-to-float v5, v5

    div-float/2addr v5, v0

    const/high16 v6, 0x3f000000    # 0.5f

    add-float/2addr v5, v6

    float-to-int v5, v5

    .line 1219
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarHeightForRotationDefault:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput v5, v6, v7

    .line 1218
    aput v5, v3, v4

    .line 1223
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v3, v3, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v4, v4, Lcom/android/server/policy/PhoneWindowManager;->mPortraitRotation:I

    .line 1227
    const v5, 0x105001c

    invoke-virtual {v2, v5}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v5

    mul-int/2addr v5, p6

    int-to-float v5, v5

    div-float/2addr v5, v0

    const/high16 v6, 0x3f000000    # 0.5f

    add-float/2addr v5, v6

    float-to-int v5, v5

    .line 1226
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mSeascapeRotation:I

    aput v5, v6, v7

    .line 1225
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mLandscapeRotation:I

    aput v5, v6, v7

    .line 1224
    iget-object v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v6, v6, Lcom/android/server/policy/PhoneWindowManager;->mNavigationBarWidthForRotationDefault:[I

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v7, v7, Lcom/android/server/policy/PhoneWindowManager;->mUpsideDownRotation:I

    aput v5, v6, v7

    .line 1223
    aput v5, v3, v4

    goto/16 :goto_1

    .line 1260
    :cond_a
    const/4 v3, 0x0

    goto/16 :goto_2

    .line 1282
    :cond_b
    const/4 v3, 0x0

    goto/16 :goto_3
.end method

.method public setProKioskReEnableVolumeUpKey(Z)V
    .locals 0
    .param p1, "proKioskReEnableVolumeUpKey"    # Z

    .prologue
    .line 8737
    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mProKioskReEnableVolumeUpKey:Z

    .line 8736
    return-void
.end method

.method public setRotationLw(I)V
    .locals 6
    .param p1, "rotation"    # I

    .prologue
    .line 4913
    const-string v1, "SamsungPhoneWindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "setRotationLw() : rotation="

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4915
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    monitor-enter v2

    .line 4916
    :try_start_0
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationBooster:Lcom/samsung/android/os/SemDvfsManager;

    if-nez v1, :cond_0

    .line 4917
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v3, "PWM_ROTATION"

    const/16 v4, 0x15

    const/4 v5, 0x1

    invoke-static {v1, v3, v4, v5}, Lcom/samsung/android/os/SemDvfsManager;->createInstance(Landroid/content/Context;Ljava/lang/String;II)Lcom/samsung/android/os/SemDvfsManager;

    move-result-object v1

    sput-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationBooster:Lcom/samsung/android/os/SemDvfsManager;

    .line 4920
    :cond_0
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationBooster:Lcom/samsung/android/os/SemDvfsManager;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v1, :cond_1

    .line 4922
    :try_start_1
    const-string v1, "SamsungPhoneWindowManager"

    const-string v3, "semDvfsWakeupBooster.acquire()"

    invoke-static {v1, v3}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4923
    sget-object v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mRotationBooster:Lcom/samsung/android/os/SemDvfsManager;

    invoke-virtual {v1}, Lcom/samsung/android/os/SemDvfsManager;->acquire()V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_1
    :goto_0
    monitor-exit v2

    .line 4930
    sget-boolean v1, Lcom/android/server/policy/TspStateManagerPolicy;->FEATURE_ENABLED:Z

    if-eqz v1, :cond_2

    .line 4931
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getTspStateManagerPolicy()Lcom/android/server/policy/TspStateManagerPolicy;

    move-result-object v1

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v2, p1}, Lcom/android/server/policy/PhoneWindowManager;->isAnyPortrait(I)Z

    move-result v2

    invoke-interface {v1, v2}, Lcom/android/server/policy/TspStateManagerPolicy;->setPortrait(Z)V

    .line 4933
    :cond_2
    sget-boolean v1, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_NAVIGATION_BAR:Z

    if-eqz v1, :cond_3

    .line 4934
    invoke-direct {p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updateBackRect(I)V

    .line 4912
    :cond_3
    return-void

    .line 4924
    :catch_0
    move-exception v0

    .line 4925
    .local v0, "e":Ljava/lang/Exception;
    :try_start_2
    const-string v1, "SamsungPhoneWindowManager"

    const-string v3, "HINT_DEVICE_WAKEUP.acquire is failed"

    invoke-static {v1, v3}, Landroid/util/Log;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 4926
    invoke-virtual {v0}, Ljava/lang/Exception;->printStackTrace()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto :goto_0

    .line 4915
    .end local v0    # "e":Ljava/lang/Exception;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public setSafeModeReason(IIIII)V
    .locals 1
    .param p1, "menuState"    # I
    .param p2, "sState"    # I
    .param p3, "dpadState"    # I
    .param p4, "trackballState"    # I
    .param p5, "volumeDownState"    # I

    .prologue
    .line 5282
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mSafeMode:Z

    if-eqz v0, :cond_5

    .line 5283
    if-lez p1, :cond_0

    const-string v0, "KEYCODE_MENU"

    :goto_0
    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSafeModeReason:Ljava/lang/String;

    .line 5281
    :goto_1
    return-void

    .line 5283
    :cond_0
    if-lez p2, :cond_1

    const-string v0, "KEYCODE_S"

    goto :goto_0

    :cond_1
    if-lez p3, :cond_2

    .line 5284
    const-string v0, "KEYCODE_DPAD_CENTER"

    goto :goto_0

    :cond_2
    if-lez p4, :cond_3

    const-string v0, "TRACKBALL_BTN_MOUSE"

    goto :goto_0

    :cond_3
    if-lez p5, :cond_4

    const-string v0, "KEYCODE_VOLUME_DOWN"

    goto :goto_0

    :cond_4
    const-string v0, "null"

    goto :goto_0

    .line 5286
    :cond_5
    const-string v0, "null"

    iput-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSafeModeReason:Ljava/lang/String;

    goto :goto_1
.end method

.method public setShowingSViewCover(Z)V
    .locals 0
    .param p1, "showingSViewCover"    # Z

    .prologue
    .line 7087
    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowingSViewCover:Z

    .line 7086
    return-void
.end method

.method public setUserRotationMode(II)Z
    .locals 5
    .param p1, "mode"    # I
    .param p2, "rot"    # I

    .prologue
    const/4 v4, 0x0

    const/4 v3, -0x2

    const/4 v2, 0x1

    .line 7180
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v0}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v0

    const/4 v1, 0x2

    if-ne v0, v1, :cond_1

    .line 7181
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mLidState:I

    if-ne v0, v2, :cond_1

    .line 7182
    if-ne p1, v2, :cond_0

    .line 7183
    const-string v0, "SamsungPhoneWindowManager"

    const-string v1, "SPWM setUserRotationMode"

    invoke-static {v0, v1}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 7184
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    .line 7185
    const-string v1, "user_rotation"

    .line 7184
    invoke-static {v0, v1, p2, v3}, Landroid/provider/Settings$System;->putIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)Z

    .line 7188
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    .line 7189
    const-string v1, "accelerometer_rotation_second"

    .line 7188
    invoke-static {v0, v1, v4, v3}, Landroid/provider/Settings$System;->putIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)Z

    .line 7198
    :goto_0
    return v2

    .line 7193
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    .line 7194
    const-string v1, "accelerometer_rotation_second"

    .line 7193
    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->putIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)Z

    goto :goto_0

    .line 7202
    :cond_1
    return v4
.end method

.method public subWindowTypeToLayerLw(I)I
    .locals 1
    .param p1, "type"    # I

    .prologue
    .line 8064
    packed-switch p1, :pswitch_data_0

    .line 8068
    const/4 v0, 0x0

    return v0

    .line 8066
    :pswitch_0
    const/4 v0, 0x1

    return v0

    .line 8064
    nop

    :pswitch_data_0
    .packed-switch 0x44c
        :pswitch_0
    .end packed-switch
.end method

.method public systemBooted()V
    .locals 4

    .prologue
    .line 1336
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeys:Ljava/util/Map;

    if-nez v2, :cond_0

    .line 1339
    :try_start_0
    const-string v2, "kioskmode"

    .line 1338
    invoke-static {v2}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v2

    invoke-static {v2}, Lcom/samsung/android/knox/kiosk/IKioskMode$Stub;->asInterface(Landroid/os/IBinder;)Lcom/samsung/android/knox/kiosk/IKioskMode;

    move-result-object v1

    .line 1340
    .local v1, "kioskService":Lcom/samsung/android/knox/kiosk/IKioskMode;
    if-eqz v1, :cond_0

    .line 1341
    invoke-interface {v1}, Lcom/samsung/android/knox/kiosk/IKioskMode;->getBlockedHwKeysCache()Ljava/util/Map;

    move-result-object v2

    iput-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockedHwKeys:Ljava/util/Map;

    .line 1342
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Blocked hw keys cache is being refreshed."

    invoke-static {v2, v3}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 1351
    .end local v1    # "kioskService":Lcom/samsung/android/knox/kiosk/IKioskMode;
    :cond_0
    :goto_0
    invoke-static {}, Lcom/android/internal/os/BackgroundThread;->getHandler()Landroid/os/Handler;

    move-result-object v2

    new-instance v3, Lcom/android/server/policy/SamsungPhoneWindowManager$25;

    invoke-direct {v3, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$25;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual {v2, v3}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 1334
    return-void

    .line 1344
    :catch_0
    move-exception v0

    .line 1345
    .local v0, "e":Landroid/os/RemoteException;
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Exception while getting kiosk mode service"

    invoke-static {v2, v3}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method public systemReady(Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;)V
    .locals 3
    .param p1, "keyguardDelegate"    # Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    .prologue
    .line 1291
    iput-object p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mKeyguardDelegate:Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;

    .line 1292
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v1}, Landroid/view/ViewConfiguration;->get(Landroid/content/Context;)Landroid/view/ViewConfiguration;

    move-result-object v1

    const/4 v2, 0x1

    invoke-virtual {v1, v2}, Landroid/view/ViewConfiguration;->hasFakeMenuKey(I)Z

    move-result v1

    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyRecent:Z

    .line 1293
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v1}, Landroid/view/ViewConfiguration;->get(Landroid/content/Context;)Landroid/view/ViewConfiguration;

    move-result-object v1

    const/4 v2, 0x2

    invoke-virtual {v1, v2}, Landroid/view/ViewConfiguration;->hasFakeMenuKey(I)Z

    move-result v1

    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFakeMenuKeyBack:Z

    .line 1295
    const-class v1, Landroid/os/PowerManagerInternal;

    invoke-static {v1}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Landroid/os/PowerManagerInternal;

    iput-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    .line 1296
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    if-eqz v1, :cond_0

    .line 1297
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    .line 1298
    new-instance v2, Lcom/android/server/policy/SamsungPhoneWindowManager$23;

    invoke-direct {v2, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$23;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    .line 1297
    invoke-virtual {v1, v2}, Landroid/os/PowerManagerInternal;->registerLowPowerModeObserver(Landroid/os/PowerManagerInternal$LowPowerModeListener;)V

    .line 1309
    :cond_0
    const-class v1, Lcom/android/server/vr/GearVrManagerInternal;

    invoke-static {v1}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/vr/GearVrManagerInternal;

    .line 1310
    .local v0, "vrService":Lcom/android/server/vr/GearVrManagerInternal;
    if-eqz v0, :cond_1

    .line 1311
    new-instance v1, Lcom/android/server/policy/SamsungPhoneWindowManager$24;

    invoke-direct {v1, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$24;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual {v0, v1}, Lcom/android/server/vr/GearVrManagerInternal;->registerVrStateListener(Lcom/samsung/android/vr/IGearVrStateCallbacks;)V

    .line 1290
    :goto_0
    return-void

    .line 1328
    :cond_1
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "HMT SamsungPhoneWindowManager failed"

    invoke-static {v1, v2}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method public takeScreenshot(I)V
    .locals 20
    .param p1, "event"    # I

    .prologue
    .line 4096
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isScreenCaptureEnabled()Z

    move-result v15

    if-nez v15, :cond_1

    .line 4097
    sget-boolean v15, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v15, :cond_0

    const-string v15, "SamsungPhoneWindowManager"

    const-string v16, "can not takescreenshot"

    invoke-static/range {v15 .. v16}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4098
    :cond_0
    return-void

    .line 4101
    :cond_1
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mScreenshotLock:Ljava/lang/Object;

    move-object/from16 v16, v0

    monitor-enter v16

    .line 4102
    :try_start_0
    sget-boolean v15, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v15, :cond_2

    .line 4103
    const-string v15, "SamsungPhoneWindowManager"

    new-instance v17, Ljava/lang/StringBuilder;

    invoke-direct/range {v17 .. v17}, Ljava/lang/StringBuilder;-><init>()V

    const-string v18, "takeScreenshot : event = "

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    move-object/from16 v0, v17

    move/from16 v1, p1

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v17

    .line 4104
    const-string v18, ", mPerformEditAfterScreenCapture = "

    .line 4103
    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    .line 4104
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPerformEditAfterScreenCapture:Z

    move/from16 v18, v0

    .line 4103
    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v17

    .line 4105
    const-string v18, ", mServiceConnectionMap.size() = "

    .line 4103
    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    .line 4105
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mServiceConnectionMap:Ljava/util/Map;

    move-object/from16 v18, v0

    invoke-interface/range {v18 .. v18}, Ljava/util/Map;->size()I

    move-result v18

    .line 4103
    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual/range {v17 .. v17}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4108
    :cond_2
    sget-object v4, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    .line 4110
    .local v4, "curr":Landroid/os/UserHandle;
    invoke-static {}, Lcom/samsung/android/knox/SemPersonaManager;->getKnoxInfo()Landroid/os/Bundle;

    move-result-object v14

    .line 4111
    .local v14, "versionInfo":Landroid/os/Bundle;
    const-string v15, "2.0"

    const-string v17, "version"

    move-object/from16 v0, v17

    invoke-virtual {v14, v0}, Landroid/os/Bundle;->getString(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-virtual {v15, v0}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v15

    if-eqz v15, :cond_6

    .line 4112
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v15

    invoke-virtual {v15}, Lcom/samsung/android/knox/SemPersonaManager;->getFocusedUser()I

    move-result v6

    .line 4113
    .local v6, "currUser":I
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v15

    invoke-virtual {v15}, Lcom/samsung/android/knox/SemPersonaManager;->getPersonaIds()[I

    move-result-object v9

    .line 4114
    .local v9, "ids":[I
    if-eqz v9, :cond_4

    .line 4115
    const-string v15, "restriction_policy"

    invoke-static {v15}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v15

    invoke-static {v15}, Lcom/samsung/android/knox/restriction/IRestrictionPolicy$Stub;->asInterface(Landroid/os/IBinder;)Lcom/samsung/android/knox/restriction/IRestrictionPolicy;

    move-result-object v11

    .line 4116
    .local v11, "mRestrictionPolicyService":Lcom/samsung/android/knox/restriction/IRestrictionPolicy;
    const/4 v8, 0x0

    .local v8, "i":I
    :goto_0
    array-length v15, v9

    if-ge v8, v15, :cond_4

    .line 4117
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v15

    aget v17, v9, v8

    move/from16 v0, v17

    invoke-virtual {v15, v0}, Lcom/samsung/android/knox/SemPersonaManager;->isKnoxKeyguardShown(I)Z

    move-result v15

    if-eqz v15, :cond_3

    .line 4118
    aget v6, v9, v8
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 4120
    const/4 v15, 0x1

    :try_start_1
    invoke-interface {v11, v6, v15}, Lcom/samsung/android/knox/restriction/IRestrictionPolicy;->isScreenCaptureEnabledEx(IZ)Z

    move-result v15

    if-nez v15, :cond_4

    .line 4121
    const-string v15, "SamsungPhoneWindowManager"

    const-string v17, "KnoxKeyguardExist. can not takescreenshot."

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v16

    .line 4122
    return-void

    .line 4116
    :cond_3
    add-int/lit8 v8, v8, 0x1

    goto :goto_0

    .line 4124
    :catch_0
    move-exception v7

    .line 4130
    .end local v8    # "i":I
    .end local v11    # "mRestrictionPolicyService":Lcom/samsung/android/knox/restriction/IRestrictionPolicy;
    :cond_4
    :try_start_2
    const-string v15, "SamsungPhoneWindowManager"

    new-instance v17, Ljava/lang/StringBuilder;

    invoke-direct/range {v17 .. v17}, Ljava/lang/StringBuilder;-><init>()V

    const-string v18, "screenshot: current active user is "

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-virtual {v0, v6}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual/range {v17 .. v17}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4132
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    const-string v17, "user"

    move-object/from16 v0, v17

    invoke-virtual {v15, v0}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v13

    check-cast v13, Landroid/os/UserManager;

    .line 4133
    .local v13, "um":Landroid/os/UserManager;
    invoke-virtual {v13, v6}, Landroid/os/UserManager;->getUserInfo(I)Landroid/content/pm/UserInfo;

    move-result-object v5

    .line 4134
    .local v5, "currInfo":Landroid/content/pm/UserInfo;
    if-eqz v5, :cond_5

    invoke-virtual {v5}, Landroid/content/pm/UserInfo;->isKnoxWorkspace()Z

    move-result v15

    if-eqz v15, :cond_5

    .line 4135
    new-instance v4, Landroid/os/UserHandle;

    .end local v4    # "curr":Landroid/os/UserHandle;
    invoke-direct {v4, v6}, Landroid/os/UserHandle;-><init>(I)V

    .line 4138
    .restart local v4    # "curr":Landroid/os/UserHandle;
    :cond_5
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-static {v15}, Lcom/samsung/android/knox/SemPersonaManager;->isKioskModeEnabled(Landroid/content/Context;)Z

    move-result v15

    if-eqz v15, :cond_6

    .line 4139
    new-instance v4, Landroid/os/UserHandle;

    .end local v4    # "curr":Landroid/os/UserHandle;
    invoke-direct/range {p0 .. p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->getPersonaManager()Lcom/samsung/android/knox/SemPersonaManager;

    move-result-object v15

    invoke-virtual {v15}, Lcom/samsung/android/knox/SemPersonaManager;->getKioskId()I

    move-result v15

    invoke-direct {v4, v15}, Landroid/os/UserHandle;-><init>(I)V

    .line 4142
    .end local v5    # "currInfo":Landroid/content/pm/UserInfo;
    .end local v6    # "currUser":I
    .end local v9    # "ids":[I
    .end local v13    # "um":Landroid/os/UserManager;
    .restart local v4    # "curr":Landroid/os/UserHandle;
    :cond_6
    move-object/from16 v0, p0

    iget-boolean v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPerformEditAfterScreenCapture:Z

    if-eqz v15, :cond_8

    move-object/from16 v0, p0

    iget-boolean v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasFlashAnnotateComponent:Z

    if-eqz v15, :cond_8

    .line 4143
    new-instance v10, Landroid/content/Intent;

    invoke-direct {v10}, Landroid/content/Intent;-><init>()V

    .line 4144
    .local v10, "intent":Landroid/content/Intent;
    const/high16 v15, 0x10000000

    invoke-virtual {v10, v15}, Landroid/content/Intent;->setFlags(I)Landroid/content/Intent;

    .line 4145
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFlashAnnotateServiceComponent:Landroid/content/ComponentName;

    invoke-virtual {v10, v15}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 4146
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v15, v10, v4}, Landroid/content/Context;->startServiceAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/ComponentName;
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    :cond_7
    :goto_1
    monitor-exit v16

    .line 4095
    return-void

    .line 4148
    .end local v10    # "intent":Landroid/content/Intent;
    :cond_8
    :try_start_3
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mServiceConnectionMap:Ljava/util/Map;

    invoke-interface {v15}, Ljava/util/Map;->size()I

    move-result v15

    const/16 v17, 0x3

    move/from16 v0, v17

    if-lt v15, v0, :cond_9

    .line 4149
    const-string v15, "SamsungPhoneWindowManager"

    const-string v17, "ConnectedScreenshotService is over 3, so do not take screenshot."

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    monitor-exit v16

    .line 4150
    return-void

    .line 4152
    :cond_9
    :try_start_4
    new-instance v2, Landroid/content/ComponentName;

    const-string v15, "com.android.systemui"

    .line 4153
    const-string v17, "com.android.systemui.screenshot.TakeScreenshotService"

    .line 4152
    move-object/from16 v0, v17

    invoke-direct {v2, v15, v0}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    .line 4154
    .local v2, "cn":Landroid/content/ComponentName;
    new-instance v10, Landroid/content/Intent;

    invoke-direct {v10}, Landroid/content/Intent;-><init>()V

    .line 4155
    .restart local v10    # "intent":Landroid/content/Intent;
    invoke-virtual {v10, v2}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 4156
    new-instance v3, Lcom/android/server/policy/SamsungPhoneWindowManager$ServiceConnectionForCaptureEffect;

    move-object/from16 v0, p0

    move/from16 v1, p1

    invoke-direct {v3, v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager$ServiceConnectionForCaptureEffect;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;I)V

    .line 4158
    .local v3, "conn":Landroid/content/ServiceConnection;
    const-string v15, "SamsungPhoneWindowManager"

    new-instance v17, Ljava/lang/StringBuilder;

    invoke-direct/range {v17 .. v17}, Ljava/lang/StringBuilder;-><init>()V

    const-string v18, " screenshot is taken for user "

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual {v4}, Landroid/os/UserHandle;->getIdentifier()I

    move-result v18

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual/range {v17 .. v17}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4160
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    .line 4161
    const/16 v17, 0x1

    .line 4160
    move/from16 v0, v17

    invoke-virtual {v15, v10, v3, v0, v4}, Landroid/content/Context;->bindServiceAsUser(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z

    move-result v15

    if-eqz v15, :cond_7

    .line 4162
    new-instance v12, Lcom/android/server/policy/SamsungPhoneWindowManager$ScreenshotRunnable;

    move-object/from16 v0, p0

    invoke-direct {v12, v0, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager$ScreenshotRunnable;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;Landroid/content/ServiceConnection;)V

    .line 4163
    .local v12, "runnable":Lcom/android/server/policy/SamsungPhoneWindowManager$ScreenshotRunnable;
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mServiceConnectionMap:Ljava/util/Map;

    invoke-interface {v15, v3, v12}, Ljava/util/Map;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 4164
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    const-wide/16 v18, 0x2710

    move-wide/from16 v0, v18

    invoke-virtual {v15, v12, v0, v1}, Landroid/os/Handler;->postDelayed(Ljava/lang/Runnable;J)Z
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_0

    goto/16 :goto_1

    .line 4101
    .end local v2    # "cn":Landroid/content/ComponentName;
    .end local v3    # "conn":Landroid/content/ServiceConnection;
    .end local v4    # "curr":Landroid/os/UserHandle;
    .end local v10    # "intent":Landroid/content/Intent;
    .end local v12    # "runnable":Lcom/android/server/policy/SamsungPhoneWindowManager$ScreenshotRunnable;
    .end local v14    # "versionInfo":Landroid/os/Bundle;
    :catchall_0
    move-exception v15

    monitor-exit v16

    throw v15
.end method

.method public takeScreenshot(IZ)V
    .locals 5
    .param p1, "event"    # I
    .param p2, "homeKeyTriggered"    # Z

    .prologue
    .line 4058
    const-string v2, "SamsungPhoneWindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "takeScreenshot homeKeyTriggered : "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p2}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4060
    if-eqz p2, :cond_1

    .line 4061
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->shouldShowScreenshotHelpGuide()Z

    move-result v2

    if-eqz v2, :cond_0

    .line 4063
    :try_start_0
    new-instance v1, Landroid/content/Intent;

    invoke-direct {v1}, Landroid/content/Intent;-><init>()V

    .line 4064
    .local v1, "startScreenshotHelpGuideIntent":Landroid/content/Intent;
    const-string v2, "com.android.systemui"

    const-string v3, "com.android.systemui.screenshot.ScreenshotHelpGuideActivity"

    invoke-virtual {v1, v2, v3}, Landroid/content/Intent;->setClassName(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;

    .line 4065
    const/high16 v2, 0x10010000

    invoke-virtual {v1, v2}, Landroid/content/Intent;->setFlags(I)Landroid/content/Intent;

    .line 4066
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    sget-object v3, Landroid/os/UserHandle;->CURRENT:Landroid/os/UserHandle;

    invoke-virtual {v2, v1, v3}, Lcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V

    .line 4067
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->setShowScreenshotHelpGuide()V
    :try_end_0
    .catch Landroid/content/ActivityNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    .line 4072
    .end local v1    # "startScreenshotHelpGuideIntent":Landroid/content/Intent;
    :cond_0
    :goto_0
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "Do not excute screenshot because key concept is changed."

    invoke-static {v2, v3}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 4073
    return-void

    .line 4068
    :catch_0
    move-exception v0

    .line 4069
    .local v0, "e":Landroid/content/ActivityNotFoundException;
    const-string v2, "SamsungPhoneWindowManager"

    const-string v3, "No activity to show screenshot help dialog."

    invoke-static {v2, v3, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    goto :goto_0

    .line 4076
    .end local v0    # "e":Landroid/content/ActivityNotFoundException;
    :cond_1
    invoke-virtual {p0, p1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->takeScreenshot(I)V

    .line 4057
    return-void
.end method

.method public toggleEasyOneHand()Z
    .locals 4

    .prologue
    const/4 v3, 0x1

    .line 1894
    const-string v0, "SamsungPhoneWindowManager"

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "toggleEasyOneHand() enabled="

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 1895
    iget v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    if-ne v0, v3, :cond_0

    .line 1896
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getReduceScreenPolicy()Lcom/android/server/policy/ReduceScreenPolicy;

    move-result-object v0

    invoke-interface {v0, v3}, Lcom/android/server/policy/ReduceScreenPolicy;->startService(I)V

    .line 1897
    return v3

    .line 1899
    :cond_0
    const/4 v0, 0x0

    return v0
.end method

.method public triggerPanicCall()V
    .locals 4

    .prologue
    .line 3757
    new-instance v0, Landroid/content/Intent;

    invoke-direct {v0}, Landroid/content/Intent;-><init>()V

    .line 3758
    .local v0, "panicIntent":Landroid/content/Intent;
    const-string v1, "com.samsung.android.action.PANIC_CALL"

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setAction(Ljava/lang/String;)Landroid/content/Intent;

    .line 3759
    const-string v1, "panic_call"

    const/4 v2, 0x1

    invoke-virtual {v0, v1, v2}, Landroid/content/Intent;->putExtra(Ljava/lang/String;Z)Landroid/content/Intent;

    .line 3760
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    sget-object v2, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    const-string v3, "com.samsung.android.permission.PANIC_CALL"

    invoke-virtual {v1, v0, v2, v3}, Landroid/content/Context;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V

    .line 3761
    const-string v1, "SamsungPhoneWindowManager"

    const-string v2, "Panic Call triggered."

    invoke-static {v1, v2}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3756
    return-void
.end method

.method public updateDarkNaviBarLw(ILandroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManagerPolicy$WindowState;)I
    .locals 11
    .param p1, "vis"    # I
    .param p2, "opaque"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p3, "opaqueOrDimming"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    .line 6815
    sget-boolean v8, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_LIGHT_NAVIGATION_BAR:Z

    if-eqz v8, :cond_7

    .line 6816
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-direct {p0, v8}, Lcom/android/server/policy/SamsungPhoneWindowManager;->needWhiteNavigationIcon(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v6

    .line 6817
    .local v6, "needsWhiteIcon":Z
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-virtual {p0, v8}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isNaviColorWin(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v8

    if-eqz v8, :cond_8

    .line 6818
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v4, v8, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    .line 6819
    .local v4, "naviColorWin":Landroid/view/WindowManagerPolicy$WindowState;
    :goto_0
    invoke-direct {p0, v4}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isOpenThemeApplied(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v2

    .line 6821
    .local v2, "isThemeApplied":Z
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isBixbyFullWindowShowing()Z

    move-result v8

    if-eqz v8, :cond_0

    .line 6822
    or-int/lit8 p1, p1, 0x20

    .line 6825
    :cond_0
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v8, :cond_a

    .line 6826
    const/4 v7, 0x0

    .line 6827
    .local v7, "nonImmersive":Z
    if-eqz v4, :cond_1

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v9, v9, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v9}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v9

    invoke-virtual {v8, v9}, Lcom/android/server/policy/PhoneWindowManager;->isFullscreen(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v8

    if-eqz v8, :cond_9

    .line 6831
    .end local v7    # "nonImmersive":Z
    :cond_1
    :goto_1
    if-nez v7, :cond_2

    .line 6832
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-direct {p0, v8}, Lcom/android/server/policy/SamsungPhoneWindowManager;->shouldShowImmersiveIcon(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v8

    if-eqz v8, :cond_2

    .line 6833
    or-int/lit16 p1, p1, 0x100

    .line 6842
    :cond_2
    :goto_2
    if-eqz v4, :cond_17

    .line 6843
    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v8

    invoke-interface {v8}, Lcom/samsung/android/view/IWindowStateBridge;->isAspectRatioWindow()Z

    move-result v8

    if-eqz v8, :cond_4

    .line 6845
    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v8

    invoke-interface {v8}, Lcom/samsung/android/view/IWindowStateBridge;->getAspectRatioFrame()Landroid/graphics/Rect;

    move-result-object v0

    .line 6846
    .local v0, "aspectFrame":Landroid/graphics/Rect;
    new-instance v1, Landroid/graphics/Point;

    invoke-direct {v1}, Landroid/graphics/Point;-><init>()V

    .line 6847
    .local v1, "displaySize":Landroid/graphics/Point;
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    invoke-virtual {v8, v1}, Landroid/view/Display;->getRealSize(Landroid/graphics/Point;)V

    .line 6848
    if-eqz v0, :cond_c

    .line 6849
    iget v8, v0, Landroid/graphics/Rect;->top:I

    if-nez v8, :cond_c

    iget v8, v0, Landroid/graphics/Rect;->left:I

    if-eqz v8, :cond_3

    iget v8, v0, Landroid/graphics/Rect;->right:I

    iget v9, v1, Landroid/graphics/Point;->x:I

    if-ne v8, v9, :cond_b

    :cond_3
    const/4 v8, 0x1

    :goto_3
    move v5, v8

    .line 6850
    .local v5, "needsForceOpaque":Z
    :goto_4
    if-eqz v5, :cond_4

    .line 6851
    or-int/lit16 p1, p1, 0x200

    .line 6855
    .end local v0    # "aspectFrame":Landroid/graphics/Rect;
    .end local v1    # "displaySize":Landroid/graphics/Point;
    .end local v5    # "needsForceOpaque":Z
    :cond_4
    if-eqz v6, :cond_d

    .line 6856
    or-int/lit16 p1, p1, 0x80

    .line 6885
    :cond_5
    :goto_5
    if-eqz v2, :cond_16

    .line 6886
    const/4 v8, 0x1

    iput-boolean v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppliedOpenTheme:Z

    .line 6887
    or-int/lit8 p1, p1, 0x40

    .line 6896
    :cond_6
    :goto_6
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalRatioWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v8, :cond_7

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mConventionalRatioWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v8}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v8

    if-eqz v8, :cond_7

    .line 6897
    or-int/lit16 p1, p1, 0x200

    .line 6901
    .end local v2    # "isThemeApplied":Z
    .end local v4    # "naviColorWin":Landroid/view/WindowManagerPolicy$WindowState;
    .end local v6    # "needsWhiteIcon":Z
    :cond_7
    return p1

    .restart local v6    # "needsWhiteIcon":Z
    :cond_8
    move-object v4, p3

    .line 6818
    goto/16 :goto_0

    .line 6828
    .restart local v2    # "isThemeApplied":Z
    .restart local v4    # "naviColorWin":Landroid/view/WindowManagerPolicy$WindowState;
    .restart local v7    # "nonImmersive":Z
    :cond_9
    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v8

    invoke-interface {v8}, Lcom/samsung/android/view/IWindowStateBridge;->isNonImmersiveWindow()Z

    move-result v7

    .line 6829
    .local v7, "nonImmersive":Z
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v8}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v8

    invoke-interface {v8, v7}, Lcom/samsung/android/view/IWindowStateBridge;->setNonImmersiveWindow(Z)V

    goto :goto_1

    .line 6837
    .end local v7    # "nonImmersive":Z
    :cond_a
    iget-boolean v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mShowImmersiveIcon:Z

    if-eqz v8, :cond_2

    .line 6838
    or-int/lit16 p1, p1, 0x100

    goto :goto_2

    .line 6849
    .restart local v0    # "aspectFrame":Landroid/graphics/Rect;
    .restart local v1    # "displaySize":Landroid/graphics/Point;
    :cond_b
    const/4 v8, 0x0

    goto :goto_3

    .line 6848
    :cond_c
    const/4 v5, 0x0

    goto :goto_4

    .line 6857
    .end local v0    # "aspectFrame":Landroid/graphics/Rect;
    .end local v1    # "displaySize":Landroid/graphics/Point;
    :cond_d
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-virtual {v8}, Lcom/android/server/policy/PhoneWindowManager;->isStatusBarKeyguard()Z

    move-result v8

    if-eqz v8, :cond_e

    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-boolean v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mHideLockScreen:Z

    if-eqz v8, :cond_10

    .line 6862
    :cond_e
    if-eq v4, p2, :cond_f

    if-eq v4, p3, :cond_12

    .line 6863
    :cond_f
    and-int/lit8 p1, p1, -0x11

    .line 6864
    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v8

    invoke-interface {v8}, Lcom/samsung/android/view/IWindowStateBridge;->isAspectRatioWindow()Z

    move-result v8

    if-nez v8, :cond_11

    .line 6865
    const/4 v8, 0x0

    invoke-static {v4, v8}, Lcom/android/server/policy/PolicyControl;->getSystemUiVisibility(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I

    move-result v8

    and-int/lit8 v8, v8, 0x10

    or-int/2addr p1, v8

    goto :goto_5

    .line 6858
    :cond_10
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->getBaseType()I

    move-result v9

    invoke-virtual {v8, v9}, Lcom/android/server/policy/PhoneWindowManager;->windowTypeToLayerLw(I)I

    move-result v8

    iget-object v9, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    const/16 v10, 0x7d0

    invoke-virtual {v9, v10}, Lcom/android/server/policy/PhoneWindowManager;->windowTypeToLayerLw(I)I

    move-result v9

    if-gt v8, v9, :cond_e

    .line 6860
    and-int/lit16 p1, p1, -0x220

    .line 6858
    goto :goto_5

    .line 6868
    :cond_11
    or-int/lit8 p1, p1, 0x10

    goto :goto_5

    .line 6870
    :cond_12
    if-eqz v4, :cond_5

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy$WindowState;->isDimming()Z

    move-result v8

    if-eqz v8, :cond_5

    .line 6872
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->needFullScreenDimBounds()Z

    move-result v8

    if-eqz v8, :cond_13

    .line 6873
    or-int/lit8 p1, p1, 0x20

    goto/16 :goto_5

    .line 6875
    :cond_13
    const/4 v3, 0x0

    .line 6876
    .local v3, "lastSysUiFlags":I
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p2, v8, :cond_15

    .line 6877
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v8, Lcom/android/server/policy/PhoneWindowManager;->mLastFullscreenStackSysUiFlags:I

    .line 6881
    :cond_14
    :goto_7
    and-int/lit8 v8, v3, 0x10

    or-int/2addr p1, v8

    goto/16 :goto_5

    .line 6878
    :cond_15
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v8, v8, Lcom/android/server/policy/PhoneWindowManager;->mTopDockedOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p2, v8, :cond_14

    .line 6879
    iget-object v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v3, v8, Lcom/android/server/policy/PhoneWindowManager;->mLastDockedStackSysUiFlags:I

    goto :goto_7

    .line 6889
    .end local v3    # "lastSysUiFlags":I
    :cond_16
    const/4 v8, 0x0

    iput-boolean v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppliedOpenTheme:Z

    goto/16 :goto_6

    .line 6892
    :cond_17
    iget-boolean v8, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAppliedOpenTheme:Z

    if-eqz v8, :cond_6

    .line 6893
    or-int/lit8 p1, p1, 0x40

    goto/16 :goto_6
.end method

.method public updateDeskTopUiMode()V
    .locals 1

    .prologue
    .line 9225
    invoke-static {}, Lcom/android/server/desktopmode/DesktopModeService$Lifecycle;->getService()Lcom/android/server/desktopmode/DesktopModeService;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/desktopmode/DesktopModeService;->getCurrentUiMode()I

    move-result v0

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDeskTopUiMode:I

    .line 9224
    return-void
.end method

.method updateForceImmersiveMode()V
    .locals 6

    .prologue
    const/4 v5, 0x1

    const/4 v2, 0x0

    .line 8120
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    const-string v4, "navigationbar_hide_bar"

    invoke-static {v3, v4, v5}, Landroid/provider/Settings$Global;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v3

    if-ne v3, v5, :cond_1

    const/4 v1, 0x1

    .line 8121
    .local v1, "hideSetting":Z
    :goto_0
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    const-string v4, "navigationbar_hide_bar_enabled"

    invoke-static {v3, v4, v2}, Landroid/provider/Settings$Global;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v3

    if-ne v3, v5, :cond_2

    const/4 v0, 0x1

    .line 8123
    .local v0, "enabled":Z
    :goto_1
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string v5, "upateForceImmersiveMode() hideSetting="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v1}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string v5, ", enabled="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8125
    iget-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarHideSetting:Z

    if-eq v1, v3, :cond_0

    if-eqz v1, :cond_3

    .line 8128
    :cond_0
    :goto_2
    iput-boolean v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarHideSetting:Z

    .line 8130
    if-eqz v1, :cond_4

    .end local v0    # "enabled":Z
    :goto_3
    invoke-static {v0}, Lcom/android/server/policy/PolicyControl;->setForceImmersiveMode(Z)V

    .line 8119
    return-void

    .line 8120
    .end local v1    # "hideSetting":Z
    :cond_1
    const/4 v1, 0x0

    .restart local v1    # "hideSetting":Z
    goto :goto_0

    .line 8121
    :cond_2
    const/4 v0, 0x0

    .restart local v0    # "enabled":Z
    goto :goto_1

    .line 8126
    :cond_3
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    const-string v4, "navigationbar_hide_bar_enabled"

    invoke-static {v3, v4, v2}, Landroid/provider/Settings$Global;->putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z

    goto :goto_2

    :cond_4
    move v0, v2

    .line 8130
    goto :goto_3
.end method

.method public updateSViewCoverLayout(Z)V
    .locals 3
    .param p1, "useSViewCover"    # Z

    .prologue
    .line 5553
    if-eqz p1, :cond_0

    .line 5554
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemLeft:I

    .line 5555
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemTop:I

    .line 5556
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemRight:I

    .line 5557
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverSystemBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemBottom:I

    .line 5558
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    .line 5559
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenTop:I

    .line 5560
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenWidth:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenWidth:I

    .line 5561
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverUnrestrictedScreenHeight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenHeight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenHeight:I

    .line 5562
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenLeft:I

    .line 5563
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenTop:I

    .line 5564
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenRight:I

    .line 5565
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableFullscreenBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenBottom:I

    .line 5566
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableLeft:I

    .line 5567
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableTop:I

    .line 5568
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableRight:I

    .line 5569
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverStableBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableBottom:I

    .line 5570
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    .line 5571
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockTop:I

    .line 5572
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockRight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurRight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    .line 5573
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSViewCoverDockBottom:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurBottom:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    .line 5552
    :goto_0
    return-void

    .line 5575
    :cond_0
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemLeft:I

    .line 5576
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemTop:I

    .line 5577
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemRight:I

    .line 5578
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalSystemBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mSystemBottom:I

    .line 5579
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenLeft:I

    .line 5580
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenTop:I

    .line 5581
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenWidth:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenWidth:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenWidth:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenWidth:I

    .line 5582
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalUnrestrictedScreenHeight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mUnrestrictedScreenHeight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedScreenHeight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mRestrictedOverscanScreenHeight:I

    .line 5583
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenLeft:I

    .line 5584
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenTop:I

    .line 5585
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenRight:I

    .line 5586
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableFullscreenBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableFullscreenBottom:I

    .line 5587
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableLeft:I

    .line 5588
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableTop:I

    .line 5589
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableRight:I

    .line 5590
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalStableBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mStableBottom:I

    .line 5591
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurLeft:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentLeft:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockLeft:I

    .line 5592
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurTop:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentTop:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockTop:I

    .line 5593
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockRight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurRight:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentRight:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockRight:I

    .line 5594
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOriginalDockBottom:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mCurBottom:I

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iput v1, v2, Lcom/android/server/policy/PhoneWindowManager;->mContentBottom:I

    iput v1, v0, Lcom/android/server/policy/PhoneWindowManager;->mDockBottom:I

    goto/16 :goto_0
.end method

.method public updateSettings()V
    .locals 38

    .prologue
    .line 1601
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v33, v0

    invoke-virtual/range {v33 .. v33}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v28

    .line 1602
    .local v28, "resolver":Landroid/content/ContentResolver;
    const/16 v31, 0x0

    .line 1604
    .local v31, "updateRotation":Z
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    move-object/from16 v34, v0

    monitor-enter v34

    .line 1606
    :try_start_0
    const-string v33, "double_tab_launch_component"

    move-object/from16 v0, v28

    move-object/from16 v1, v33

    invoke-static {v0, v1}, Landroid/provider/Settings$System;->getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v8

    .line 1607
    .local v8, "componentNameOfDoubleTapLaunchCommandIntent":Ljava/lang/String;
    if-eqz v8, :cond_1d

    .line 1608
    const-string v33, "/"

    move-object/from16 v0, v33

    invoke-virtual {v8, v0}, Ljava/lang/String;->split(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object v30

    .line 1609
    .local v30, "titles":[Ljava/lang/String;
    if-eqz v30, :cond_0

    move-object/from16 v0, v30

    array-length v0, v0

    move/from16 v33, v0

    const/16 v35, 0x2

    move/from16 v0, v33

    move/from16 v1, v35

    if-lt v0, v1, :cond_0

    .line 1610
    new-instance v25, Landroid/content/ComponentName;

    const/16 v33, 0x0

    aget-object v33, v30, v33

    const/16 v35, 0x1

    aget-object v35, v30, v35

    move-object/from16 v0, v25

    move-object/from16 v1, v33

    move-object/from16 v2, v35

    invoke-direct {v0, v1, v2}, Landroid/content/ComponentName;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    .line 1612
    .local v25, "newComponentName":Landroid/content/ComponentName;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

    move-object/from16 v33, v0

    move-object/from16 v0, v25

    move-object/from16 v1, v33

    invoke-virtual {v0, v1}, Landroid/content/ComponentName;->equals(Ljava/lang/Object;)Z

    move-result v33

    if-nez v33, :cond_0

    .line 1613
    move-object/from16 v0, v25

    move-object/from16 v1, p0

    iput-object v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mComponentNameOfDoubleTapLaunchCommandIntent:Landroid/content/ComponentName;

    .line 1614
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    move-object/from16 v33, v0

    move-object/from16 v0, v33

    move-object/from16 v1, v25

    invoke-virtual {v0, v1}, Landroid/content/Intent;->setComponent(Landroid/content/ComponentName;)Landroid/content/Intent;

    .line 1615
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchCommandIntent:Landroid/content/Intent;

    move-object/from16 v33, v0

    move-object/from16 v0, p0

    move-object/from16 v1, v33

    invoke-virtual {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isActivitiesAvailable(Landroid/content/Intent;)Z

    move-result v33

    move/from16 v0, v33

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mAvailableDoublTapLaunchCommand:Z

    .line 1622
    .end local v25    # "newComponentName":Landroid/content/ComponentName;
    .end local v30    # "titles":[Ljava/lang/String;
    :cond_0
    :goto_0
    invoke-static {}, Landroid/os/UserHandle;->myUserId()I

    move-result v33

    move/from16 v0, v33

    move-object/from16 v1, p0

    iput v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchUser:I

    .line 1623
    const-string v33, "double_tab_launch"

    const/16 v35, 0x0

    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v10

    .line 1624
    .local v10, "doubleTapLaunchBehavior":I
    const-string v33, "SamsungPhoneWindowManager"

    new-instance v35, Ljava/lang/StringBuilder;

    invoke-direct/range {v35 .. v35}, Ljava/lang/StringBuilder;-><init>()V

    const-string v36, "updateSettings(). settings changed. doubleTapLaunchBehavior : "

    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v35

    move-object/from16 v0, v35

    invoke-virtual {v0, v10}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1625
    const-string v36, ". mDoubleTapLaunchBehavior : "

    .line 1624
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1625
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    move/from16 v36, v0

    .line 1624
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1626
    const-string v36, ". mDoubleTapLaunchUser "

    .line 1624
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1626
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchUser:I

    move/from16 v36, v0

    .line 1624
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v35

    invoke-virtual/range {v35 .. v35}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v35

    move-object/from16 v0, v33

    move-object/from16 v1, v35

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 1627
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v10, :cond_1

    .line 1628
    move-object/from16 v0, p0

    iput v10, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    .line 1633
    :cond_1
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v33, v0

    invoke-virtual/range {v33 .. v33}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v33

    .line 1634
    const-string v35, "direct_access"

    const/16 v36, 0x0

    const/16 v37, -0x2

    .line 1633
    move-object/from16 v0, v33

    move-object/from16 v1, v35

    move/from16 v2, v36

    move/from16 v3, v37

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v9

    .line 1635
    .local v9, "directAccessBehavior":I
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDirectAccessBehavior:I

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v9, :cond_2

    .line 1636
    move-object/from16 v0, p0

    iput v9, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDirectAccessBehavior:I

    .line 1641
    :cond_2
    const-string v33, "lcd_curtain"

    const/16 v35, 0x0

    const/16 v36, -0x2

    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    const/16 v35, 0x1

    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_1f

    .line 1642
    const-string v33, "accessibility_enabled"

    const/16 v35, 0x0

    const/16 v36, -0x2

    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$Secure;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    const/16 v35, 0x1

    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_1e

    const/16 v33, 0x1

    :goto_1
    move/from16 v22, v33

    .line 1643
    .local v22, "lcdCurtainEnabled":Z
    :goto_2
    if-eqz v22, :cond_20

    .line 1644
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    const/16 v35, 0x65

    move/from16 v0, v35

    move-object/from16 v1, v33

    iput v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mDoublePressOnPowerBehavior:I

    .line 1651
    :cond_3
    :goto_3
    if-nez v22, :cond_4

    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mDoubleTapLaunchBehavior:I

    move/from16 v33, v0

    const/16 v35, 0x3

    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_21

    :cond_4
    const/16 v33, 0x1

    :goto_4
    move/from16 v0, v33

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPowerDoubleBehavior:Z

    .line 1656
    const-string v33, "edit_after_screen_capture"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1655
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_22

    .line 1656
    const/16 v26, 0x1

    .line 1657
    .local v26, "performEditAfterScreenCapture":Z
    :goto_5
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPerformEditAfterScreenCapture:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v26

    if-eq v0, v1, :cond_5

    .line 1658
    move/from16 v0, v26

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPerformEditAfterScreenCapture:Z

    .line 1664
    :cond_5
    const-string v33, "send_emergency_message"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1663
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_23

    .line 1664
    const/16 v18, 0x1

    .line 1665
    .local v18, "isSafetyAssuranceEnabled":Z
    :goto_6
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSafetyAssuranceEnabled:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v18

    if-eq v0, v1, :cond_6

    .line 1666
    move/from16 v0, v18

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsSafetyAssuranceEnabled:Z

    .line 1672
    :cond_6
    const-string v33, "access_control_use"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1671
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_24

    .line 1672
    const/16 v21, 0x1

    .line 1673
    .local v21, "isUseAccessControl":Z
    :goto_7
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsUseAccessControl:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v21

    if-eq v0, v1, :cond_7

    .line 1674
    move/from16 v0, v21

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsUseAccessControl:Z

    .line 1677
    :cond_7
    const-string v33, "access_control_enabled"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1676
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_25

    .line 1677
    const/16 v16, 0x1

    .line 1678
    .local v16, "isEnabledAccessControl":Z
    :goto_8
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v16

    if-eq v0, v1, :cond_8

    .line 1679
    move/from16 v0, v16

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEnabledAccessControl:Z

    .line 1685
    :cond_8
    const-string v33, "easy_mode_switch"

    const/16 v35, 0x1

    const/16 v36, -0x2

    .line 1684
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-nez v33, :cond_26

    .line 1685
    const/4 v14, 0x1

    .line 1686
    .local v14, "isEasyMode":Z
    :goto_9
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEasyModeEnabled:Z

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v14, :cond_9

    .line 1687
    move-object/from16 v0, p0

    iput-boolean v14, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsEasyModeEnabled:Z

    .line 1693
    :cond_9
    const-string v33, "desk_home_screen_display"

    const/16 v35, 0x1

    const/16 v36, -0x2

    .line 1692
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_27

    .line 1693
    const/4 v13, 0x1

    .line 1694
    .local v13, "isDockHomeEnabled":Z
    :goto_a
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDockHomeEnabled:Z

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v13, :cond_a

    .line 1695
    move-object/from16 v0, p0

    iput-boolean v13, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsDockHomeEnabled:Z

    .line 1701
    :cond_a
    const-string v33, "torchlight_enable"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1700
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_28

    .line 1701
    const/16 v20, 0x1

    .line 1702
    .local v20, "isTorchlightEnabled":Z
    :goto_b
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightEnabled:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v20

    if-eq v0, v1, :cond_b

    .line 1703
    move/from16 v0, v20

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTorchlightEnabled:Z

    .line 1709
    :cond_b
    const-string v33, "car_mode_on"

    const/16 v35, 0x0

    .line 1708
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$System;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v33

    if-eqz v33, :cond_29

    .line 1709
    const/4 v11, 0x1

    .line 1710
    .local v11, "isCheckDrivingMode":Z
    :goto_c
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsCheckDrivingMode:Z

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v11, :cond_c

    .line 1711
    move-object/from16 v0, p0

    iput-boolean v11, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsCheckDrivingMode:Z

    .line 1715
    :cond_c
    const-string v33, "car_mode_blocking_system_key"

    const/16 v35, 0x0

    const/16 v36, -0x3

    .line 1714
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$Secure;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_2a

    .line 1715
    const/4 v6, 0x1

    .line 1716
    .local v6, "blockKeyForDrivingMode":Z
    :goto_d
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockKeyForDrivingMode:Z

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v6, :cond_d

    .line 1717
    move-object/from16 v0, p0

    iput-boolean v6, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBlockKeyForDrivingMode:Z

    .line 1722
    :cond_d
    const-string v33, "sidesync_source_presentation"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1721
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_2b

    .line 1722
    const/16 v19, 0x1

    .line 1723
    .local v19, "isSideSyncSourcePresentationActived":Z
    :goto_e
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSideSyncSourcePresentationActived:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v19

    if-eq v0, v1, :cond_e

    .line 1724
    move/from16 v0, v19

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSideSyncSourcePresentationActived:Z

    .line 1729
    :cond_e
    const-string v33, "pen_attach_detach_vibration"

    const/16 v35, 0x1

    const/16 v36, -0x2

    .line 1728
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_2c

    .line 1729
    const/16 v17, 0x1

    .line 1730
    .local v17, "isPenNotifyVibrationChecked":Z
    :goto_f
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenNotifyVibrationChecked:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v17

    if-eq v0, v1, :cond_f

    .line 1731
    move/from16 v0, v17

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPenNotifyVibrationChecked:Z

    .line 1736
    :cond_f
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHasDaynotePackage:Z

    move/from16 v33, v0

    if-eqz v33, :cond_10

    .line 1738
    const-string v33, "cover_note"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1737
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_2d

    .line 1738
    const/4 v12, 0x1

    .line 1740
    .local v12, "isCoverNote":Z
    :goto_10
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverNoteEnabled:Z

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v12, :cond_10

    .line 1741
    move-object/from16 v0, p0

    iput-boolean v12, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCoverNoteEnabled:Z

    .line 1747
    .end local v12    # "isCoverNote":Z
    :cond_10
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v33, v0

    invoke-static/range {v33 .. v33}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v33

    if-eqz v33, :cond_12

    .line 1749
    const-string v33, "folder_sounds_enabled"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1748
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_2e

    .line 1749
    const/16 v23, 0x1

    .line 1750
    .local v23, "mFolderSound":Z
    :goto_11
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderSoundEnable:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v23

    if-eq v0, v1, :cond_11

    .line 1751
    move/from16 v0, v23

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderSoundEnable:Z

    .line 1754
    :cond_11
    const-string v33, "folder_open_sound"

    const/16 v35, -0x2

    .line 1753
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$System;->getStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;I)Ljava/lang/String;

    move-result-object v33

    move-object/from16 v0, v33

    move-object/from16 v1, p0

    iput-object v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderOpenSound:Ljava/lang/String;

    .line 1756
    const-string v33, "folder_close_sound"

    const/16 v35, -0x2

    .line 1755
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$System;->getStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;I)Ljava/lang/String;

    move-result-object v33

    move-object/from16 v0, v33

    move-object/from16 v1, p0

    iput-object v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mFolderCloseSound:Ljava/lang/String;

    .line 1762
    .end local v23    # "mFolderSound":Z
    :cond_12
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    move-object/from16 v33, v0

    invoke-static/range {v33 .. v33}, Lcom/android/server/policy/SamsungPolicyProperties;->FolderTypeFeature(Landroid/content/Context;)I

    move-result v33

    const/16 v35, 0x2

    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_13

    .line 1764
    const-string v33, "accelerometer_rotation_second"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1763
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_2f

    .line 1764
    const/16 v29, 0x0

    .line 1766
    .local v29, "secondLcdUserRotationMode":I
    :goto_12
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdUserRotationMode:I

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v29

    if-eq v0, v1, :cond_13

    .line 1767
    move/from16 v0, v29

    move-object/from16 v1, p0

    iput v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSecondLcdUserRotationMode:I

    .line 1768
    const/16 v31, 0x1

    .line 1769
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    invoke-virtual/range {v33 .. v33}, Lcom/android/server/policy/PhoneWindowManager;->updateOrientationListenerLp()V

    .line 1776
    .end local v29    # "secondLcdUserRotationMode":I
    :cond_13
    const-string v33, "assistant"

    const/16 v35, -0x2

    .line 1775
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$Secure;->getStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;I)Ljava/lang/String;

    move-result-object v5

    .line 1777
    .local v5, "AssistSetting":Ljava/lang/String;
    if-eqz v5, :cond_15

    .line 1778
    const-string v33, "/"

    move-object/from16 v0, v33

    invoke-virtual {v5, v0}, Ljava/lang/String;->split(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object v4

    .line 1779
    .local v4, "AssistPackage":[Ljava/lang/String;
    const/16 v33, 0x0

    aget-object v33, v4, v33

    if-eqz v33, :cond_30

    .line 1780
    const/16 v33, 0x0

    aget-object v33, v4, v33

    const-string v35, "com.samsung.voiceserviceplatform"

    move-object/from16 v0, v33

    move-object/from16 v1, v35

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v33

    if-nez v33, :cond_14

    const/16 v33, 0x0

    aget-object v33, v4, v33

    const-string v35, "com.samsung.android.quickassist"

    move-object/from16 v0, v33

    move-object/from16 v1, v35

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v33

    .line 1779
    if-eqz v33, :cond_30

    .line 1781
    :cond_14
    const/16 v33, 0x1

    move/from16 v0, v33

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsQDSetting:Z

    .line 1808
    .end local v4    # "AssistPackage":[Ljava/lang/String;
    :cond_15
    :goto_13
    const-string v33, "any_screen_enabled"

    .line 1809
    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1808
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v15

    .line 1810
    .local v15, "isEasyOneHandEnabled":I
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v0, v15, :cond_16

    .line 1811
    move-object/from16 v0, p0

    iput v15, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    .line 1812
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBootCompleted:Z

    move/from16 v33, v0

    if-eqz v33, :cond_16

    .line 1813
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    move/from16 v33, v0

    const/16 v35, 0x1

    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_31

    .line 1814
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getReduceScreenPolicy()Lcom/android/server/policy/ReduceScreenPolicy;

    move-result-object v33

    const/16 v35, 0x0

    move-object/from16 v0, v33

    move/from16 v1, v35

    invoke-interface {v0, v1}, Lcom/android/server/policy/ReduceScreenPolicy;->startService(I)V

    .line 1821
    :cond_16
    :goto_14
    const-string v33, "any_screen_running"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1820
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    move/from16 v0, v33

    move-object/from16 v1, p0

    iput v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandRunning:I

    .line 1823
    const-string v33, "one_handed_op_wakeup_type"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1822
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    move/from16 v0, v33

    move-object/from16 v1, p0

    iput v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandTriggerType:I

    .line 1824
    sget-boolean v33, Lcom/android/server/policy/SamsungPhoneWindowManager;->SAFE_DEBUG:Z

    if-eqz v33, :cond_17

    .line 1825
    const-string v33, "SamsungPhoneWindowManager"

    new-instance v35, Ljava/lang/StringBuilder;

    invoke-direct/range {v35 .. v35}, Ljava/lang/StringBuilder;-><init>()V

    const-string v36, "mEasyOneHandEnabled="

    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v35

    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandEnabled:I

    move/from16 v36, v0

    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v35

    const-string v36, ", mEasyOneHandRunning="

    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1826
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandRunning:I

    move/from16 v36, v0

    .line 1825
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1826
    const-string v36, ", mEasyOneHandTriggerType="

    .line 1825
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1826
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mEasyOneHandTriggerType:I

    move/from16 v36, v0

    .line 1825
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1826
    const-string v36, ", mBootCompleted="

    .line 1825
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v35

    .line 1826
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mBootCompleted:Z

    move/from16 v36, v0

    .line 1825
    invoke-virtual/range {v35 .. v36}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v35

    invoke-virtual/range {v35 .. v35}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v35

    move-object/from16 v0, v33

    move-object/from16 v1, v35

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 1830
    :cond_17
    sget-boolean v33, Lcom/samsung/android/framework/feature/NavigationBarFeatures;->SUPPORT_NAVIGATION_BAR:Z

    if-eqz v33, :cond_18

    .line 1831
    const-string v33, "navigationbar_key_order"

    const/16 v35, 0x0

    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    invoke-static {v0, v1, v2}, Landroid/provider/Settings$Global;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v33

    move/from16 v0, v33

    move-object/from16 v1, p0

    iput v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNavigationBarKeyOrder:I

    .line 1832
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    move-object/from16 v0, v33

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    move-object/from16 v33, v0

    if-eqz v33, :cond_32

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    move-object/from16 v0, v33

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mDisplay:Landroid/view/Display;

    move-object/from16 v33, v0

    invoke-virtual/range {v33 .. v33}, Landroid/view/Display;->getRotation()I

    move-result v33

    :goto_15
    move-object/from16 v0, p0

    move/from16 v1, v33

    invoke-direct {v0, v1}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updateBackRect(I)V

    .line 1834
    const-string v33, "game_navigationbar_swipe_up_lock"

    const/16 v35, 0x0

    const/16 v36, -0x2

    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$Secure;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    const/16 v35, 0x1

    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_33

    const/16 v33, 0x1

    :goto_16
    move/from16 v0, v33

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mNaviBarLockedOnGameMode:Z

    .line 1839
    :cond_18
    const-string v33, "display_outdoor_mode"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1838
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    .line 1839
    const/16 v35, 0x1

    .line 1838
    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_34

    .line 1839
    const/16 v27, 0x1

    .line 1840
    .local v27, "prevOutdoorModeSetting":Z
    :goto_17
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOutdoorModeSetting:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v27

    if-eq v0, v1, :cond_19

    .line 1841
    move/from16 v0, v27

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mOutdoorModeSetting:Z

    .line 1846
    :cond_19
    const-string v33, "spen_screen_on"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1845
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    .line 1846
    const/16 v35, 0x1

    .line 1845
    move/from16 v0, v33

    move/from16 v1, v35

    if-ne v0, v1, :cond_35

    .line 1846
    const/16 v32, 0x1

    .line 1847
    .local v32, "wakeSpenSetting":Z
    :goto_18
    move-object/from16 v0, p0

    iget-boolean v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeSPenSetting:Z

    move/from16 v33, v0

    move/from16 v0, v33

    move/from16 v1, v32

    if-eq v0, v1, :cond_1a

    .line 1848
    move/from16 v0, v32

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWakeSPenSetting:Z

    .line 1852
    :cond_1a
    const-string v33, "mobile_keyboard"

    const/16 v35, 0x0

    const/16 v36, 0x0

    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$System;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v33

    if-eqz v33, :cond_36

    const/16 v24, 0x1

    .line 1853
    .local v24, "mobileKeyboardEnabled":Z
    :goto_19
    const-wide/16 v36, 0x0

    if-eqz v24, :cond_37

    const/16 v33, 0x0

    :goto_1a
    move-object/from16 v0, p0

    move-wide/from16 v1, v36

    move/from16 v3, v33

    invoke-virtual {v0, v1, v2, v3}, Lcom/android/server/policy/SamsungPhoneWindowManager;->notifyCoverSwitchStateChanged(JZ)V

    .line 1858
    const-string v33, "car_mode_global_navi_bar_position"

    const/16 v35, 0x0

    const/16 v36, -0x2

    .line 1857
    move-object/from16 v0, v28

    move-object/from16 v1, v33

    move/from16 v2, v35

    move/from16 v3, v36

    invoke-static {v0, v1, v2, v3}, Landroid/provider/Settings$Secure;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v7

    .line 1859
    .local v7, "carModeBarHorizontalPosition":I
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarHorizontalPosition:I

    move/from16 v33, v0

    move/from16 v0, v33

    if-eq v7, v0, :cond_1b

    .line 1860
    move-object/from16 v0, p0

    iput v7, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mCarModeBarHorizontalPosition:I

    .line 1861
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    move-object/from16 v33, v0

    const/16 v35, 0x2

    move-object/from16 v0, v33

    move/from16 v1, v35

    invoke-virtual {v0, v1}, Landroid/os/Handler;->sendEmptyMessage(I)Z

    .line 1865
    :cond_1b
    if-eqz v31, :cond_1c

    .line 1866
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    const/16 v35, 0x1

    move-object/from16 v0, v33

    move/from16 v1, v35

    invoke-virtual {v0, v1}, Lcom/android/server/policy/PhoneWindowManager;->updateRotation(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_1c
    monitor-exit v34

    .line 1600
    return-void

    .line 1619
    .end local v5    # "AssistSetting":Ljava/lang/String;
    .end local v6    # "blockKeyForDrivingMode":Z
    .end local v7    # "carModeBarHorizontalPosition":I
    .end local v9    # "directAccessBehavior":I
    .end local v10    # "doubleTapLaunchBehavior":I
    .end local v11    # "isCheckDrivingMode":Z
    .end local v13    # "isDockHomeEnabled":Z
    .end local v14    # "isEasyMode":Z
    .end local v15    # "isEasyOneHandEnabled":I
    .end local v16    # "isEnabledAccessControl":Z
    .end local v17    # "isPenNotifyVibrationChecked":Z
    .end local v18    # "isSafetyAssuranceEnabled":Z
    .end local v19    # "isSideSyncSourcePresentationActived":Z
    .end local v20    # "isTorchlightEnabled":Z
    .end local v21    # "isUseAccessControl":Z
    .end local v22    # "lcdCurtainEnabled":Z
    .end local v24    # "mobileKeyboardEnabled":Z
    .end local v26    # "performEditAfterScreenCapture":Z
    .end local v27    # "prevOutdoorModeSetting":Z
    .end local v32    # "wakeSpenSetting":Z
    :cond_1d
    :try_start_1
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    const/16 v35, 0x65

    move/from16 v0, v35

    move-object/from16 v1, v33

    iput v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mDoublePressOnPowerBehavior:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    goto/16 :goto_0

    .line 1604
    .end local v8    # "componentNameOfDoubleTapLaunchCommandIntent":Ljava/lang/String;
    :catchall_0
    move-exception v33

    monitor-exit v34

    throw v33

    .line 1642
    .restart local v8    # "componentNameOfDoubleTapLaunchCommandIntent":Ljava/lang/String;
    .restart local v9    # "directAccessBehavior":I
    .restart local v10    # "doubleTapLaunchBehavior":I
    :cond_1e
    const/16 v33, 0x0

    goto/16 :goto_1

    .line 1641
    :cond_1f
    const/16 v22, 0x0

    goto/16 :goto_2

    .line 1646
    .restart local v22    # "lcdCurtainEnabled":Z
    :cond_20
    if-eqz v8, :cond_3

    .line 1647
    :try_start_2
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    move-object/from16 v33, v0

    const/16 v35, 0x67

    move/from16 v0, v35

    move-object/from16 v1, v33

    iput v0, v1, Lcom/android/server/policy/PhoneWindowManager;->mDoublePressOnPowerBehavior:I

    goto/16 :goto_3

    .line 1651
    :cond_21
    const/16 v33, 0x0

    goto/16 :goto_4

    .line 1656
    :cond_22
    const/16 v26, 0x0

    .restart local v26    # "performEditAfterScreenCapture":Z
    goto/16 :goto_5

    .line 1664
    :cond_23
    const/16 v18, 0x0

    .restart local v18    # "isSafetyAssuranceEnabled":Z
    goto/16 :goto_6

    .line 1672
    :cond_24
    const/16 v21, 0x0

    .restart local v21    # "isUseAccessControl":Z
    goto/16 :goto_7

    .line 1677
    :cond_25
    const/16 v16, 0x0

    .restart local v16    # "isEnabledAccessControl":Z
    goto/16 :goto_8

    .line 1685
    :cond_26
    const/4 v14, 0x0

    .restart local v14    # "isEasyMode":Z
    goto/16 :goto_9

    .line 1693
    :cond_27
    const/4 v13, 0x0

    .restart local v13    # "isDockHomeEnabled":Z
    goto/16 :goto_a

    .line 1701
    :cond_28
    const/16 v20, 0x0

    .restart local v20    # "isTorchlightEnabled":Z
    goto/16 :goto_b

    .line 1709
    :cond_29
    const/4 v11, 0x0

    .restart local v11    # "isCheckDrivingMode":Z
    goto/16 :goto_c

    .line 1715
    :cond_2a
    const/4 v6, 0x0

    .restart local v6    # "blockKeyForDrivingMode":Z
    goto/16 :goto_d

    .line 1722
    :cond_2b
    const/16 v19, 0x0

    .restart local v19    # "isSideSyncSourcePresentationActived":Z
    goto/16 :goto_e

    .line 1729
    :cond_2c
    const/16 v17, 0x0

    .restart local v17    # "isPenNotifyVibrationChecked":Z
    goto/16 :goto_f

    .line 1739
    :cond_2d
    const/4 v12, 0x0

    .restart local v12    # "isCoverNote":Z
    goto/16 :goto_10

    .line 1749
    .end local v12    # "isCoverNote":Z
    :cond_2e
    const/16 v23, 0x0

    .restart local v23    # "mFolderSound":Z
    goto/16 :goto_11

    .line 1765
    .end local v23    # "mFolderSound":Z
    :cond_2f
    const/16 v29, 0x1

    .restart local v29    # "secondLcdUserRotationMode":I
    goto/16 :goto_12

    .line 1783
    .end local v29    # "secondLcdUserRotationMode":I
    .restart local v4    # "AssistPackage":[Ljava/lang/String;
    .restart local v5    # "AssistSetting":Ljava/lang/String;
    :cond_30
    const/16 v33, 0x0

    move/from16 v0, v33

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsQDSetting:Z

    goto/16 :goto_13

    .line 1816
    .end local v4    # "AssistPackage":[Ljava/lang/String;
    .restart local v15    # "isEasyOneHandEnabled":I
    :cond_31
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getReduceScreenPolicy()Lcom/android/server/policy/ReduceScreenPolicy;

    move-result-object v33

    const/16 v35, 0x0

    move-object/from16 v0, v33

    move/from16 v1, v35

    invoke-interface {v0, v1}, Lcom/android/server/policy/ReduceScreenPolicy;->stopService(I)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto/16 :goto_14

    .line 1832
    :cond_32
    const/16 v33, 0x0

    goto/16 :goto_15

    .line 1834
    :cond_33
    const/16 v33, 0x0

    goto/16 :goto_16

    .line 1839
    :cond_34
    const/16 v27, 0x0

    .restart local v27    # "prevOutdoorModeSetting":Z
    goto/16 :goto_17

    .line 1846
    :cond_35
    const/16 v32, 0x0

    .restart local v32    # "wakeSpenSetting":Z
    goto/16 :goto_18

    .line 1852
    :cond_36
    const/16 v24, 0x0

    goto/16 :goto_19

    .line 1853
    .restart local v24    # "mobileKeyboardEnabled":Z
    :cond_37
    const/16 v33, 0x1

    goto/16 :goto_1a
.end method

.method public updateSystemBarsLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManagerPolicy$WindowState;II)I
    .locals 7
    .param p1, "focusedWin"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p2, "fullscreenTransWin"    # Landroid/view/WindowManagerPolicy$WindowState;
    .param p3, "oldVis"    # I
    .param p4, "vis"    # I

    .prologue
    const v6, 0x7fffffff

    const/high16 v5, 0x8000000

    const v4, 0x8000

    const/4 v3, 0x0

    .line 6925
    const/4 v0, 0x0

    .line 6927
    .local v0, "forceEnabledSystemUiFlags":Z
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isMobileKeyboardEnabled()Z

    move-result v2

    if-eqz v2, :cond_0

    .line 6928
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    invoke-virtual {v2}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v2

    invoke-interface {v2}, Ljava/lang/CharSequence;->toString()Ljava/lang/String;

    move-result-object v1

    .line 6929
    .local v1, "title":Ljava/lang/String;
    if-eqz v1, :cond_8

    .line 6930
    const-string v2, "com.sec.keyboardcovertest.SensitivityTestAcitivity"

    invoke-virtual {v1, v2}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 6931
    const-string v2, "com.sec.keyboardcovertest.SaveDatatAcitivity"

    invoke-virtual {v1, v2}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v2

    if-eqz v2, :cond_8

    .line 6937
    .end local v1    # "title":Ljava/lang/String;
    :cond_0
    :goto_0
    if-eqz p2, :cond_1

    invoke-interface {p2}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v2

    invoke-interface {v2}, Lcom/samsung/android/view/IWindowStateBridge;->isAspectRatioWindow()Z

    move-result v2

    if-eqz v2, :cond_1

    .line 6938
    or-int/2addr p4, v4

    .line 6943
    :cond_1
    if-eqz p2, :cond_2

    .line 6944
    invoke-interface {p2}, Landroid/view/WindowManagerPolicy$WindowState;->getBridge()Lcom/samsung/android/view/IWindowStateBridge;

    move-result-object v2

    invoke-interface {v2}, Lcom/samsung/android/view/IWindowStateBridge;->isHomeTask()Z

    move-result v2

    .line 6942
    if-eqz v2, :cond_2

    .line 6945
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeForPreparing()Z

    move-result v2

    .line 6942
    if-eqz v2, :cond_2

    .line 6946
    or-int/2addr p4, v4

    .line 6950
    :cond_2
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v2, :cond_3

    .line 6951
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v2

    .line 6950
    if-eqz v2, :cond_3

    .line 6952
    and-int v2, p4, v5

    if-eqz v2, :cond_3

    .line 6953
    const/4 v0, 0x1

    .line 6954
    and-int v2, p4, v5

    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    .line 6957
    :cond_3
    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolOverlayWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v2, :cond_4

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mGameToolOverlayWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy$WindowState;->isVisibleLw()Z

    move-result v2

    if-eqz v2, :cond_4

    .line 6958
    const v2, 0x8001

    or-int/2addr p4, v2

    .line 6959
    and-int/2addr p4, v6

    .line 6962
    :cond_4
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    if-eqz v2, :cond_5

    if-eqz v0, :cond_9

    .line 6970
    :cond_5
    :goto_1
    invoke-direct {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isBixbyFullWindowShowing()Z

    move-result v2

    if-eqz v2, :cond_6

    .line 6971
    or-int/2addr p4, v4

    .line 6972
    and-int/2addr p4, v6

    .line 6975
    :cond_6
    invoke-interface {p1}, Landroid/view/WindowManagerPolicy$WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    iget v2, v2, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v3, 0x3

    if-ne v2, v3, :cond_7

    .line 6976
    and-int/lit16 v2, p3, 0x1802

    or-int/2addr p4, v2

    .line 6981
    :cond_7
    return p4

    .line 6932
    .restart local v1    # "title":Ljava/lang/String;
    :cond_8
    and-int/lit8 p4, p4, -0x3

    goto :goto_0

    .line 6963
    .end local v1    # "title":Ljava/lang/String;
    :cond_9
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    and-int/2addr v2, v5

    if-eqz v2, :cond_a

    .line 6964
    const/high16 v2, 0x20000000

    or-int/2addr p4, v2

    .line 6966
    :cond_a
    iget v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    iput v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mUnsettingSystemUiFlags:I

    .line 6967
    iput v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mForceEnabledSystemUiFlags:I

    goto :goto_1
.end method

.method public updateSystemUiVisibilityLw()V
    .locals 3

    .prologue
    .line 6905
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    iget-object v2, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v2, v2, Lcom/android/server/policy/PhoneWindowManager;->mTopFullscreenOpaqueOrDimmingWindowState:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-direct {p0, v1, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updateNavigationBarIconColorLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManagerPolicy$WindowState;)I

    move-result v0

    .line 6906
    .local v0, "navigationBarIconColor":I
    iget v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastNavigationBarIconColor:I

    if-eq v1, v0, :cond_0

    .line 6907
    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLastNavigationBarIconColor:I

    .line 6908
    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mHandler:Landroid/os/Handler;

    new-instance v2, Lcom/android/server/policy/SamsungPhoneWindowManager$37;

    invoke-direct {v2, p0}, Lcom/android/server/policy/SamsungPhoneWindowManager$37;-><init>(Lcom/android/server/policy/SamsungPhoneWindowManager;)V

    invoke-virtual {v1, v2}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 6904
    :cond_0
    return-void
.end method

.method public updateTaskBarHeightInDesktopMode()V
    .locals 2

    .prologue
    .line 8660
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v0

    sget v1, Lcom/samsung/android/framework/res/R$dimen;->task_bar_height:I

    invoke-virtual {v0, v1}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v0

    iput v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mTaskBarHeightInDesktopMode:I

    .line 8659
    return-void
.end method

.method public updateTopActivity(Landroid/content/ComponentName;)V
    .locals 1
    .param p1, "componentName"    # Landroid/content/ComponentName;

    .prologue
    .line 7057
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mSystemKeyManager:Lcom/android/server/policy/SystemKeyManager;

    invoke-virtual {v0, p1}, Lcom/android/server/policy/SystemKeyManager;->updateTopActivity(Landroid/content/ComponentName;)V

    .line 7056
    return-void
.end method

.method public updateTouchableArea(Z)V
    .locals 10
    .param p1, "changed"    # Z

    .prologue
    .line 9019
    invoke-virtual {p0}, Lcom/android/server/policy/SamsungPhoneWindowManager;->isDesktopModeForPreparing()Z

    move-result v7

    if-nez v7, :cond_0

    iget-object v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mWindowManagerFuncs:Landroid/view/WindowManagerPolicy$WindowManagerFuncs;

    invoke-interface {v7}, Landroid/view/WindowManagerPolicy$WindowManagerFuncs;->isDesktopModeLw()Z

    move-result v7

    .line 9018
    if-eqz v7, :cond_1

    .line 9020
    :cond_0
    return-void

    .line 9023
    :cond_1
    new-instance v7, Ljava/lang/StringBuilder;

    invoke-direct {v7}, Ljava/lang/StringBuilder;-><init>()V

    const-string v8, "set_touchable_area,"

    invoke-virtual {v7, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    if-eqz p1, :cond_2

    const-string v7, "1"

    :goto_0
    invoke-virtual {v8, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    .line 9024
    .local v6, "tspCommand":Ljava/lang/String;
    iget-boolean v7, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangedTouchableArea:Z

    if-ne v7, p1, :cond_3

    .line 9025
    return-void

    .line 9023
    .end local v6    # "tspCommand":Ljava/lang/String;
    :cond_2
    const-string v7, "0"

    goto :goto_0

    .line 9027
    .restart local v6    # "tspCommand":Ljava/lang/String;
    :cond_3
    iput-boolean p1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mChangedTouchableArea:Z

    .line 9029
    const-string v7, "SamsungPhoneWindowManager"

    new-instance v8, Ljava/lang/StringBuilder;

    invoke-direct {v8}, Ljava/lang/StringBuilder;-><init>()V

    const-string v9, "updateTouchableArea ="

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v8

    invoke-static {v7, v8}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 9031
    const/4 v4, 0x0

    .line 9033
    .local v4, "fos":Ljava/io/OutputStream;
    :try_start_0
    new-instance v3, Ljava/io/File;

    const-string v7, "/sys/class/sec/tsp/cmd"

    invoke-direct {v3, v7}, Ljava/io/File;-><init>(Ljava/lang/String;)V

    .line 9034
    .local v3, "file":Ljava/io/File;
    invoke-virtual {v3}, Ljava/io/File;->exists()Z

    move-result v7

    if-nez v7, :cond_4

    .line 9035
    const-string v7, "SamsungPhoneWindowManager"

    const-string v8, "The file is not existed."

    invoke-static {v7, v8}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 9036
    return-void

    .line 9038
    :cond_4
    invoke-virtual {v3}, Ljava/io/File;->canWrite()Z

    move-result v7

    if-nez v7, :cond_5

    .line 9039
    const-string v7, "SamsungPhoneWindowManager"

    const-string v8, "The file cannot write."

    invoke-static {v7, v8}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 9040
    return-void

    .line 9042
    :cond_5
    new-instance v5, Ljava/io/FileOutputStream;

    invoke-direct {v5, v3}, Ljava/io/FileOutputStream;-><init>(Ljava/io/File;)V
    :try_end_0
    .catch Ljava/io/FileNotFoundException; {:try_start_0 .. :try_end_0} :catch_3
    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_1
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 9043
    .local v5, "fos":Ljava/io/OutputStream;
    :try_start_1
    const-string v7, "UTF-8"

    .end local v4    # "fos":Ljava/io/OutputStream;
    invoke-virtual {v6, v7}, Ljava/lang/String;->getBytes(Ljava/lang/String;)[B

    move-result-object v7

    invoke-virtual {v5, v7}, Ljava/io/OutputStream;->write([B)V

    .line 9044
    invoke-virtual {v5}, Ljava/io/OutputStream;->flush()V
    :try_end_1
    .catch Ljava/io/FileNotFoundException; {:try_start_1 .. :try_end_1} :catch_6
    .catch Ljava/io/IOException; {:try_start_1 .. :try_end_1} :catch_7
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    .line 9051
    if-eqz v5, :cond_6

    .line 9052
    :try_start_2
    invoke-virtual {v5}, Ljava/io/OutputStream;->close()V
    :try_end_2
    .catch Ljava/lang/Exception; {:try_start_2 .. :try_end_2} :catch_0

    :cond_6
    :goto_1
    move-object v4, v5

    .line 9017
    .end local v3    # "file":Ljava/io/File;
    .end local v5    # "fos":Ljava/io/OutputStream;
    :cond_7
    :goto_2
    return-void

    .line 9054
    .restart local v3    # "file":Ljava/io/File;
    .restart local v5    # "fos":Ljava/io/OutputStream;
    :catch_0
    move-exception v2

    .line 9055
    .local v2, "e":Ljava/lang/Exception;
    invoke-virtual {v2}, Ljava/lang/Exception;->printStackTrace()V

    goto :goto_1

    .line 9047
    .end local v2    # "e":Ljava/lang/Exception;
    .end local v3    # "file":Ljava/io/File;
    .end local v5    # "fos":Ljava/io/OutputStream;
    .restart local v4    # "fos":Ljava/io/OutputStream;
    :catch_1
    move-exception v1

    .line 9048
    .end local v4    # "fos":Ljava/io/OutputStream;
    .local v1, "e":Ljava/io/IOException;
    :goto_3
    :try_start_3
    invoke-virtual {v1}, Ljava/io/IOException;->printStackTrace()V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    .line 9051
    if-eqz v4, :cond_7

    .line 9052
    :try_start_4
    invoke-virtual {v4}, Ljava/io/OutputStream;->close()V
    :try_end_4
    .catch Ljava/lang/Exception; {:try_start_4 .. :try_end_4} :catch_2

    goto :goto_2

    .line 9054
    :catch_2
    move-exception v2

    .line 9055
    .restart local v2    # "e":Ljava/lang/Exception;
    invoke-virtual {v2}, Ljava/lang/Exception;->printStackTrace()V

    goto :goto_2

    .line 9045
    .end local v1    # "e":Ljava/io/IOException;
    .end local v2    # "e":Ljava/lang/Exception;
    .restart local v4    # "fos":Ljava/io/OutputStream;
    :catch_3
    move-exception v0

    .line 9046
    .end local v4    # "fos":Ljava/io/OutputStream;
    .local v0, "e":Ljava/io/FileNotFoundException;
    :goto_4
    :try_start_5
    invoke-virtual {v0}, Ljava/io/FileNotFoundException;->printStackTrace()V
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_0

    .line 9051
    if-eqz v4, :cond_7

    .line 9052
    :try_start_6
    invoke-virtual {v4}, Ljava/io/OutputStream;->close()V
    :try_end_6
    .catch Ljava/lang/Exception; {:try_start_6 .. :try_end_6} :catch_4

    goto :goto_2

    .line 9054
    :catch_4
    move-exception v2

    .line 9055
    .restart local v2    # "e":Ljava/lang/Exception;
    invoke-virtual {v2}, Ljava/lang/Exception;->printStackTrace()V

    goto :goto_2

    .line 9049
    .end local v0    # "e":Ljava/io/FileNotFoundException;
    .end local v2    # "e":Ljava/lang/Exception;
    :catchall_0
    move-exception v7

    .line 9051
    :goto_5
    if-eqz v4, :cond_8

    .line 9052
    :try_start_7
    invoke-virtual {v4}, Ljava/io/OutputStream;->close()V
    :try_end_7
    .catch Ljava/lang/Exception; {:try_start_7 .. :try_end_7} :catch_5

    .line 9049
    :cond_8
    :goto_6
    throw v7

    .line 9054
    :catch_5
    move-exception v2

    .line 9055
    .restart local v2    # "e":Ljava/lang/Exception;
    invoke-virtual {v2}, Ljava/lang/Exception;->printStackTrace()V

    goto :goto_6

    .line 9049
    .end local v2    # "e":Ljava/lang/Exception;
    .restart local v3    # "file":Ljava/io/File;
    .restart local v5    # "fos":Ljava/io/OutputStream;
    :catchall_1
    move-exception v7

    move-object v4, v5

    .end local v5    # "fos":Ljava/io/OutputStream;
    .local v4, "fos":Ljava/io/OutputStream;
    goto :goto_5

    .line 9045
    .end local v4    # "fos":Ljava/io/OutputStream;
    .restart local v5    # "fos":Ljava/io/OutputStream;
    :catch_6
    move-exception v0

    .restart local v0    # "e":Ljava/io/FileNotFoundException;
    move-object v4, v5

    .end local v5    # "fos":Ljava/io/OutputStream;
    .restart local v4    # "fos":Ljava/io/OutputStream;
    goto :goto_4

    .line 9047
    .end local v0    # "e":Ljava/io/FileNotFoundException;
    .end local v4    # "fos":Ljava/io/OutputStream;
    .restart local v5    # "fos":Ljava/io/OutputStream;
    :catch_7
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    move-object v4, v5

    .end local v5    # "fos":Ljava/io/OutputStream;
    .restart local v4    # "fos":Ljava/io/OutputStream;
    goto :goto_3
.end method

.method public updateTspInputMethodPolicy(Landroid/view/WindowManagerPolicy$WindowState;)V
    .locals 3
    .param p1, "inputMethodClient"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v2, 0x0

    .line 8878
    sget-boolean v0, Lcom/android/server/policy/TspStateManagerPolicy;->FEATURE_ENABLED:Z

    if-eqz v0, :cond_0

    .line 8879
    if-eqz p1, :cond_1

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p1, v0, :cond_1

    .line 8880
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getTspStateManagerPolicy()Lcom/android/server/policy/TspStateManagerPolicy;

    move-result-object v0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mInputMethod:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0, v1}, Lcom/android/server/policy/TspStateManagerPolicy;->updateInputMethodPolicy(Landroid/view/WindowManagerPolicy$WindowState;)V

    .line 8877
    :cond_0
    :goto_0
    return-void

    .line 8881
    :cond_1
    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-eqz v0, :cond_0

    .line 8882
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getTspStateManagerPolicy()Lcom/android/server/policy/TspStateManagerPolicy;

    move-result-object v0

    iget-object v1, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v1, v1, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    invoke-interface {v0, v1, v2}, Lcom/android/server/policy/TspStateManagerPolicy;->updateWindowPolicy(Landroid/view/WindowManagerPolicy$WindowState;Ljava/lang/String;)V

    goto :goto_0
.end method

.method public updateTspWindowPolicy(Landroid/view/WindowManagerPolicy$WindowState;)V
    .locals 2
    .param p1, "win"    # Landroid/view/WindowManagerPolicy$WindowState;

    .prologue
    const/4 v1, 0x0

    .line 8870
    sget-boolean v0, Lcom/android/server/policy/TspStateManagerPolicy;->FEATURE_ENABLED:Z

    if-eqz v0, :cond_0

    .line 8871
    if-eqz p1, :cond_0

    iget-object v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mPWM:Lcom/android/server/policy/PhoneWindowManager;

    iget-object v0, v0, Lcom/android/server/policy/PhoneWindowManager;->mFocusedWindow:Landroid/view/WindowManagerPolicy$WindowState;

    if-ne p1, v0, :cond_0

    .line 8872
    invoke-static {}, Lcom/android/server/SamsungCoreServices;->getTspStateManagerPolicy()Lcom/android/server/policy/TspStateManagerPolicy;

    move-result-object v0

    invoke-interface {v0, p1, v1}, Lcom/android/server/policy/TspStateManagerPolicy;->updateWindowPolicy(Landroid/view/WindowManagerPolicy$WindowState;Ljava/lang/String;)V

    .line 8869
    :cond_0
    return-void
.end method

.method public updateWakeupPrevention()V
    .locals 7

    .prologue
    .line 8135
    iget-object v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    .line 8136
    .local v1, "resolver":Landroid/content/ContentResolver;
    iget-object v4, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mLock:Ljava/lang/Object;

    monitor-enter v4

    .line 8137
    :try_start_0
    const-string v3, "wakeup_prevention"

    const/4 v5, 0x0

    const/4 v6, -0x2

    invoke-static {v1, v3, v5, v6}, Landroid/provider/Settings$Secure;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v3

    if-eqz v3, :cond_1

    const/4 v0, 0x1

    .line 8138
    .local v0, "isWakeupPrevention":Z
    :goto_0
    iget-boolean v3, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakeupPrevention:Z

    if-eq v3, v0, :cond_0

    .line 8139
    iput-boolean v0, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakeupPrevention:Z

    .line 8140
    const-string v3, "SamsungPhoneWindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "updateWakeupPrevention = "

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    iget-boolean v6, p0, Lcom/android/server/policy/SamsungPhoneWindowManager;->mIsWakeupPrevention:Z

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v3, v5}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 8142
    :cond_0
    const-string v3, "wakeup_prevention_packages"

    const/4 v5, -0x2

    invoke-static {v1, v3, v5}, Landroid/provider/Settings$Secure;->getStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;I)Ljava/lang/String;

    move-result-object v2

    .line 8143
    .local v2, "wakeupPreventionPackages":Ljava/lang/String;
    invoke-direct {p0, v2}, Lcom/android/server/policy/SamsungPhoneWindowManager;->updateWakeupPreventionPackages(Ljava/lang/String;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v4

    .line 8134
    return-void

    .line 8137
    .end local v0    # "isWakeupPrevention":Z
    .end local v2    # "wakeupPreventionPackages":Ljava/lang/String;
    :cond_1
    const/4 v0, 0x0

    .restart local v0    # "isWakeupPrevention":Z
    goto :goto_0

    .line 8136
    .end local v0    # "isWakeupPrevention":Z
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3
.end method

.method public windowTypeToLayer(I)I
    .locals 1
    .param p1, "type"    # I

    .prologue
    .line 7991
    sparse-switch p1, :sswitch_data_0

    .line 8060
    const/4 v0, -0x1

    return v0

    .line 7993
    :sswitch_0
    const/4 v0, 0x1

    return v0

    .line 7995
    :sswitch_1
    const/4 v0, 0x2

    return v0

    .line 7999
    :sswitch_2
    const/4 v0, 0x3

    return v0

    .line 8002
    :sswitch_3
    const/4 v0, 0x4

    return v0

    .line 8004
    :sswitch_4
    const/4 v0, 0x5

    return v0

    .line 8007
    :sswitch_5
    const/4 v0, 0x7

    return v0

    .line 8009
    :sswitch_6
    const/16 v0, 0x9

    return v0

    .line 8011
    :sswitch_7
    const/16 v0, 0xd

    return v0

    .line 8013
    :sswitch_8
    const/16 v0, 0xe

    return v0

    .line 8016
    :sswitch_9
    const/16 v0, 0x10

    return v0

    .line 8018
    :sswitch_a
    const/16 v0, 0x11

    return v0

    .line 8022
    :sswitch_b
    const/16 v0, 0x12

    return v0

    .line 8024
    :sswitch_c
    const/16 v0, 0x13

    return v0

    .line 8028
    :sswitch_d
    const/16 v0, 0x14

    return v0

    .line 8030
    :sswitch_e
    const/16 v0, 0x15

    return v0

    .line 8032
    :sswitch_f
    const/16 v0, 0x17

    return v0

    .line 8035
    :sswitch_10
    const/16 v0, 0x18

    return v0

    .line 8038
    :sswitch_11
    const/16 v0, 0x19

    return v0

    .line 8040
    :sswitch_12
    const/16 v0, 0x1a

    return v0

    .line 8043
    :sswitch_13
    const/16 v0, 0x1b

    return v0

    .line 8045
    :sswitch_14
    const/16 v0, 0x1c

    return v0

    .line 8048
    :sswitch_15
    const/16 v0, 0x1d

    return v0

    .line 8051
    :sswitch_16
    const/16 v0, 0x1e

    return v0

    .line 8053
    :sswitch_17
    const/16 v0, 0x1f

    return v0

    .line 8055
    :sswitch_18
    const/16 v0, 0x20

    return v0

    .line 8058
    :sswitch_19
    const/16 v0, 0x23

    return v0

    .line 7991
    nop

    :sswitch_data_0
    .sparse-switch
        0x830 -> :sswitch_d
        0x831 -> :sswitch_10
        0x832 -> :sswitch_8
        0x833 -> :sswitch_b
        0x834 -> :sswitch_16
        0x835 -> :sswitch_16
        0x836 -> :sswitch_13
        0x8b1 -> :sswitch_13
        0x8b2 -> :sswitch_b
        0x8b3 -> :sswitch_14
        0x8b4 -> :sswitch_11
        0x8b6 -> :sswitch_19
        0x8ca -> :sswitch_15
        0x8ce -> :sswitch_11
        0x8cf -> :sswitch_0
        0x8de -> :sswitch_9
        0x8df -> :sswitch_9
        0x8e0 -> :sswitch_1
        0x8e1 -> :sswitch_3
        0x960 -> :sswitch_7
        0x961 -> :sswitch_f
        0x962 -> :sswitch_5
        0x963 -> :sswitch_4
        0x964 -> :sswitch_6
        0x965 -> :sswitch_10
        0x966 -> :sswitch_2
        0x967 -> :sswitch_19
        0x968 -> :sswitch_15
        0x96a -> :sswitch_12
        0x96b -> :sswitch_b
        0x96c -> :sswitch_5
        0x96d -> :sswitch_2
        0x96e -> :sswitch_c
        0x96f -> :sswitch_a
        0x974 -> :sswitch_18
        0x975 -> :sswitch_17
        0x97e -> :sswitch_2
        0x97f -> :sswitch_3
        0x988 -> :sswitch_d
        0x989 -> :sswitch_d
        0x98a -> :sswitch_e
    .end sparse-switch
.end method
